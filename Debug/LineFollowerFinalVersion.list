
LineFollowerFinalVersion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08009eb0  08009eb0  00019eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3d4  0800a3d4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3dc  0800a3dc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3dc  0800a3dc  0001a3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3e0  0800a3e0  0001a3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a3e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200001f0  0800a5d4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800a5d4  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f44f  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208b  00000000  00000000  0002f66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  000324f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001855f  00000000  00000000  00033218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd3b  00000000  00000000  0004b777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b5dc  00000000  00000000  0005b4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6a8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005098  00000000  00000000  000f6ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e98 	.word	0x08009e98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08009e98 	.word	0x08009e98

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f001 f983 	bl	8002318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f8a9 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 faab 	bl	8001570 <MX_GPIO_Init>
  MX_DMA_Init();
 800101a:	f000 fa89 	bl	8001530 <MX_DMA_Init>
  MX_ADC1_Init();
 800101e:	f000 f90b 	bl	8001238 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001022:	f000 fa5b 	bl	80014dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001026:	f000 f9bb 	bl	80013a0 <MX_TIM3_Init>
  MX_TIM10_Init();
 800102a:	f000 fa33 	bl	8001494 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_current, ADC_BUF_LEN);
 800102e:	2210      	movs	r2, #16
 8001030:	4945      	ldr	r1, [pc, #276]	; (8001148 <main+0x140>)
 8001032:	4846      	ldr	r0, [pc, #280]	; (800114c <main+0x144>)
 8001034:	f001 fa26 	bl	8002484 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3 , TIM_CHANNEL_1);
 8001038:	2100      	movs	r1, #0
 800103a:	4845      	ldr	r0, [pc, #276]	; (8001150 <main+0x148>)
 800103c:	f003 f972 	bl	8004324 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3 , TIM_CHANNEL_3);
 8001040:	2108      	movs	r1, #8
 8001042:	4843      	ldr	r0, [pc, #268]	; (8001150 <main+0x148>)
 8001044:	f003 f96e 	bl	8004324 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3 , TIM_CHANNEL_2);
 8001048:	2104      	movs	r1, #4
 800104a:	4841      	ldr	r0, [pc, #260]	; (8001150 <main+0x148>)
 800104c:	f003 f96a 	bl	8004324 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3 , TIM_CHANNEL_4);
 8001050:	210c      	movs	r1, #12
 8001052:	483f      	ldr	r0, [pc, #252]	; (8001150 <main+0x148>)
 8001054:	f003 f966 	bl	8004324 <HAL_TIM_PWM_Start>

//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
  for(int i=0; i<8; i++){
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e00d      	b.n	800107a <main+0x72>
  	  sensors_min[i] = 4095;
 800105e:	4a3d      	ldr	r2, [pc, #244]	; (8001154 <main+0x14c>)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001066:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  	  sensors_max[i]=0;
 800106a:	4a3b      	ldr	r2, [pc, #236]	; (8001158 <main+0x150>)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2100      	movs	r1, #0
 8001070:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<8; i++){
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b07      	cmp	r3, #7
 800107e:	ddee      	ble.n	800105e <main+0x56>
    }
  HAL_TIM_Base_Start_IT(&htim10);
 8001080:	4836      	ldr	r0, [pc, #216]	; (800115c <main+0x154>)
 8001082:	f003 f89d 	bl	80041c0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001086:	2120      	movs	r1, #32
 8001088:	4835      	ldr	r0, [pc, #212]	; (8001160 <main+0x158>)
 800108a:	f002 fbbf 	bl	800380c <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d103      	bne.n	800109c <main+0x94>
	  {
		  pidCalculate = 0;
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <main+0x15c>)
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
	  }
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){
 800109c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a0:	482f      	ldr	r0, [pc, #188]	; (8001160 <main+0x158>)
 80010a2:	f002 fbb3 	bl	800380c <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d143      	bne.n	8001134 <main+0x12c>

	  			for(int i=0; i<8; i++){
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	e00d      	b.n	80010ce <main+0xc6>
	  			   sensors_min[i] = 4095;
 80010b2:	4a28      	ldr	r2, [pc, #160]	; (8001154 <main+0x14c>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80010ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			   sensors_max[i] = 0;
 80010be:	4a26      	ldr	r2, [pc, #152]	; (8001158 <main+0x150>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2100      	movs	r1, #0
 80010c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			for(int i=0; i<8; i++){
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	3301      	adds	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2b07      	cmp	r3, #7
 80010d2:	ddee      	ble.n	80010b2 <main+0xaa>
	  			}
	  		 }
	  		 while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0){
 80010d4:	e02e      	b.n	8001134 <main+0x12c>
	  		  for (int i=0; i<8; i++){
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	e028      	b.n	800112e <main+0x126>
	  		   if (sensors_max[i]<adc_current[i]){
 80010dc:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <main+0x150>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	4918      	ldr	r1, [pc, #96]	; (8001148 <main+0x140>)
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d208      	bcs.n	8001102 <main+0xfa>
	  			sensors_max[i]=adc_current[i];
 80010f0:	4a15      	ldr	r2, [pc, #84]	; (8001148 <main+0x140>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4a17      	ldr	r2, [pc, #92]	; (8001158 <main+0x150>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			  }
	  		   if (sensors_min[i]>adc_current[i]){
 8001102:	4a14      	ldr	r2, [pc, #80]	; (8001154 <main+0x14c>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	490f      	ldr	r1, [pc, #60]	; (8001148 <main+0x140>)
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001112:	4293      	cmp	r3, r2
 8001114:	d908      	bls.n	8001128 <main+0x120>
	  			sensors_min[i]=adc_current[i];
 8001116:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <main+0x140>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800111e:	4619      	mov	r1, r3
 8001120:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <main+0x14c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  		  for (int i=0; i<8; i++){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3301      	adds	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b07      	cmp	r3, #7
 8001132:	ddd3      	ble.n	80010dc <main+0xd4>
	  		 while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0){
 8001134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <main+0x158>)
 800113a:	f002 fb67 	bl	800380c <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0c8      	beq.n	80010d6 <main+0xce>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001144:	e79f      	b.n	8001086 <main+0x7e>
 8001146:	bf00      	nop
 8001148:	20000388 	.word	0x20000388
 800114c:	2000020c 	.word	0x2000020c
 8001150:	200002b4 	.word	0x200002b4
 8001154:	200003c8 	.word	0x200003c8
 8001158:	200003a8 	.word	0x200003a8
 800115c:	200002fc 	.word	0x200002fc
 8001160:	40020000 	.word	0x40020000
 8001164:	20000510 	.word	0x20000510

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	; 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fa16 	bl	80055a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <SystemClock_Config+0xc8>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <SystemClock_Config+0xc8>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <SystemClock_Config+0xc8>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <SystemClock_Config+0xcc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <SystemClock_Config+0xcc>)
 80011b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <SystemClock_Config+0xcc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d8:	2308      	movs	r3, #8
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80011dc:	2350      	movs	r3, #80	; 0x50
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011e4:	2304      	movs	r3, #4
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fb3f 	bl	8003870 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f8:	f000 fda4 	bl	8001d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2102      	movs	r1, #2
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fda1 	bl	8003d60 <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001224:	f000 fd8e 	bl	8001d44 <Error_Handler>
  }
}
 8001228:	bf00      	nop
 800122a:	3750      	adds	r7, #80	; 0x50
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800124a:	4b52      	ldr	r3, [pc, #328]	; (8001394 <MX_ADC1_Init+0x15c>)
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <MX_ADC1_Init+0x160>)
 800124e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001250:	4b50      	ldr	r3, [pc, #320]	; (8001394 <MX_ADC1_Init+0x15c>)
 8001252:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001256:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001258:	4b4e      	ldr	r3, [pc, #312]	; (8001394 <MX_ADC1_Init+0x15c>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <MX_ADC1_Init+0x15c>)
 8001260:	2201      	movs	r2, #1
 8001262:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <MX_ADC1_Init+0x15c>)
 8001266:	2201      	movs	r2, #1
 8001268:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126a:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <MX_ADC1_Init+0x15c>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001272:	4b48      	ldr	r3, [pc, #288]	; (8001394 <MX_ADC1_Init+0x15c>)
 8001274:	2200      	movs	r2, #0
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001278:	4b46      	ldr	r3, [pc, #280]	; (8001394 <MX_ADC1_Init+0x15c>)
 800127a:	4a48      	ldr	r2, [pc, #288]	; (800139c <MX_ADC1_Init+0x164>)
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127e:	4b45      	ldr	r3, [pc, #276]	; (8001394 <MX_ADC1_Init+0x15c>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001284:	4b43      	ldr	r3, [pc, #268]	; (8001394 <MX_ADC1_Init+0x15c>)
 8001286:	2208      	movs	r2, #8
 8001288:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800128a:	4b42      	ldr	r3, [pc, #264]	; (8001394 <MX_ADC1_Init+0x15c>)
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001292:	4b40      	ldr	r3, [pc, #256]	; (8001394 <MX_ADC1_Init+0x15c>)
 8001294:	2201      	movs	r2, #1
 8001296:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001298:	483e      	ldr	r0, [pc, #248]	; (8001394 <MX_ADC1_Init+0x15c>)
 800129a:	f001 f8af 	bl	80023fc <HAL_ADC_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012a4:	f000 fd4e 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4836      	ldr	r0, [pc, #216]	; (8001394 <MX_ADC1_Init+0x15c>)
 80012ba:	f001 f9f1 	bl	80026a0 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012c4:	f000 fd3e 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	482f      	ldr	r0, [pc, #188]	; (8001394 <MX_ADC1_Init+0x15c>)
 80012d6:	f001 f9e3 	bl	80026a0 <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012e0:	f000 fd30 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012e8:	2303      	movs	r3, #3
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4828      	ldr	r0, [pc, #160]	; (8001394 <MX_ADC1_Init+0x15c>)
 80012f2:	f001 f9d5 	bl	80026a0 <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80012fc:	f000 fd22 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001300:	2306      	movs	r3, #6
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001304:	2304      	movs	r3, #4
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4821      	ldr	r0, [pc, #132]	; (8001394 <MX_ADC1_Init+0x15c>)
 800130e:	f001 f9c7 	bl	80026a0 <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001318:	f000 fd14 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800131c:	2307      	movs	r3, #7
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001320:	2305      	movs	r3, #5
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	481a      	ldr	r0, [pc, #104]	; (8001394 <MX_ADC1_Init+0x15c>)
 800132a:	f001 f9b9 	bl	80026a0 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001334:	f000 fd06 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001338:	2308      	movs	r3, #8
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800133c:	2306      	movs	r3, #6
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4813      	ldr	r0, [pc, #76]	; (8001394 <MX_ADC1_Init+0x15c>)
 8001346:	f001 f9ab 	bl	80026a0 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001350:	f000 fcf8 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001354:	2309      	movs	r3, #9
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001358:	2307      	movs	r3, #7
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <MX_ADC1_Init+0x15c>)
 8001362:	f001 f99d 	bl	80026a0 <HAL_ADC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800136c:	f000 fcea 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001370:	230a      	movs	r3, #10
 8001372:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001374:	2308      	movs	r3, #8
 8001376:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_ADC1_Init+0x15c>)
 800137e:	f001 f98f 	bl	80026a0 <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001388:	f000 fcdc 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000020c 	.word	0x2000020c
 8001398:	40012000 	.word	0x40012000
 800139c:	0f000001 	.word	0x0f000001

080013a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <MX_TIM3_Init+0xec>)
 80013c4:	4a32      	ldr	r2, [pc, #200]	; (8001490 <MX_TIM3_Init+0xf0>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <MX_TIM3_Init+0xec>)
 80013ca:	224f      	movs	r2, #79	; 0x4f
 80013cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <MX_TIM3_Init+0xec>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MX_TIM3_Init+0xec>)
 80013d6:	2263      	movs	r2, #99	; 0x63
 80013d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <MX_TIM3_Init+0xec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <MX_TIM3_Init+0xec>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013e6:	4829      	ldr	r0, [pc, #164]	; (800148c <MX_TIM3_Init+0xec>)
 80013e8:	f002 ff4c 	bl	8004284 <HAL_TIM_PWM_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80013f2:	f000 fca7 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	4619      	mov	r1, r3
 8001404:	4821      	ldr	r0, [pc, #132]	; (800148c <MX_TIM3_Init+0xec>)
 8001406:	f003 fc61 	bl	8004ccc <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001410:	f000 fc98 	bl	8001d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001414:	2360      	movs	r3, #96	; 0x60
 8001416:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4818      	ldr	r0, [pc, #96]	; (800148c <MX_TIM3_Init+0xec>)
 800142c:	f003 f932 	bl	8004694 <HAL_TIM_PWM_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001436:	f000 fc85 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2204      	movs	r2, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4812      	ldr	r0, [pc, #72]	; (800148c <MX_TIM3_Init+0xec>)
 8001442:	f003 f927 	bl	8004694 <HAL_TIM_PWM_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800144c:	f000 fc7a 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2208      	movs	r2, #8
 8001454:	4619      	mov	r1, r3
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_TIM3_Init+0xec>)
 8001458:	f003 f91c 	bl	8004694 <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001462:	f000 fc6f 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	220c      	movs	r2, #12
 800146a:	4619      	mov	r1, r3
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_TIM3_Init+0xec>)
 800146e:	f003 f911 	bl	8004694 <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001478:	f000 fc64 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <MX_TIM3_Init+0xec>)
 800147e:	f000 fd89 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200002b4 	.word	0x200002b4
 8001490:	40000400 	.word	0x40000400

08001494 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_TIM10_Init+0x40>)
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <MX_TIM10_Init+0x44>)
 800149c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 80-1;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014a0:	224f      	movs	r2, #79	; 0x4f
 80014a2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014ac:	f241 3287 	movw	r2, #4999	; 0x1387
 80014b0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014c0:	f002 fe2e 	bl	8004120 <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80014ca:	f000 fc3b 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200002fc 	.word	0x200002fc
 80014d8:	40014400 	.word	0x40014400

080014dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <MX_USART2_UART_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART2_UART_Init+0x4c>)
 8001514:	f003 fc5c 	bl	8004dd0 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800151e:	f000 fc11 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000344 	.word	0x20000344
 800152c:	40004400 	.word	0x40004400

08001530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_DMA_Init+0x3c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <MX_DMA_Init+0x3c>)
 8001540:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_DMA_Init+0x3c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2038      	movs	r0, #56	; 0x38
 8001558:	f001 fc2d 	bl	8002db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800155c:	2038      	movs	r0, #56	; 0x38
 800155e:	f001 fc46 	bl	8002dee <HAL_NVIC_EnableIRQ>

}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <MX_GPIO_Init+0x110>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a3c      	ldr	r2, [pc, #240]	; (8001680 <MX_GPIO_Init+0x110>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <MX_GPIO_Init+0x110>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <MX_GPIO_Init+0x110>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a35      	ldr	r2, [pc, #212]	; (8001680 <MX_GPIO_Init+0x110>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <MX_GPIO_Init+0x110>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <MX_GPIO_Init+0x110>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a2e      	ldr	r2, [pc, #184]	; (8001680 <MX_GPIO_Init+0x110>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <MX_GPIO_Init+0x110>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ON_STM_GPIO_Port, LED_ON_STM_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2120      	movs	r1, #32
 80015de:	4829      	ldr	r0, [pc, #164]	; (8001684 <MX_GPIO_Init+0x114>)
 80015e0:	f002 f92c 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80015ea:	4827      	ldr	r0, [pc, #156]	; (8001688 <MX_GPIO_Init+0x118>)
 80015ec:	f002 f926 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80015f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4619      	mov	r1, r3
 8001604:	4821      	ldr	r0, [pc, #132]	; (800168c <MX_GPIO_Init+0x11c>)
 8001606:	f001 ff7d 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ON_STM_Pin */
  GPIO_InitStruct.Pin = LED_ON_STM_Pin;
 800160a:	2320      	movs	r3, #32
 800160c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_ON_STM_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4818      	ldr	r0, [pc, #96]	; (8001684 <MX_GPIO_Init+0x114>)
 8001622:	f001 ff6f 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001626:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800162a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	4812      	ldr	r0, [pc, #72]	; (8001688 <MX_GPIO_Init+0x118>)
 8001640:	f001 ff60 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_Switch_Pin Left_Switch_Pin */
  GPIO_InitStruct.Pin = Right_Switch_Pin|Left_Switch_Pin;
 8001644:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4619      	mov	r1, r3
 8001658:	480a      	ldr	r0, [pc, #40]	; (8001684 <MX_GPIO_Init+0x114>)
 800165a:	f001 ff53 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA1_Pin ENB1_Pin ENA2_Pin ENB2_Pin */
  GPIO_InitStruct.Pin = ENA1_Pin|ENB1_Pin|ENA2_Pin|ENB2_Pin;
 800165e:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_GPIO_Init+0x118>)
 8001674:	f001 ff46 	bl	8003504 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800

08001690 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001694:	b08e      	sub	sp, #56	; 0x38
 8001696:	af08      	add	r7, sp, #32
 8001698:	60f8      	str	r0, [r7, #12]
	if(htim == &htim10){
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	f040 8323 	bne.w	8001cea <HAL_TIM_PeriodElapsedCallback+0x65a>
		sum_norm_ss=0;
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

		for (int i=0;i<8;i++){
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e045      	b.n	800173e <HAL_TIM_PeriodElapsedCallback+0xae>
 80016b2:	bf00      	nop
 80016b4:	200002fc 	.word	0x200002fc
 80016b8:	200004e8 	.word	0x200004e8
		  norm_ss[i]=1-((float)adc_current[i]-(float)sensors_min[i])/ ((float)sensors_max[i]-(float)sensors_min[i]);
 80016bc:	4acc      	ldr	r2, [pc, #816]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016cc:	4ac9      	ldr	r2, [pc, #804]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016e0:	4ac5      	ldr	r2, [pc, #788]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016f0:	4ac0      	ldr	r2, [pc, #768]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800170c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001710:	4aba      	ldr	r2, [pc, #744]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	edc3 7a00 	vstr	s15, [r3]
		  sum_norm_ss += norm_ss[i];
 800171c:	4ab7      	ldr	r2, [pc, #732]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	4bb5      	ldr	r3, [pc, #724]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	4bb3      	ldr	r3, [pc, #716]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001734:	edc3 7a00 	vstr	s15, [r3]
		for (int i=0;i<8;i++){
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b07      	cmp	r3, #7
 8001742:	ddbb      	ble.n	80016bc <HAL_TIM_PeriodElapsedCallback+0x2c>
	  }
		position = ((-50*norm_ss[0])+(-35.72*norm_ss[1])+(-21.44*norm_ss[2])+(-7.16*norm_ss[5])+(7.16*norm_ss[7])+(21.44*norm_ss[3])+(35.72*norm_ss[4])+(50*norm_ss[6]));
 8001744:	4bad      	ldr	r3, [pc, #692]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x374>
 800174e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001752:	ee17 0a90 	vmov	r0, s15
 8001756:	f7fe feff 	bl	8000558 <__aeabi_f2d>
 800175a:	4604      	mov	r4, r0
 800175c:	460d      	mov	r5, r1
 800175e:	4ba7      	ldr	r3, [pc, #668]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fef8 	bl	8000558 <__aeabi_f2d>
 8001768:	a395      	add	r3, pc, #596	; (adr r3, 80019c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe ff4b 	bl	8000608 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f7fe fd8f 	bl	800029c <__adddf3>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4614      	mov	r4, r2
 8001784:	461d      	mov	r5, r3
 8001786:	4b9d      	ldr	r3, [pc, #628]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fee4 	bl	8000558 <__aeabi_f2d>
 8001790:	a38d      	add	r3, pc, #564	; (adr r3, 80019c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe ff37 	bl	8000608 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4620      	mov	r0, r4
 80017a0:	4629      	mov	r1, r5
 80017a2:	f7fe fd7b 	bl	800029c <__adddf3>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4614      	mov	r4, r2
 80017ac:	461d      	mov	r5, r3
 80017ae:	4b93      	ldr	r3, [pc, #588]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fed0 	bl	8000558 <__aeabi_f2d>
 80017b8:	a385      	add	r3, pc, #532	; (adr r3, 80019d0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff23 	bl	8000608 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe fd67 	bl	800029c <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4614      	mov	r4, r2
 80017d4:	461d      	mov	r5, r3
 80017d6:	4b89      	ldr	r3, [pc, #548]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe febc 	bl	8000558 <__aeabi_f2d>
 80017e0:	a37d      	add	r3, pc, #500	; (adr r3, 80019d8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe ff0f 	bl	8000608 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7fe fd53 	bl	800029c <__adddf3>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4614      	mov	r4, r2
 80017fc:	461d      	mov	r5, r3
 80017fe:	4b7f      	ldr	r3, [pc, #508]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fea8 	bl	8000558 <__aeabi_f2d>
 8001808:	a375      	add	r3, pc, #468	; (adr r3, 80019e0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fefb 	bl	8000608 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe fd3f 	bl	800029c <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4614      	mov	r4, r2
 8001824:	461d      	mov	r5, r3
 8001826:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe94 	bl	8000558 <__aeabi_f2d>
 8001830:	a36d      	add	r3, pc, #436	; (adr r3, 80019e8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe fee7 	bl	8000608 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fd2b 	bl	800029c <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4614      	mov	r4, r2
 800184c:	461d      	mov	r5, r3
 800184e:	4b6b      	ldr	r3, [pc, #428]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001850:	edd3 7a06 	vldr	s15, [r3, #24]
 8001854:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001a08 <HAL_TIM_PeriodElapsedCallback+0x378>
 8001858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185c:	ee17 0a90 	vmov	r0, s15
 8001860:	f7fe fe7a 	bl	8000558 <__aeabi_f2d>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4620      	mov	r0, r4
 800186a:	4629      	mov	r1, r5
 800186c:	f7fe fd16 	bl	800029c <__adddf3>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f9be 	bl	8000bf8 <__aeabi_d2f>
 800187c:	4603      	mov	r3, r0
 800187e:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001880:	6013      	str	r3, [r2, #0]
//		sprintf(&text1, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n", norm_ss[6],norm_ss[4],norm_ss[3],norm_ss[7],norm_ss[5],norm_ss[2],norm_ss[1],norm_ss[0]);
		sprintf(&text1, "%.2f\r\n", position);
 8001882:	4b62      	ldr	r3, [pc, #392]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe66 	bl	8000558 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	495f      	ldr	r1, [pc, #380]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001892:	4860      	ldr	r0, [pc, #384]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001894:	f004 fd10 	bl	80062b8 <siprintf>
		HAL_UART_Transmit(&huart2, text1, strlen(text1), 1000);
 8001898:	485e      	ldr	r0, [pc, #376]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800189a:	f7fe fca1 	bl	80001e0 <strlen>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	495b      	ldr	r1, [pc, #364]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018a8:	485b      	ldr	r0, [pc, #364]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80018aa:	f003 fade 	bl	8004e6a <HAL_UART_Transmit>
		if(position < -50) position = -50;
 80018ae:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001a04 <HAL_TIM_PeriodElapsedCallback+0x374>
 80018b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	d502      	bpl.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x238>
 80018c2:	4b52      	ldr	r3, [pc, #328]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018c4:	4a55      	ldr	r2, [pc, #340]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80018c6:	601a      	str	r2, [r3, #0]
		if(position > 50) position = 50;
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001a08 <HAL_TIM_PeriodElapsedCallback+0x378>
 80018d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	dd02      	ble.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x252>
 80018dc:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018de:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80018e0:	601a      	str	r2, [r3, #0]

	error = position - setpoint;
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	4b4e      	ldr	r3, [pc, #312]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	4b4d      	ldr	r3, [pc, #308]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80018f4:	edc3 7a00 	vstr	s15, [r3]
	error_integral += error*dt;
 80018f8:	4b4b      	ldr	r3, [pc, #300]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80018fa:	ed93 7a00 	vldr	s14, [r3]
 80018fe:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001908:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001914:	edc3 7a00 	vstr	s15, [r3]
	error_derivative = (error - error_previous)/dt;
 8001918:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800191a:	ed93 7a00 	vldr	s14, [r3]
 800191e:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001928:	4b40      	ldr	r3, [pc, #256]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001934:	edc3 7a00 	vstr	s15, [r3]
	error_previous = error ;
 8001938:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a3d      	ldr	r2, [pc, #244]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800193e:	6013      	str	r3, [r2, #0]
	pidCalculate = kp*error + ki*error_integral + kd*error_derivative;
 8001940:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001952:	edd3 6a00 	vldr	s13, [r3]
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001966:	edd3 6a00 	vldr	s13, [r3]
 800196a:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800197a:	edc3 7a00 	vstr	s15, [r3]
	rightMotor = linear_v + pidCalculate;
 800197e:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001980:	ed93 7a00 	vldr	s14, [r3]
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198e:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001990:	edc3 7a00 	vstr	s15, [r3]
	leftMotor = linear_v - pidCalculate;
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001996:	ed93 7a00 	vldr	s14, [r3]
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	if(rightMotor>100) rightMotor = 100;
 80019aa:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0x3c8>
 80019b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	e04e      	b.n	8001a5c <HAL_TIM_PeriodElapsedCallback+0x3cc>
 80019be:	bf00      	nop
 80019c0:	f5c28f5c 	.word	0xf5c28f5c
 80019c4:	c041dc28 	.word	0xc041dc28
 80019c8:	d70a3d71 	.word	0xd70a3d71
 80019cc:	c03570a3 	.word	0xc03570a3
 80019d0:	0a3d70a4 	.word	0x0a3d70a4
 80019d4:	c01ca3d7 	.word	0xc01ca3d7
 80019d8:	0a3d70a4 	.word	0x0a3d70a4
 80019dc:	401ca3d7 	.word	0x401ca3d7
 80019e0:	d70a3d71 	.word	0xd70a3d71
 80019e4:	403570a3 	.word	0x403570a3
 80019e8:	f5c28f5c 	.word	0xf5c28f5c
 80019ec:	4041dc28 	.word	0x4041dc28
 80019f0:	20000388 	.word	0x20000388
 80019f4:	200003c8 	.word	0x200003c8
 80019f8:	200003a8 	.word	0x200003a8
 80019fc:	20000400 	.word	0x20000400
 8001a00:	200004e8 	.word	0x200004e8
 8001a04:	c2480000 	.word	0xc2480000
 8001a08:	42480000 	.word	0x42480000
 8001a0c:	200004ec 	.word	0x200004ec
 8001a10:	08009eb0 	.word	0x08009eb0
 8001a14:	20000420 	.word	0x20000420
 8001a18:	20000344 	.word	0x20000344
 8001a1c:	c2480000 	.word	0xc2480000
 8001a20:	42480000 	.word	0x42480000
 8001a24:	20000500 	.word	0x20000500
 8001a28:	200004f0 	.word	0x200004f0
 8001a2c:	2000000c 	.word	0x2000000c
 8001a30:	200004f8 	.word	0x200004f8
 8001a34:	200004f4 	.word	0x200004f4
 8001a38:	200004fc 	.word	0x200004fc
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	2000050c 	.word	0x2000050c
 8001a44:	20000004 	.word	0x20000004
 8001a48:	20000510 	.word	0x20000510
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000504 	.word	0x20000504
 8001a54:	20000508 	.word	0x20000508
 8001a58:	42c80000 	.word	0x42c80000
 8001a5c:	dd02      	ble.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8001a5e:	4ba8      	ldr	r3, [pc, #672]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001a60:	4aa8      	ldr	r2, [pc, #672]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8001a62:	601a      	str	r2, [r3, #0]
	if(rightMotor<0) rightMotor = 0;
 8001a64:	4ba6      	ldr	r3, [pc, #664]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	d503      	bpl.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x3ec>
 8001a74:	4ba2      	ldr	r3, [pc, #648]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
	if(leftMotor>100) leftMotor = 100;
 8001a7c:	4ba2      	ldr	r3, [pc, #648]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001d0c <HAL_TIM_PeriodElapsedCallback+0x67c>
 8001a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	dd02      	ble.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0x406>
 8001a90:	4b9d      	ldr	r3, [pc, #628]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001a92:	4a9c      	ldr	r2, [pc, #624]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8001a94:	601a      	str	r2, [r3, #0]
	if(leftMotor<0) leftMotor = 0;
 8001a96:	4b9c      	ldr	r3, [pc, #624]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	d503      	bpl.n	8001aae <HAL_TIM_PeriodElapsedCallback+0x41e>
 8001aa6:	4b98      	ldr	r3, [pc, #608]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
	sprintf(&text2, "leftMotor=%.2f rightMotor=%.2f Position=%.2f Error = %.2f pidCalculate = %.2f \r\n",leftMotor, rightMotor, position, error, pidCalculate);
 8001aae:	4b96      	ldr	r3, [pc, #600]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd50 	bl	8000558 <__aeabi_f2d>
 8001ab8:	e9c7 0100 	strd	r0, r1, [r7]
 8001abc:	4b90      	ldr	r3, [pc, #576]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd49 	bl	8000558 <__aeabi_f2d>
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	460d      	mov	r5, r1
 8001aca:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_f2d>
 8001ad4:	4680      	mov	r8, r0
 8001ad6:	4689      	mov	r9, r1
 8001ad8:	4b8e      	ldr	r3, [pc, #568]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd3b 	bl	8000558 <__aeabi_f2d>
 8001ae2:	4682      	mov	sl, r0
 8001ae4:	468b      	mov	fp, r1
 8001ae6:	4b8c      	ldr	r3, [pc, #560]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd34 	bl	8000558 <__aeabi_f2d>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001af8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001afc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b00:	e9cd 4500 	strd	r4, r5, [sp]
 8001b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b08:	4984      	ldr	r1, [pc, #528]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8001b0a:	4885      	ldr	r0, [pc, #532]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8001b0c:	f004 fbd4 	bl	80062b8 <siprintf>
//	HAL_UART_Transmit(&huart2, text2, strlen(text2), 1000);
//
	if(norm_ss[1] >0.4 || norm_ss[2] > 0.4 || norm_ss[3] >0.4 || norm_ss[4] > 0.4 || norm_ss[5] >0.4 || norm_ss [7] >0.4)
 8001b10:	4b84      	ldr	r3, [pc, #528]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fd1f 	bl	8000558 <__aeabi_f2d>
 8001b1a:	a377      	add	r3, pc, #476	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7ff f802 	bl	8000b28 <__aeabi_dcmpgt>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d140      	bne.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x51c>
 8001b2a:	4b7e      	ldr	r3, [pc, #504]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd12 	bl	8000558 <__aeabi_f2d>
 8001b34:	a370      	add	r3, pc, #448	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f7fe fff5 	bl	8000b28 <__aeabi_dcmpgt>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d133      	bne.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x51c>
 8001b44:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd05 	bl	8000558 <__aeabi_f2d>
 8001b4e:	a36a      	add	r3, pc, #424	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe ffe8 	bl	8000b28 <__aeabi_dcmpgt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d126      	bne.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x51c>
 8001b5e:	4b71      	ldr	r3, [pc, #452]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fcf8 	bl	8000558 <__aeabi_f2d>
 8001b68:	a363      	add	r3, pc, #396	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	f7fe ffdb 	bl	8000b28 <__aeabi_dcmpgt>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d119      	bne.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x51c>
 8001b78:	4b6a      	ldr	r3, [pc, #424]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fceb 	bl	8000558 <__aeabi_f2d>
 8001b82:	a35d      	add	r3, pc, #372	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe ffce 	bl	8000b28 <__aeabi_dcmpgt>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x51c>
 8001b92:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fcde 	bl	8000558 <__aeabi_f2d>
 8001b9c:	a356      	add	r3, pc, #344	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe ffc1 	bl	8000b28 <__aeabi_dcmpgt>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_TIM_PeriodElapsedCallback+0x55e>
	{
		//forward
		TIM3->CCR1 = leftMotor-30; //100*leftMotor/100;
 8001bac:	4b56      	ldr	r3, [pc, #344]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001bb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bba:	4b5b      	ldr	r3, [pc, #364]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc0:	ee17 2a90 	vmov	r2, s15
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = rightMotor-30; //100*rightMotor/100;
 8001bcc:	4b4c      	ldr	r3, [pc, #304]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001bd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bda:	4b53      	ldr	r3, [pc, #332]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be0:	ee17 2a90 	vmov	r2, s15
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 8001be6:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
 8001bec:	e065      	b.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x62a>

	}else{
		 if(previousLvalue1 >0.4 || previousLvalue2 >0.4 || previousLvalue3 >0.4){
 8001bee:	4b4f      	ldr	r3, [pc, #316]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fcb0 	bl	8000558 <__aeabi_f2d>
 8001bf8:	a33f      	add	r3, pc, #252	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe ff93 	bl	8000b28 <__aeabi_dcmpgt>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d119      	bne.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ac>
 8001c08:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fca3 	bl	8000558 <__aeabi_f2d>
 8001c12:	a339      	add	r3, pc, #228	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe ff86 	bl	8000b28 <__aeabi_dcmpgt>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ac>
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc96 	bl	8000558 <__aeabi_f2d>
 8001c2c:	a332      	add	r3, pc, #200	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe ff79 	bl	8000b28 <__aeabi_dcmpgt>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00b      	beq.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x5c4>
			 // Reverse left Motor
			 			TIM3->CCR1 = 90; //100*leftMotor/100;
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001c3e:	225a      	movs	r2, #90	; 0x5a
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
			 			TIM3->CCR2 = 0;
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
			 		    TIM3->CCR3 = 0; //100*rightMotor/100;
 8001c48:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	63da      	str	r2, [r3, #60]	; 0x3c
			 			TIM3->CCR4 = 90;
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001c50:	225a      	movs	r2, #90	; 0x5a
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40

		 }
		 if(previousRvalue1 > 0.4 || previousRvalue2 > 0.4 || previousRvalue3 > 0.4){
 8001c54:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc7d 	bl	8000558 <__aeabi_f2d>
 8001c5e:	a326      	add	r3, pc, #152	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	f7fe ff60 	bl	8000b28 <__aeabi_dcmpgt>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d119      	bne.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x612>
 8001c6e:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc70 	bl	8000558 <__aeabi_f2d>
 8001c78:	a31f      	add	r3, pc, #124	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f7fe ff53 	bl	8000b28 <__aeabi_dcmpgt>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10c      	bne.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x612>
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc63 	bl	8000558 <__aeabi_f2d>
 8001c92:	a319      	add	r3, pc, #100	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe ff46 	bl	8000b28 <__aeabi_dcmpgt>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x62a>

			 // Reverse right motor
			 TIM3->CCR1 = 0; //100*leftMotor/100;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
			 TIM3->CCR2 = 90;
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001caa:	225a      	movs	r2, #90	; 0x5a
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38
			 TIM3->CCR3 = 90; //100*rig htMotor/100;
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001cb0:	225a      	movs	r2, #90	; 0x5a
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c
			 TIM3->CCR4 = 0;
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40

		 }
	}


	previousLvalue1 = norm_ss[0];
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001cc0:	6013      	str	r3, [r2, #0]
	previousLvalue2 = norm_ss[1];
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001cc8:	6013      	str	r3, [r2, #0]
	previousLvalue3 = norm_ss[2];
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001cd0:	6013      	str	r3, [r2, #0]
	previousRvalue1 = norm_ss[3];
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001cd8:	6013      	str	r3, [r2, #0]
	previousRvalue2 = norm_ss[4];
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001ce0:	6013      	str	r3, [r2, #0]
	previousRvalue3 = norm_ss[6];
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001ce8:	6013      	str	r3, [r2, #0]
//	TIM3->CCR1 = leftMotor-10; //100*leftMotor/100;
//	TIM3->CCR3 = rightMotor-10; //100*rightMotor/100;
//	TIM3->CCR4 = 0;
//	TIM3->CCR2 = 0;
	}
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	9999999a 	.word	0x9999999a
 8001cfc:	3fd99999 	.word	0x3fd99999
 8001d00:	20000504 	.word	0x20000504
 8001d04:	42c80000 	.word	0x42c80000
 8001d08:	20000508 	.word	0x20000508
 8001d0c:	42c80000 	.word	0x42c80000
 8001d10:	200004ec 	.word	0x200004ec
 8001d14:	200004f0 	.word	0x200004f0
 8001d18:	20000510 	.word	0x20000510
 8001d1c:	08009eb8 	.word	0x08009eb8
 8001d20:	20000484 	.word	0x20000484
 8001d24:	20000400 	.word	0x20000400
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	200003e8 	.word	0x200003e8
 8001d30:	200003ec 	.word	0x200003ec
 8001d34:	200003f0 	.word	0x200003f0
 8001d38:	200003f4 	.word	0x200003f4
 8001d3c:	200003f8 	.word	0x200003f8
 8001d40:	200003fc 	.word	0x200003fc

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <Error_Handler+0x8>
	...

08001d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a49      	ldr	r2, [pc, #292]	; (8001ee4 <HAL_ADC_MspInit+0x144>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	f040 808c 	bne.w	8001edc <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	4a46      	ldr	r2, [pc, #280]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	4a3f      	ldr	r2, [pc, #252]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	6313      	str	r3, [r2, #48]	; 0x30
 8001df0:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	4a38      	ldr	r2, [pc, #224]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a31      	ldr	r2, [pc, #196]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <HAL_ADC_MspInit+0x148>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e34:	2307      	movs	r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4829      	ldr	r0, [pc, #164]	; (8001eec <HAL_ADC_MspInit+0x14c>)
 8001e48:	f001 fb5c 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8001e4c:	23d3      	movs	r3, #211	; 0xd3
 8001e4e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e50:	2303      	movs	r3, #3
 8001e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4824      	ldr	r0, [pc, #144]	; (8001ef0 <HAL_ADC_MspInit+0x150>)
 8001e60:	f001 fb50 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e64:	2303      	movs	r3, #3
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	4619      	mov	r1, r3
 8001e76:	481f      	ldr	r0, [pc, #124]	; (8001ef4 <HAL_ADC_MspInit+0x154>)
 8001e78:	f001 fb44 	bl	8003504 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <HAL_ADC_MspInit+0x15c>)
 8001e80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001e9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001ea6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eaa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ec0:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001ec2:	f000 ffaf 	bl	8002e24 <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001ecc:	f7ff ff3a 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_ADC_MspInit+0x158>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001edc:	bf00      	nop
 8001ede:	3730      	adds	r7, #48	; 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40012000 	.word	0x40012000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	20000254 	.word	0x20000254
 8001efc:	40026410 	.word	0x40026410

08001f00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10d      	bne.n	8001f2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_TIM_PWM_MspInit+0x40>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_TIM_PWM_MspInit+0x40>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <HAL_TIM_PWM_MspInit+0x40>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_TIM_Base_MspInit+0x48>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d115      	bne.n	8001f82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_TIM_Base_MspInit+0x4c>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_TIM_Base_MspInit+0x4c>)
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_TIM_Base_MspInit+0x4c>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	2019      	movs	r0, #25
 8001f78:	f000 ff1d 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f7c:	2019      	movs	r0, #25
 8001f7e:	f000 ff36 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40014400 	.word	0x40014400
 8001f90:	40023800 	.word	0x40023800

08001f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_TIM_MspPostInit+0x68>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d11e      	bne.n	8001ff4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_TIM_MspPostInit+0x6c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_TIM_MspPostInit+0x6c>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_TIM_MspPostInit+0x6c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH1_L_Pin|L_TIM3_CH2_Pin|TIM3_CH3_R_Pin|R_TIM3_CH4_Pin;
 8001fd2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001fd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	4619      	mov	r1, r3
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <HAL_TIM_MspPostInit+0x70>)
 8001ff0:	f001 fa88 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40023800 	.word	0x40023800
 8002004:	40020800 	.word	0x40020800

08002008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_UART_MspInit+0x84>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d12b      	bne.n	8002082 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_UART_MspInit+0x88>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_UART_MspInit+0x88>)
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_UART_MspInit+0x88>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_UART_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_UART_MspInit+0x88>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_UART_MspInit+0x88>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002062:	230c      	movs	r3, #12
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002072:	2307      	movs	r3, #7
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_UART_MspInit+0x8c>)
 800207e:	f001 fa41 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3728      	adds	r7, #40	; 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40004400 	.word	0x40004400
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800209c:	e7fe      	b.n	800209c <NMI_Handler+0x4>

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f000 f96a 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020f2:	f002 f9c7 	bl	8004484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200002fc 	.word	0x200002fc

08002100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <DMA2_Stream0_IRQHandler+0x10>)
 8002106:	f000 ff93 	bl	8003030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000254 	.word	0x20000254

08002114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return 1;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_kill>:

int _kill(int pid, int sig)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800212e:	f003 fa11 	bl	8005554 <__errno>
 8002132:	4603      	mov	r3, r0
 8002134:	2216      	movs	r2, #22
 8002136:	601a      	str	r2, [r3, #0]
  return -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_exit>:

void _exit (int status)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ffe7 	bl	8002124 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002156:	e7fe      	b.n	8002156 <_exit+0x12>

08002158 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e00a      	b.n	8002180 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800216a:	f3af 8000 	nop.w
 800216e:	4601      	mov	r1, r0
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	60ba      	str	r2, [r7, #8]
 8002176:	b2ca      	uxtb	r2, r1
 8002178:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	dbf0      	blt.n	800216a <_read+0x12>
  }

  return len;
 8002188:	687b      	ldr	r3, [r7, #4]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e009      	b.n	80021b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	60ba      	str	r2, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3301      	adds	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dbf1      	blt.n	80021a4 <_write+0x12>
  }
  return len;
 80021c0:	687b      	ldr	r3, [r7, #4]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_close>:

int _close(int file)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f2:	605a      	str	r2, [r3, #4]
  return 0;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_isatty>:

int _isatty(int file)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <_sbrk+0x5c>)
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <_sbrk+0x60>)
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <_sbrk+0x64>)
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <_sbrk+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002264:	f003 f976 	bl	8005554 <__errno>
 8002268:	4603      	mov	r3, r0
 800226a:	220c      	movs	r2, #12
 800226c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e009      	b.n	8002288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <_sbrk+0x64>)
 8002284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20020000 	.word	0x20020000
 8002294:	00000400 	.word	0x00000400
 8002298:	20000514 	.word	0x20000514
 800229c:	20000530 	.word	0x20000530

080022a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <SystemInit+0x20>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <SystemInit+0x20>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022c8:	480d      	ldr	r0, [pc, #52]	; (8002300 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ca:	490e      	ldr	r1, [pc, #56]	; (8002304 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d0:	e002      	b.n	80022d8 <LoopCopyDataInit>

080022d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d6:	3304      	adds	r3, #4

080022d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022dc:	d3f9      	bcc.n	80022d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022e0:	4c0b      	ldr	r4, [pc, #44]	; (8002310 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e4:	e001      	b.n	80022ea <LoopFillZerobss>

080022e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e8:	3204      	adds	r2, #4

080022ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ec:	d3fb      	bcc.n	80022e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ee:	f7ff ffd7 	bl	80022a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f2:	f003 f935 	bl	8005560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022f6:	f7fe fe87 	bl	8001008 <main>
  bx  lr    
 80022fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002304:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002308:	0800a3e4 	.word	0x0800a3e4
  ldr r2, =_sbss
 800230c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002310:	2000052c 	.word	0x2000052c

08002314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC_IRQHandler>
	...

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <HAL_Init+0x40>)
 8002322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <HAL_Init+0x40>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_Init+0x40>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 fd2d 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002346:	200f      	movs	r0, #15
 8002348:	f000 f808 	bl	800235c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800234c:	f7ff fd00 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023c00 	.word	0x40023c00

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_InitTick+0x54>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_InitTick+0x58>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002372:	fbb3 f3f1 	udiv	r3, r3, r1
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fd45 	bl	8002e0a <HAL_SYSTICK_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00e      	b.n	80023a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d80a      	bhi.n	80023a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f000 fd0d 	bl	8002db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800239c:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <HAL_InitTick+0x5c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000010 	.word	0x20000010
 80023b4:	20000018 	.word	0x20000018
 80023b8:	20000014 	.word	0x20000014

080023bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_IncTick+0x20>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_IncTick+0x24>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_IncTick+0x24>)
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000018 	.word	0x20000018
 80023e0:	20000518 	.word	0x20000518

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_GetTick+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000518 	.word	0x20000518

080023fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e033      	b.n	800247a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff fcc0 	bl	8001da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002442:	f023 0302 	bic.w	r3, r3, #2
 8002446:	f043 0202 	orr.w	r2, r3, #2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa58 	bl	8002904 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f023 0303 	bic.w	r3, r3, #3
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
 800246a:	e001      	b.n	8002470 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_Start_DMA+0x1e>
 800249e:	2302      	movs	r3, #2
 80024a0:	e0ce      	b.n	8002640 <HAL_ADC_Start_DMA+0x1bc>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d018      	beq.n	80024ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024c8:	4b5f      	ldr	r3, [pc, #380]	; (8002648 <HAL_ADC_Start_DMA+0x1c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a5f      	ldr	r2, [pc, #380]	; (800264c <HAL_ADC_Start_DMA+0x1c8>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	0c9a      	lsrs	r2, r3, #18
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024dc:	e002      	b.n	80024e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f9      	bne.n	80024de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f8:	d107      	bne.n	800250a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002508:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	f040 8086 	bne.w	8002626 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002544:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002558:	d106      	bne.n	8002568 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f023 0206 	bic.w	r2, r3, #6
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
 8002566:	e002      	b.n	800256e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002576:	4b36      	ldr	r3, [pc, #216]	; (8002650 <HAL_ADC_Start_DMA+0x1cc>)
 8002578:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	4a35      	ldr	r2, [pc, #212]	; (8002654 <HAL_ADC_Start_DMA+0x1d0>)
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	4a34      	ldr	r2, [pc, #208]	; (8002658 <HAL_ADC_Start_DMA+0x1d4>)
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	4a33      	ldr	r2, [pc, #204]	; (800265c <HAL_ADC_Start_DMA+0x1d8>)
 8002590:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800259a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	334c      	adds	r3, #76	; 0x4c
 80025c6:	4619      	mov	r1, r3
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f000 fcd8 	bl	8002f80 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10f      	bne.n	80025fc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d129      	bne.n	800263e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	e020      	b.n	800263e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a17      	ldr	r2, [pc, #92]	; (8002660 <HAL_ADC_Start_DMA+0x1dc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d11b      	bne.n	800263e <HAL_ADC_Start_DMA+0x1ba>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d114      	bne.n	800263e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	e00b      	b.n	800263e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0210 	orr.w	r2, r3, #16
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000010 	.word	0x20000010
 800264c:	431bde83 	.word	0x431bde83
 8002650:	40012300 	.word	0x40012300
 8002654:	08002afd 	.word	0x08002afd
 8002658:	08002bb7 	.word	0x08002bb7
 800265c:	08002bd3 	.word	0x08002bd3
 8002660:	40012000 	.word	0x40012000

08002664 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x1c>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e113      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x244>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b09      	cmp	r3, #9
 80026ca:	d925      	bls.n	8002718 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68d9      	ldr	r1, [r3, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	3b1e      	subs	r3, #30
 80026e2:	2207      	movs	r2, #7
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43da      	mvns	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	400a      	ands	r2, r1
 80026f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68d9      	ldr	r1, [r3, #12]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4618      	mov	r0, r3
 8002704:	4603      	mov	r3, r0
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4403      	add	r3, r0
 800270a:	3b1e      	subs	r3, #30
 800270c:	409a      	lsls	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	e022      	b.n	800275e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	2207      	movs	r2, #7
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	400a      	ands	r2, r1
 800273a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	4603      	mov	r3, r0
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4403      	add	r3, r0
 8002754:	409a      	lsls	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b06      	cmp	r3, #6
 8002764:	d824      	bhi.n	80027b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b05      	subs	r3, #5
 8002778:	221f      	movs	r2, #31
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	400a      	ands	r2, r1
 8002786:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	3b05      	subs	r3, #5
 80027a2:	fa00 f203 	lsl.w	r2, r0, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	635a      	str	r2, [r3, #52]	; 0x34
 80027ae:	e04c      	b.n	800284a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d824      	bhi.n	8002802 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	3b23      	subs	r3, #35	; 0x23
 80027ca:	221f      	movs	r2, #31
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43da      	mvns	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	400a      	ands	r2, r1
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	3b23      	subs	r3, #35	; 0x23
 80027f4:	fa00 f203 	lsl.w	r2, r0, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002800:	e023      	b.n	800284a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	3b41      	subs	r3, #65	; 0x41
 8002814:	221f      	movs	r2, #31
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	400a      	ands	r2, r1
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b41      	subs	r3, #65	; 0x41
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800284a:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <HAL_ADC_ConfigChannel+0x250>)
 800284c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a28      	ldr	r2, [pc, #160]	; (80028f4 <HAL_ADC_ConfigChannel+0x254>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d10f      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1d8>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b12      	cmp	r3, #18
 800285e:	d10b      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <HAL_ADC_ConfigChannel+0x254>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d12b      	bne.n	80028da <HAL_ADC_ConfigChannel+0x23a>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <HAL_ADC_ConfigChannel+0x258>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <HAL_ADC_ConfigChannel+0x1f4>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b11      	cmp	r3, #17
 8002892:	d122      	bne.n	80028da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <HAL_ADC_ConfigChannel+0x258>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d111      	bne.n	80028da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_ADC_ConfigChannel+0x25c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a11      	ldr	r2, [pc, #68]	; (8002900 <HAL_ADC_ConfigChannel+0x260>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	0c9a      	lsrs	r2, r3, #18
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028cc:	e002      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f9      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40012300 	.word	0x40012300
 80028f4:	40012000 	.word	0x40012000
 80028f8:	10000012 	.word	0x10000012
 80028fc:	20000010 	.word	0x20000010
 8002900:	431bde83 	.word	0x431bde83

08002904 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800290c:	4b79      	ldr	r3, [pc, #484]	; (8002af4 <ADC_Init+0x1f0>)
 800290e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800295c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <ADC_Init+0x1f4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	e00f      	b.n	8002a02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0202 	bic.w	r2, r2, #2
 8002a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7e1b      	ldrb	r3, [r3, #24]
 8002a1c:	005a      	lsls	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	035a      	lsls	r2, r3, #13
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	e007      	b.n	8002a78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	051a      	lsls	r2, r3, #20
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aba:	025a      	lsls	r2, r3, #9
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	029a      	lsls	r2, r3, #10
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40012300 	.word	0x40012300
 8002af8:	0f000001 	.word	0x0f000001

08002afc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d13c      	bne.n	8002b90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d12b      	bne.n	8002b88 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d127      	bne.n	8002b88 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d119      	bne.n	8002b88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0220 	bic.w	r2, r2, #32
 8002b62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff fd6b 	bl	8002664 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b8e:	e00e      	b.n	8002bae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7ff fd75 	bl	800268c <HAL_ADC_ErrorCallback>
}
 8002ba2:	e004      	b.n	8002bae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff fd57 	bl	8002678 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2240      	movs	r2, #64	; 0x40
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f043 0204 	orr.w	r2, r3, #4
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff fd4a 	bl	800268c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <__NVIC_GetPriorityGrouping+0x18>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 0307 	and.w	r3, r3, #7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	db0b      	blt.n	8002c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4907      	ldr	r1, [pc, #28]	; (8002c9c <__NVIC_EnableIRQ+0x38>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2001      	movs	r0, #1
 8002c86:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	; (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f7ff ff8e 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff29 	bl	8002c00 <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc8:	f7ff ff3e 	bl	8002c48 <__NVIC_GetPriorityGrouping>
 8002dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	6978      	ldr	r0, [r7, #20]
 8002dd4:	f7ff ff8e 	bl	8002cf4 <NVIC_EncodePriority>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5d 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff31 	bl	8002c64 <__NVIC_EnableIRQ>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ffa2 	bl	8002d5c <SysTick_Config>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff fad8 	bl	80023e4 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e099      	b.n	8002f74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e60:	e00f      	b.n	8002e82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e62:	f7ff fabf 	bl	80023e4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d908      	bls.n	8002e82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e078      	b.n	8002f74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e8      	bne.n	8002e62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_DMA_Init+0x158>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d107      	bne.n	8002eec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f023 0307 	bic.w	r3, r3, #7
 8002f02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d117      	bne.n	8002f46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fa6f 	bl	800340c <DMA_CheckFifoParam>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f42:	2301      	movs	r3, #1
 8002f44:	e016      	b.n	8002f74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa26 	bl	80033a0 <DMA_CalcBaseAndBitshift>
 8002f54:	4603      	mov	r3, r0
 8002f56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	223f      	movs	r2, #63	; 0x3f
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	f010803f 	.word	0xf010803f

08002f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DMA_Start_IT+0x26>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e040      	b.n	8003028 <HAL_DMA_Start_IT+0xa8>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d12f      	bne.n	800301a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f9b8 	bl	8003344 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	223f      	movs	r2, #63	; 0x3f
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0216 	orr.w	r2, r2, #22
 8002fee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0208 	orr.w	r2, r2, #8
 8003006:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e005      	b.n	8003026 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003022:	2302      	movs	r3, #2
 8003024:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800303c:	4b8e      	ldr	r3, [pc, #568]	; (8003278 <HAL_DMA_IRQHandler+0x248>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a8e      	ldr	r2, [pc, #568]	; (800327c <HAL_DMA_IRQHandler+0x24c>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	2208      	movs	r2, #8
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01a      	beq.n	800309c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	2208      	movs	r2, #8
 800308a:	409a      	lsls	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	2201      	movs	r2, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	2201      	movs	r2, #1
 80030c0:	409a      	lsls	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	2204      	movs	r2, #4
 80030d8:	409a      	lsls	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	2204      	movs	r2, #4
 80030f6:	409a      	lsls	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	2210      	movs	r2, #16
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d043      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d03c      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	2210      	movs	r2, #16
 800312c:	409a      	lsls	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d018      	beq.n	8003172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d024      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
 800315e:	e01f      	b.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01b      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
 8003170:	e016      	b.n	80031a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0208 	bic.w	r2, r2, #8
 800318e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	2220      	movs	r2, #32
 80031a6:	409a      	lsls	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 808f 	beq.w	80032d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8087 	beq.w	80032d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	2220      	movs	r2, #32
 80031c8:	409a      	lsls	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d136      	bne.n	8003248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0216 	bic.w	r2, r2, #22
 80031e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_DMA_IRQHandler+0x1da>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0208 	bic.w	r2, r2, #8
 8003218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	223f      	movs	r2, #63	; 0x3f
 8003220:	409a      	lsls	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d07e      	beq.n	800333c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
        }
        return;
 8003246:	e079      	b.n	800333c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	2b00      	cmp	r3, #0
 800326a:	d031      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e02c      	b.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
 8003276:	bf00      	nop
 8003278:	20000010 	.word	0x20000010
 800327c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d023      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
 8003290:	e01e      	b.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10f      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0210 	bic.w	r2, r2, #16
 80032ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d032      	beq.n	800333e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d022      	beq.n	800332a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2205      	movs	r2, #5
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	3301      	adds	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	429a      	cmp	r2, r3
 8003306:	d307      	bcc.n	8003318 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f2      	bne.n	80032fc <HAL_DMA_IRQHandler+0x2cc>
 8003316:	e000      	b.n	800331a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003318:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e000      	b.n	800333e <HAL_DMA_IRQHandler+0x30e>
        return;
 800333c:	bf00      	nop
    }
  }
}
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003360:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d108      	bne.n	8003384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003382:	e007      	b.n	8003394 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	3b10      	subs	r3, #16
 80033b0:	4a14      	ldr	r2, [pc, #80]	; (8003404 <DMA_CalcBaseAndBitshift+0x64>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <DMA_CalcBaseAndBitshift+0x68>)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d909      	bls.n	80033e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	1d1a      	adds	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	659a      	str	r2, [r3, #88]	; 0x58
 80033e0:	e007      	b.n	80033f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	aaaaaaab 	.word	0xaaaaaaab
 8003408:	08009f24 	.word	0x08009f24

0800340c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11f      	bne.n	8003466 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d856      	bhi.n	80034da <DMA_CheckFifoParam+0xce>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <DMA_CheckFifoParam+0x28>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003445 	.word	0x08003445
 8003438:	08003457 	.word	0x08003457
 800343c:	08003445 	.word	0x08003445
 8003440:	080034db 	.word	0x080034db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d046      	beq.n	80034de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003454:	e043      	b.n	80034de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800345e:	d140      	bne.n	80034e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003464:	e03d      	b.n	80034e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346e:	d121      	bne.n	80034b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d837      	bhi.n	80034e6 <DMA_CheckFifoParam+0xda>
 8003476:	a201      	add	r2, pc, #4	; (adr r2, 800347c <DMA_CheckFifoParam+0x70>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	0800348d 	.word	0x0800348d
 8003480:	08003493 	.word	0x08003493
 8003484:	0800348d 	.word	0x0800348d
 8003488:	080034a5 	.word	0x080034a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e030      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d025      	beq.n	80034ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a2:	e022      	b.n	80034ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ac:	d11f      	bne.n	80034ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034b2:	e01c      	b.n	80034ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d903      	bls.n	80034c2 <DMA_CheckFifoParam+0xb6>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d003      	beq.n	80034c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034c0:	e018      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      break;
 80034c6:	e015      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00e      	beq.n	80034f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      break;
 80034d8:	e00b      	b.n	80034f2 <DMA_CheckFifoParam+0xe6>
      break;
 80034da:	bf00      	nop
 80034dc:	e00a      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034de:	bf00      	nop
 80034e0:	e008      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034e2:	bf00      	nop
 80034e4:	e006      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
    }
  } 
  
  return status; 
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop

08003504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	e159      	b.n	80037d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003520:	2201      	movs	r2, #1
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	f040 8148 	bne.w	80037ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b01      	cmp	r3, #1
 8003548:	d005      	beq.n	8003556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003552:	2b02      	cmp	r3, #2
 8003554:	d130      	bne.n	80035b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	2203      	movs	r2, #3
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800358c:	2201      	movs	r2, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 0201 	and.w	r2, r3, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d017      	beq.n	80035f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d123      	bne.n	8003648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	220f      	movs	r2, #15
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	08da      	lsrs	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3208      	adds	r2, #8
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0203 	and.w	r2, r3, #3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80a2 	beq.w	80037ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	4b57      	ldr	r3, [pc, #348]	; (80037ec <HAL_GPIO_Init+0x2e8>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	4a56      	ldr	r2, [pc, #344]	; (80037ec <HAL_GPIO_Init+0x2e8>)
 8003694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003698:	6453      	str	r3, [r2, #68]	; 0x44
 800369a:	4b54      	ldr	r3, [pc, #336]	; (80037ec <HAL_GPIO_Init+0x2e8>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036a6:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_GPIO_Init+0x2ec>)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a49      	ldr	r2, [pc, #292]	; (80037f4 <HAL_GPIO_Init+0x2f0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d019      	beq.n	8003706 <HAL_GPIO_Init+0x202>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a48      	ldr	r2, [pc, #288]	; (80037f8 <HAL_GPIO_Init+0x2f4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <HAL_GPIO_Init+0x1fe>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a47      	ldr	r2, [pc, #284]	; (80037fc <HAL_GPIO_Init+0x2f8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00d      	beq.n	80036fe <HAL_GPIO_Init+0x1fa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a46      	ldr	r2, [pc, #280]	; (8003800 <HAL_GPIO_Init+0x2fc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <HAL_GPIO_Init+0x1f6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a45      	ldr	r2, [pc, #276]	; (8003804 <HAL_GPIO_Init+0x300>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_GPIO_Init+0x1f2>
 80036f2:	2304      	movs	r3, #4
 80036f4:	e008      	b.n	8003708 <HAL_GPIO_Init+0x204>
 80036f6:	2307      	movs	r3, #7
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x204>
 80036fa:	2303      	movs	r3, #3
 80036fc:	e004      	b.n	8003708 <HAL_GPIO_Init+0x204>
 80036fe:	2302      	movs	r3, #2
 8003700:	e002      	b.n	8003708 <HAL_GPIO_Init+0x204>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_GPIO_Init+0x204>
 8003706:	2300      	movs	r3, #0
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f002 0203 	and.w	r2, r2, #3
 800370e:	0092      	lsls	r2, r2, #2
 8003710:	4093      	lsls	r3, r2
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003718:	4935      	ldr	r1, [pc, #212]	; (80037f0 <HAL_GPIO_Init+0x2ec>)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003726:	4b38      	ldr	r3, [pc, #224]	; (8003808 <HAL_GPIO_Init+0x304>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800374a:	4a2f      	ldr	r2, [pc, #188]	; (8003808 <HAL_GPIO_Init+0x304>)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003750:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <HAL_GPIO_Init+0x304>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003774:	4a24      	ldr	r2, [pc, #144]	; (8003808 <HAL_GPIO_Init+0x304>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <HAL_GPIO_Init+0x304>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800379e:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <HAL_GPIO_Init+0x304>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a4:	4b18      	ldr	r3, [pc, #96]	; (8003808 <HAL_GPIO_Init+0x304>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c8:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <HAL_GPIO_Init+0x304>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b0f      	cmp	r3, #15
 80037d8:	f67f aea2 	bls.w	8003520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40013800 	.word	0x40013800
 80037f4:	40020000 	.word	0x40020000
 80037f8:	40020400 	.word	0x40020400
 80037fc:	40020800 	.word	0x40020800
 8003800:	40020c00 	.word	0x40020c00
 8003804:	40021000 	.word	0x40021000
 8003808:	40013c00 	.word	0x40013c00

0800380c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	887b      	ldrh	r3, [r7, #2]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	e001      	b.n	800382e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
 8003848:	4613      	mov	r3, r2
 800384a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800384c:	787b      	ldrb	r3, [r7, #1]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003852:	887a      	ldrh	r2, [r7, #2]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003858:	e003      	b.n	8003862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	041a      	lsls	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	619a      	str	r2, [r3, #24]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e267      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d075      	beq.n	800397a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800388e:	4b88      	ldr	r3, [pc, #544]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b04      	cmp	r3, #4
 8003898:	d00c      	beq.n	80038b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389a:	4b85      	ldr	r3, [pc, #532]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d112      	bne.n	80038cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038a6:	4b82      	ldr	r3, [pc, #520]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b2:	d10b      	bne.n	80038cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	4b7e      	ldr	r3, [pc, #504]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d05b      	beq.n	8003978 <HAL_RCC_OscConfig+0x108>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d157      	bne.n	8003978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e242      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_OscConfig+0x74>
 80038d6:	4b76      	ldr	r3, [pc, #472]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a75      	ldr	r2, [pc, #468]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e01d      	b.n	8003920 <HAL_RCC_OscConfig+0xb0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x98>
 80038ee:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6f      	ldr	r2, [pc, #444]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	4b6d      	ldr	r3, [pc, #436]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a6c      	ldr	r2, [pc, #432]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0xb0>
 8003908:	4b69      	ldr	r3, [pc, #420]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a68      	ldr	r2, [pc, #416]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a65      	ldr	r2, [pc, #404]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800391a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fe fd5c 	bl	80023e4 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003930:	f7fe fd58 	bl	80023e4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e207      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b5b      	ldr	r3, [pc, #364]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0xc0>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fe fd48 	bl	80023e4 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe fd44 	bl	80023e4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e1f3      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396a:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0xe8>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d063      	beq.n	8003a4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399a:	2b08      	cmp	r3, #8
 800399c:	d11c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800399e:	4b44      	ldr	r3, [pc, #272]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d116      	bne.n	80039d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_RCC_OscConfig+0x152>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d001      	beq.n	80039c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e1c7      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4937      	ldr	r1, [pc, #220]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d6:	e03a      	b.n	8003a4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e0:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <HAL_RCC_OscConfig+0x244>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fe fcfd 	bl	80023e4 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ee:	f7fe fcf9 	bl	80023e4 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e1a8      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a00:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0c:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4925      	ldr	r1, [pc, #148]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]
 8003a20:	e015      	b.n	8003a4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a22:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <HAL_RCC_OscConfig+0x244>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe fcdc 	bl	80023e4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a30:	f7fe fcd8 	bl	80023e4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e187      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d036      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d016      	beq.n	8003a90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a62:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <HAL_RCC_OscConfig+0x248>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7fe fcbc 	bl	80023e4 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a70:	f7fe fcb8 	bl	80023e4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e167      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_OscConfig+0x240>)
 8003a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x200>
 8003a8e:	e01b      	b.n	8003ac8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCC_OscConfig+0x248>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a96:	f7fe fca5 	bl	80023e4 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9c:	e00e      	b.n	8003abc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7fe fca1 	bl	80023e4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d907      	bls.n	8003abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e150      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	42470000 	.word	0x42470000
 8003ab8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abc:	4b88      	ldr	r3, [pc, #544]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ea      	bne.n	8003a9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8097 	beq.w	8003c04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ada:	4b81      	ldr	r3, [pc, #516]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10f      	bne.n	8003b06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	4b7d      	ldr	r3, [pc, #500]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	4a7c      	ldr	r2, [pc, #496]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af4:	6413      	str	r3, [r2, #64]	; 0x40
 8003af6:	4b7a      	ldr	r3, [pc, #488]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b06:	4b77      	ldr	r3, [pc, #476]	; (8003ce4 <HAL_RCC_OscConfig+0x474>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d118      	bne.n	8003b44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b12:	4b74      	ldr	r3, [pc, #464]	; (8003ce4 <HAL_RCC_OscConfig+0x474>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a73      	ldr	r2, [pc, #460]	; (8003ce4 <HAL_RCC_OscConfig+0x474>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fc61 	bl	80023e4 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b26:	f7fe fc5d 	bl	80023e4 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e10c      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCC_OscConfig+0x474>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x2ea>
 8003b4c:	4b64      	ldr	r3, [pc, #400]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a63      	ldr	r2, [pc, #396]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
 8003b58:	e01c      	b.n	8003b94 <HAL_RCC_OscConfig+0x324>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b05      	cmp	r3, #5
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x30c>
 8003b62:	4b5f      	ldr	r3, [pc, #380]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	4a5e      	ldr	r2, [pc, #376]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b68:	f043 0304 	orr.w	r3, r3, #4
 8003b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a5b      	ldr	r2, [pc, #364]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0x324>
 8003b7c:	4b58      	ldr	r3, [pc, #352]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	4a57      	ldr	r2, [pc, #348]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	6713      	str	r3, [r2, #112]	; 0x70
 8003b88:	4b55      	ldr	r3, [pc, #340]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a54      	ldr	r2, [pc, #336]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	f023 0304 	bic.w	r3, r3, #4
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fe fc22 	bl	80023e4 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fc1e 	bl	80023e4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0cb      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ee      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x334>
 8003bc6:	e014      	b.n	8003bf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc8:	f7fe fc0c 	bl	80023e4 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd0:	f7fe fc08 	bl	80023e4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0b5      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	4b3e      	ldr	r3, [pc, #248]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1ee      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf8:	4b39      	ldr	r3, [pc, #228]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	4a38      	ldr	r2, [pc, #224]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80a1 	beq.w	8003d50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c0e:	4b34      	ldr	r3, [pc, #208]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d05c      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d141      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c22:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <HAL_RCC_OscConfig+0x478>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe fbdc 	bl	80023e4 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fe fbd8 	bl	80023e4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e087      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c42:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	019b      	lsls	r3, r3, #6
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	3b01      	subs	r3, #1
 8003c68:	041b      	lsls	r3, r3, #16
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	061b      	lsls	r3, r3, #24
 8003c72:	491b      	ldr	r1, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x478>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe fbb1 	bl	80023e4 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fe fbad 	bl	80023e4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e05c      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x416>
 8003ca4:	e054      	b.n	8003d50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_RCC_OscConfig+0x478>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fb9a 	bl	80023e4 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe fb96 	bl	80023e4 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e045      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x444>
 8003cd2:	e03d      	b.n	8003d50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e038      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <HAL_RCC_OscConfig+0x4ec>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d028      	beq.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d121      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d11a      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d111      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	3b01      	subs	r3, #1
 8003d36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800

08003d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0cc      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d74:	4b68      	ldr	r3, [pc, #416]	; (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d90c      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b65      	ldr	r3, [pc, #404]	; (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0b8      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db4:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a58      	ldr	r2, [pc, #352]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dcc:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a52      	ldr	r2, [pc, #328]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	494d      	ldr	r1, [pc, #308]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d044      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d119      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e07f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1e:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2e:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e067      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e3e:	4b37      	ldr	r3, [pc, #220]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 0203 	bic.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4934      	ldr	r1, [pc, #208]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e50:	f7fe fac8 	bl	80023e4 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e58:	f7fe fac4 	bl	80023e4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e04f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 020c 	and.w	r2, r3, #12
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d1eb      	bne.n	8003e58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e80:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d20c      	bcs.n	8003ea8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b22      	ldr	r3, [pc, #136]	; (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e032      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4916      	ldr	r1, [pc, #88]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed2:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	490e      	ldr	r1, [pc, #56]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ee6:	f000 f821 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003eea:	4602      	mov	r2, r0
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	490a      	ldr	r1, [pc, #40]	; (8003f20 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	5ccb      	ldrb	r3, [r1, r3]
 8003efa:	fa22 f303 	lsr.w	r3, r2, r3
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fa28 	bl	800235c <HAL_InitTick>

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023c00 	.word	0x40023c00
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	08009f0c 	.word	0x08009f0c
 8003f24:	20000010 	.word	0x20000010
 8003f28:	20000014 	.word	0x20000014

08003f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b090      	sub	sp, #64	; 0x40
 8003f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
 8003f38:	2300      	movs	r3, #0
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f44:	4b59      	ldr	r3, [pc, #356]	; (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d00d      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x40>
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	f200 80a1 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0x34>
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f5e:	e09b      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003f64:	e09b      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f66:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f6a:	e098      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f6c:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f76:	4b4d      	ldr	r3, [pc, #308]	; (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d028      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f82:	4b4a      	ldr	r3, [pc, #296]	; (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	2200      	movs	r2, #0
 8003f8a:	623b      	str	r3, [r7, #32]
 8003f8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f94:	2100      	movs	r1, #0
 8003f96:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f98:	fb03 f201 	mul.w	r2, r3, r1
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	fb00 f303 	mul.w	r3, r0, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4a43      	ldr	r2, [pc, #268]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fa6:	fba0 1202 	umull	r1, r2, r0, r2
 8003faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fac:	460a      	mov	r2, r1
 8003fae:	62ba      	str	r2, [r7, #40]	; 0x28
 8003fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb2:	4413      	add	r3, r2
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	2200      	movs	r2, #0
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	61fa      	str	r2, [r7, #28]
 8003fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003fc6:	f7fc fe67 	bl	8000c98 <__aeabi_uldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4613      	mov	r3, r2
 8003fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fd2:	e053      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd4:	4b35      	ldr	r3, [pc, #212]	; (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	2200      	movs	r2, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	617a      	str	r2, [r7, #20]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fe6:	f04f 0b00 	mov.w	fp, #0
 8003fea:	4652      	mov	r2, sl
 8003fec:	465b      	mov	r3, fp
 8003fee:	f04f 0000 	mov.w	r0, #0
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	0159      	lsls	r1, r3, #5
 8003ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ffc:	0150      	lsls	r0, r2, #5
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	ebb2 080a 	subs.w	r8, r2, sl
 8004006:	eb63 090b 	sbc.w	r9, r3, fp
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004016:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800401a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800401e:	ebb2 0408 	subs.w	r4, r2, r8
 8004022:	eb63 0509 	sbc.w	r5, r3, r9
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	00eb      	lsls	r3, r5, #3
 8004030:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004034:	00e2      	lsls	r2, r4, #3
 8004036:	4614      	mov	r4, r2
 8004038:	461d      	mov	r5, r3
 800403a:	eb14 030a 	adds.w	r3, r4, sl
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	eb45 030b 	adc.w	r3, r5, fp
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004052:	4629      	mov	r1, r5
 8004054:	028b      	lsls	r3, r1, #10
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800405c:	4621      	mov	r1, r4
 800405e:	028a      	lsls	r2, r1, #10
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	2200      	movs	r2, #0
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	60fa      	str	r2, [r7, #12]
 800406c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004070:	f7fc fe12 	bl	8000c98 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_GetSysClockFreq+0x180>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	3301      	adds	r3, #1
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800408c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800409a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3740      	adds	r7, #64	; 0x40
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	017d7840 	.word	0x017d7840

080040b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000010 	.word	0x20000010

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a9b      	lsrs	r3, r3, #10
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08009f1c 	.word	0x08009f1c

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040fc:	f7ff ffdc 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0b5b      	lsrs	r3, r3, #13
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	08009f1c 	.word	0x08009f1c

08004120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e041      	b.n	80041b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fefc 	bl	8001f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 fb82 	bl	8004868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e044      	b.n	8004262 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <HAL_TIM_Base_Start_IT+0xb0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d018      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d013      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <HAL_TIM_Base_Start_IT+0xb4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_TIM_Base_Start_IT+0xb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_TIM_Base_Start_IT+0xbc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x6c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a16      	ldr	r2, [pc, #88]	; (8004280 <HAL_TIM_Base_Start_IT+0xc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d111      	bne.n	8004250 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b06      	cmp	r3, #6
 800423c:	d010      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	e007      	b.n	8004260 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40010000 	.word	0x40010000
 8004274:	40000400 	.word	0x40000400
 8004278:	40000800 	.word	0x40000800
 800427c:	40000c00 	.word	0x40000c00
 8004280:	40014000 	.word	0x40014000

08004284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e041      	b.n	800431a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd fe28 	bl	8001f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fad0 	bl	8004868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_TIM_PWM_Start+0x24>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b01      	cmp	r3, #1
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e022      	b.n	800438e <HAL_TIM_PWM_Start+0x6a>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d109      	bne.n	8004362 <HAL_TIM_PWM_Start+0x3e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	bf14      	ite	ne
 800435a:	2301      	movne	r3, #1
 800435c:	2300      	moveq	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	e015      	b.n	800438e <HAL_TIM_PWM_Start+0x6a>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d109      	bne.n	800437c <HAL_TIM_PWM_Start+0x58>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	bf14      	ite	ne
 8004374:	2301      	movne	r3, #1
 8004376:	2300      	moveq	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	e008      	b.n	800438e <HAL_TIM_PWM_Start+0x6a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	bf14      	ite	ne
 8004388:	2301      	movne	r3, #1
 800438a:	2300      	moveq	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e068      	b.n	8004468 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x82>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a4:	e013      	b.n	80043ce <HAL_TIM_PWM_Start+0xaa>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Start+0x92>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b4:	e00b      	b.n	80043ce <HAL_TIM_PWM_Start+0xaa>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_PWM_Start+0xa2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c4:	e003      	b.n	80043ce <HAL_TIM_PWM_Start+0xaa>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	6839      	ldr	r1, [r7, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fc52 	bl	8004c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a23      	ldr	r2, [pc, #140]	; (8004470 <HAL_TIM_PWM_Start+0x14c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d107      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <HAL_TIM_PWM_Start+0x14c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d018      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004408:	d013      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a19      	ldr	r2, [pc, #100]	; (8004474 <HAL_TIM_PWM_Start+0x150>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a17      	ldr	r2, [pc, #92]	; (8004478 <HAL_TIM_PWM_Start+0x154>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a16      	ldr	r2, [pc, #88]	; (800447c <HAL_TIM_PWM_Start+0x158>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIM_PWM_Start+0x10e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <HAL_TIM_PWM_Start+0x15c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d111      	bne.n	8004456 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b06      	cmp	r3, #6
 8004442:	d010      	beq.n	8004466 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004454:	e007      	b.n	8004466 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40010000 	.word	0x40010000
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800
 800447c:	40000c00 	.word	0x40000c00
 8004480:	40014000 	.word	0x40014000

08004484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b02      	cmp	r3, #2
 8004498:	d122      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d11b      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0202 	mvn.w	r2, #2
 80044b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f9b0 	bl	800482c <HAL_TIM_IC_CaptureCallback>
 80044cc:	e005      	b.n	80044da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f9a2 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f9b3 	bl	8004840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d122      	bne.n	8004534 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d11b      	bne.n	8004534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0204 	mvn.w	r2, #4
 8004504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f986 	bl	800482c <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f978 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f989 	bl	8004840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b08      	cmp	r3, #8
 8004540:	d122      	bne.n	8004588 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b08      	cmp	r3, #8
 800454e:	d11b      	bne.n	8004588 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0208 	mvn.w	r2, #8
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2204      	movs	r2, #4
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f95c 	bl	800482c <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f94e 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f95f 	bl	8004840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b10      	cmp	r3, #16
 8004594:	d122      	bne.n	80045dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0210 	mvn.w	r2, #16
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2208      	movs	r2, #8
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f932 	bl	800482c <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f924 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f935 	bl	8004840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0201 	mvn.w	r2, #1
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd f844 	bl	8001690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b80      	cmp	r3, #128	; 0x80
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fbc4 	bl	8004dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d10e      	bne.n	8004660 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d107      	bne.n	8004660 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8fa 	bl	8004854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b20      	cmp	r3, #32
 800466c:	d10e      	bne.n	800468c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b20      	cmp	r3, #32
 800467a:	d107      	bne.n	800468c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0220 	mvn.w	r2, #32
 8004684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fb8e 	bl	8004da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e0ae      	b.n	8004810 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	f200 809f 	bhi.w	8004800 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046fd 	.word	0x080046fd
 80046cc:	08004801 	.word	0x08004801
 80046d0:	08004801 	.word	0x08004801
 80046d4:	08004801 	.word	0x08004801
 80046d8:	0800473d 	.word	0x0800473d
 80046dc:	08004801 	.word	0x08004801
 80046e0:	08004801 	.word	0x08004801
 80046e4:	08004801 	.word	0x08004801
 80046e8:	0800477f 	.word	0x0800477f
 80046ec:	08004801 	.word	0x08004801
 80046f0:	08004801 	.word	0x08004801
 80046f4:	08004801 	.word	0x08004801
 80046f8:	080047bf 	.word	0x080047bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f930 	bl	8004968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0208 	orr.w	r2, r2, #8
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	619a      	str	r2, [r3, #24]
      break;
 800473a:	e064      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f976 	bl	8004a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6999      	ldr	r1, [r3, #24]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	619a      	str	r2, [r3, #24]
      break;
 800477c:	e043      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f9c1 	bl	8004b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0208 	orr.w	r2, r2, #8
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0204 	bic.w	r2, r2, #4
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	61da      	str	r2, [r3, #28]
      break;
 80047bc:	e023      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fa0b 	bl	8004be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69d9      	ldr	r1, [r3, #28]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	021a      	lsls	r2, r3, #8
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	61da      	str	r2, [r3, #28]
      break;
 80047fe:	e002      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
      break;
 8004804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800480e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a34      	ldr	r2, [pc, #208]	; (800494c <TIM_Base_SetConfig+0xe4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00f      	beq.n	80048a0 <TIM_Base_SetConfig+0x38>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d00b      	beq.n	80048a0 <TIM_Base_SetConfig+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a31      	ldr	r2, [pc, #196]	; (8004950 <TIM_Base_SetConfig+0xe8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <TIM_Base_SetConfig+0x38>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a30      	ldr	r2, [pc, #192]	; (8004954 <TIM_Base_SetConfig+0xec>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <TIM_Base_SetConfig+0x38>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <TIM_Base_SetConfig+0xf0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d108      	bne.n	80048b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a25      	ldr	r2, [pc, #148]	; (800494c <TIM_Base_SetConfig+0xe4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01b      	beq.n	80048f2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c0:	d017      	beq.n	80048f2 <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <TIM_Base_SetConfig+0xe8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a21      	ldr	r2, [pc, #132]	; (8004954 <TIM_Base_SetConfig+0xec>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00f      	beq.n	80048f2 <TIM_Base_SetConfig+0x8a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a20      	ldr	r2, [pc, #128]	; (8004958 <TIM_Base_SetConfig+0xf0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <TIM_Base_SetConfig+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <TIM_Base_SetConfig+0xf4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <TIM_Base_SetConfig+0xf8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <TIM_Base_SetConfig+0x8a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <TIM_Base_SetConfig+0xfc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d108      	bne.n	8004904 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a08      	ldr	r2, [pc, #32]	; (800494c <TIM_Base_SetConfig+0xe4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d103      	bne.n	8004938 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	615a      	str	r2, [r3, #20]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40014000 	.word	0x40014000
 8004960:	40014400 	.word	0x40014400
 8004964:	40014800 	.word	0x40014800

08004968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0201 	bic.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f023 0302 	bic.w	r3, r3, #2
 80049b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <TIM_OC1_SetConfig+0xc8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10c      	bne.n	80049de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0308 	bic.w	r3, r3, #8
 80049ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f023 0304 	bic.w	r3, r3, #4
 80049dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <TIM_OC1_SetConfig+0xc8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d111      	bne.n	8004a0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	621a      	str	r2, [r3, #32]
}
 8004a24:	bf00      	nop
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40010000 	.word	0x40010000

08004a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0210 	bic.w	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0320 	bic.w	r3, r3, #32
 8004a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a1e      	ldr	r2, [pc, #120]	; (8004b08 <TIM_OC2_SetConfig+0xd4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10d      	bne.n	8004ab0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <TIM_OC2_SetConfig+0xd4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d113      	bne.n	8004ae0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000

08004b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <TIM_OC3_SetConfig+0xd0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10d      	bne.n	8004b86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <TIM_OC3_SetConfig+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d113      	bne.n	8004bb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	621a      	str	r2, [r3, #32]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	40010000 	.word	0x40010000

08004be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	031b      	lsls	r3, r3, #12
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <TIM_OC4_SetConfig+0x9c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d109      	bne.n	8004c54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000

08004c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2201      	movs	r2, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1a      	ldr	r2, [r3, #32]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e050      	b.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1c      	ldr	r2, [pc, #112]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d018      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d30:	d013      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d10c      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40014000 	.word	0x40014000

08004da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e03f      	b.n	8004e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fd f906 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2224      	movs	r2, #36	; 0x24
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f929 	bl	800506c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b08a      	sub	sp, #40	; 0x28
 8004e6e:	af02      	add	r7, sp, #8
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d17c      	bne.n	8004f84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_UART_Transmit+0x2c>
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e075      	b.n	8004f86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_UART_Transmit+0x3e>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e06e      	b.n	8004f86 <HAL_UART_Transmit+0x11c>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2221      	movs	r2, #33	; 0x21
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ebe:	f7fd fa91 	bl	80023e4 <HAL_GetTick>
 8004ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed8:	d108      	bne.n	8004eec <HAL_UART_Transmit+0x82>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d104      	bne.n	8004eec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e003      	b.n	8004ef4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004efc:	e02a      	b.n	8004f54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2200      	movs	r2, #0
 8004f06:	2180      	movs	r1, #128	; 0x80
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f840 	bl	8004f8e <UART_WaitOnFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e036      	b.n	8004f86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	3302      	adds	r3, #2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	e007      	b.n	8004f46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	3301      	adds	r3, #1
 8004f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1cf      	bne.n	8004efe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2140      	movs	r1, #64	; 0x40
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f810 	bl	8004f8e <UART_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e006      	b.n	8004f86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e000      	b.n	8004f86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
  }
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b090      	sub	sp, #64	; 0x40
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9e:	e050      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d04c      	beq.n	8005042 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x30>
 8004fae:	f7fd fa19 	bl	80023e4 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d241      	bcs.n	8005042 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fde:	637a      	str	r2, [r7, #52]	; 0x34
 8004fe0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e5      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3314      	adds	r3, #20
 8004ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	613b      	str	r3, [r7, #16]
   return(result);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f023 0301 	bic.w	r3, r3, #1
 8005008:	63bb      	str	r3, [r7, #56]	; 0x38
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3314      	adds	r3, #20
 8005010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005012:	623a      	str	r2, [r7, #32]
 8005014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	69f9      	ldr	r1, [r7, #28]
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e5      	bne.n	8004ff2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e00f      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4013      	ands	r3, r2
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	429a      	cmp	r2, r3
 800505e:	d09f      	beq.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3740      	adds	r7, #64	; 0x40
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800506c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005070:	b0c0      	sub	sp, #256	; 0x100
 8005072:	af00      	add	r7, sp, #0
 8005074:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	68d9      	ldr	r1, [r3, #12]
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	ea40 0301 	orr.w	r3, r0, r1
 8005094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050c4:	f021 010c 	bic.w	r1, r1, #12
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050d2:	430b      	orrs	r3, r1
 80050d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e6:	6999      	ldr	r1, [r3, #24]
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	ea40 0301 	orr.w	r3, r0, r1
 80050f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b8f      	ldr	r3, [pc, #572]	; (8005338 <UART_SetConfig+0x2cc>)
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d005      	beq.n	800510c <UART_SetConfig+0xa0>
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b8d      	ldr	r3, [pc, #564]	; (800533c <UART_SetConfig+0x2d0>)
 8005108:	429a      	cmp	r2, r3
 800510a:	d104      	bne.n	8005116 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800510c:	f7fe fff4 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8005110:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005114:	e003      	b.n	800511e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005116:	f7fe ffdb 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 800511a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005128:	f040 810c 	bne.w	8005344 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800512c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005130:	2200      	movs	r2, #0
 8005132:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005136:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800513a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800513e:	4622      	mov	r2, r4
 8005140:	462b      	mov	r3, r5
 8005142:	1891      	adds	r1, r2, r2
 8005144:	65b9      	str	r1, [r7, #88]	; 0x58
 8005146:	415b      	adcs	r3, r3
 8005148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800514a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800514e:	4621      	mov	r1, r4
 8005150:	eb12 0801 	adds.w	r8, r2, r1
 8005154:	4629      	mov	r1, r5
 8005156:	eb43 0901 	adc.w	r9, r3, r1
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800516a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516e:	4690      	mov	r8, r2
 8005170:	4699      	mov	r9, r3
 8005172:	4623      	mov	r3, r4
 8005174:	eb18 0303 	adds.w	r3, r8, r3
 8005178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800517c:	462b      	mov	r3, r5
 800517e:	eb49 0303 	adc.w	r3, r9, r3
 8005182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005192:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800519a:	460b      	mov	r3, r1
 800519c:	18db      	adds	r3, r3, r3
 800519e:	653b      	str	r3, [r7, #80]	; 0x50
 80051a0:	4613      	mov	r3, r2
 80051a2:	eb42 0303 	adc.w	r3, r2, r3
 80051a6:	657b      	str	r3, [r7, #84]	; 0x54
 80051a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051b0:	f7fb fd72 	bl	8000c98 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4b61      	ldr	r3, [pc, #388]	; (8005340 <UART_SetConfig+0x2d4>)
 80051ba:	fba3 2302 	umull	r2, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	011c      	lsls	r4, r3, #4
 80051c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	1891      	adds	r1, r2, r2
 80051da:	64b9      	str	r1, [r7, #72]	; 0x48
 80051dc:	415b      	adcs	r3, r3
 80051de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051e4:	4641      	mov	r1, r8
 80051e6:	eb12 0a01 	adds.w	sl, r2, r1
 80051ea:	4649      	mov	r1, r9
 80051ec:	eb43 0b01 	adc.w	fp, r3, r1
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005204:	4692      	mov	sl, r2
 8005206:	469b      	mov	fp, r3
 8005208:	4643      	mov	r3, r8
 800520a:	eb1a 0303 	adds.w	r3, sl, r3
 800520e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005212:	464b      	mov	r3, r9
 8005214:	eb4b 0303 	adc.w	r3, fp, r3
 8005218:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005228:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800522c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005230:	460b      	mov	r3, r1
 8005232:	18db      	adds	r3, r3, r3
 8005234:	643b      	str	r3, [r7, #64]	; 0x40
 8005236:	4613      	mov	r3, r2
 8005238:	eb42 0303 	adc.w	r3, r2, r3
 800523c:	647b      	str	r3, [r7, #68]	; 0x44
 800523e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005242:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005246:	f7fb fd27 	bl	8000c98 <__aeabi_uldivmod>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4611      	mov	r1, r2
 8005250:	4b3b      	ldr	r3, [pc, #236]	; (8005340 <UART_SetConfig+0x2d4>)
 8005252:	fba3 2301 	umull	r2, r3, r3, r1
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2264      	movs	r2, #100	; 0x64
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	1acb      	subs	r3, r1, r3
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005266:	4b36      	ldr	r3, [pc, #216]	; (8005340 <UART_SetConfig+0x2d4>)
 8005268:	fba3 2302 	umull	r2, r3, r3, r2
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005274:	441c      	add	r4, r3
 8005276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800527a:	2200      	movs	r2, #0
 800527c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005280:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005284:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005288:	4642      	mov	r2, r8
 800528a:	464b      	mov	r3, r9
 800528c:	1891      	adds	r1, r2, r2
 800528e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005290:	415b      	adcs	r3, r3
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005298:	4641      	mov	r1, r8
 800529a:	1851      	adds	r1, r2, r1
 800529c:	6339      	str	r1, [r7, #48]	; 0x30
 800529e:	4649      	mov	r1, r9
 80052a0:	414b      	adcs	r3, r1
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052b0:	4659      	mov	r1, fp
 80052b2:	00cb      	lsls	r3, r1, #3
 80052b4:	4651      	mov	r1, sl
 80052b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ba:	4651      	mov	r1, sl
 80052bc:	00ca      	lsls	r2, r1, #3
 80052be:	4610      	mov	r0, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	4603      	mov	r3, r0
 80052c4:	4642      	mov	r2, r8
 80052c6:	189b      	adds	r3, r3, r2
 80052c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052cc:	464b      	mov	r3, r9
 80052ce:	460a      	mov	r2, r1
 80052d0:	eb42 0303 	adc.w	r3, r2, r3
 80052d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052ec:	460b      	mov	r3, r1
 80052ee:	18db      	adds	r3, r3, r3
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f2:	4613      	mov	r3, r2
 80052f4:	eb42 0303 	adc.w	r3, r2, r3
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005302:	f7fb fcc9 	bl	8000c98 <__aeabi_uldivmod>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <UART_SetConfig+0x2d4>)
 800530c:	fba3 1302 	umull	r1, r3, r3, r2
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	2164      	movs	r1, #100	; 0x64
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	3332      	adds	r3, #50	; 0x32
 800531e:	4a08      	ldr	r2, [pc, #32]	; (8005340 <UART_SetConfig+0x2d4>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f003 0207 	and.w	r2, r3, #7
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4422      	add	r2, r4
 8005332:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005334:	e105      	b.n	8005542 <UART_SetConfig+0x4d6>
 8005336:	bf00      	nop
 8005338:	40011000 	.word	0x40011000
 800533c:	40011400 	.word	0x40011400
 8005340:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800534e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005352:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005356:	4642      	mov	r2, r8
 8005358:	464b      	mov	r3, r9
 800535a:	1891      	adds	r1, r2, r2
 800535c:	6239      	str	r1, [r7, #32]
 800535e:	415b      	adcs	r3, r3
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005366:	4641      	mov	r1, r8
 8005368:	1854      	adds	r4, r2, r1
 800536a:	4649      	mov	r1, r9
 800536c:	eb43 0501 	adc.w	r5, r3, r1
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	00eb      	lsls	r3, r5, #3
 800537a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800537e:	00e2      	lsls	r2, r4, #3
 8005380:	4614      	mov	r4, r2
 8005382:	461d      	mov	r5, r3
 8005384:	4643      	mov	r3, r8
 8005386:	18e3      	adds	r3, r4, r3
 8005388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800538c:	464b      	mov	r3, r9
 800538e:	eb45 0303 	adc.w	r3, r5, r3
 8005392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053b2:	4629      	mov	r1, r5
 80053b4:	008b      	lsls	r3, r1, #2
 80053b6:	4621      	mov	r1, r4
 80053b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053bc:	4621      	mov	r1, r4
 80053be:	008a      	lsls	r2, r1, #2
 80053c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053c4:	f7fb fc68 	bl	8000c98 <__aeabi_uldivmod>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4b60      	ldr	r3, [pc, #384]	; (8005550 <UART_SetConfig+0x4e4>)
 80053ce:	fba3 2302 	umull	r2, r3, r3, r2
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	011c      	lsls	r4, r3, #4
 80053d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053e8:	4642      	mov	r2, r8
 80053ea:	464b      	mov	r3, r9
 80053ec:	1891      	adds	r1, r2, r2
 80053ee:	61b9      	str	r1, [r7, #24]
 80053f0:	415b      	adcs	r3, r3
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f8:	4641      	mov	r1, r8
 80053fa:	1851      	adds	r1, r2, r1
 80053fc:	6139      	str	r1, [r7, #16]
 80053fe:	4649      	mov	r1, r9
 8005400:	414b      	adcs	r3, r1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005410:	4659      	mov	r1, fp
 8005412:	00cb      	lsls	r3, r1, #3
 8005414:	4651      	mov	r1, sl
 8005416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800541a:	4651      	mov	r1, sl
 800541c:	00ca      	lsls	r2, r1, #3
 800541e:	4610      	mov	r0, r2
 8005420:	4619      	mov	r1, r3
 8005422:	4603      	mov	r3, r0
 8005424:	4642      	mov	r2, r8
 8005426:	189b      	adds	r3, r3, r2
 8005428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800542c:	464b      	mov	r3, r9
 800542e:	460a      	mov	r2, r1
 8005430:	eb42 0303 	adc.w	r3, r2, r3
 8005434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	67bb      	str	r3, [r7, #120]	; 0x78
 8005442:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005450:	4649      	mov	r1, r9
 8005452:	008b      	lsls	r3, r1, #2
 8005454:	4641      	mov	r1, r8
 8005456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800545a:	4641      	mov	r1, r8
 800545c:	008a      	lsls	r2, r1, #2
 800545e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005462:	f7fb fc19 	bl	8000c98 <__aeabi_uldivmod>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4b39      	ldr	r3, [pc, #228]	; (8005550 <UART_SetConfig+0x4e4>)
 800546c:	fba3 1302 	umull	r1, r3, r3, r2
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	2164      	movs	r1, #100	; 0x64
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	3332      	adds	r3, #50	; 0x32
 800547e:	4a34      	ldr	r2, [pc, #208]	; (8005550 <UART_SetConfig+0x4e4>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800548a:	441c      	add	r4, r3
 800548c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005490:	2200      	movs	r2, #0
 8005492:	673b      	str	r3, [r7, #112]	; 0x70
 8005494:	677a      	str	r2, [r7, #116]	; 0x74
 8005496:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800549a:	4642      	mov	r2, r8
 800549c:	464b      	mov	r3, r9
 800549e:	1891      	adds	r1, r2, r2
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	415b      	adcs	r3, r3
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054aa:	4641      	mov	r1, r8
 80054ac:	1851      	adds	r1, r2, r1
 80054ae:	6039      	str	r1, [r7, #0]
 80054b0:	4649      	mov	r1, r9
 80054b2:	414b      	adcs	r3, r1
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054c2:	4659      	mov	r1, fp
 80054c4:	00cb      	lsls	r3, r1, #3
 80054c6:	4651      	mov	r1, sl
 80054c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054cc:	4651      	mov	r1, sl
 80054ce:	00ca      	lsls	r2, r1, #3
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	4603      	mov	r3, r0
 80054d6:	4642      	mov	r2, r8
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	66bb      	str	r3, [r7, #104]	; 0x68
 80054dc:	464b      	mov	r3, r9
 80054de:	460a      	mov	r2, r1
 80054e0:	eb42 0303 	adc.w	r3, r2, r3
 80054e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	663b      	str	r3, [r7, #96]	; 0x60
 80054f0:	667a      	str	r2, [r7, #100]	; 0x64
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054fe:	4649      	mov	r1, r9
 8005500:	008b      	lsls	r3, r1, #2
 8005502:	4641      	mov	r1, r8
 8005504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005508:	4641      	mov	r1, r8
 800550a:	008a      	lsls	r2, r1, #2
 800550c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005510:	f7fb fbc2 	bl	8000c98 <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <UART_SetConfig+0x4e4>)
 800551a:	fba3 1302 	umull	r1, r3, r3, r2
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	2164      	movs	r1, #100	; 0x64
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	3332      	adds	r3, #50	; 0x32
 800552c:	4a08      	ldr	r2, [pc, #32]	; (8005550 <UART_SetConfig+0x4e4>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	f003 020f 	and.w	r2, r3, #15
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4422      	add	r2, r4
 8005540:	609a      	str	r2, [r3, #8]
}
 8005542:	bf00      	nop
 8005544:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005548:	46bd      	mov	sp, r7
 800554a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554e:	bf00      	nop
 8005550:	51eb851f 	.word	0x51eb851f

08005554 <__errno>:
 8005554:	4b01      	ldr	r3, [pc, #4]	; (800555c <__errno+0x8>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	2000001c 	.word	0x2000001c

08005560 <__libc_init_array>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4d0d      	ldr	r5, [pc, #52]	; (8005598 <__libc_init_array+0x38>)
 8005564:	4c0d      	ldr	r4, [pc, #52]	; (800559c <__libc_init_array+0x3c>)
 8005566:	1b64      	subs	r4, r4, r5
 8005568:	10a4      	asrs	r4, r4, #2
 800556a:	2600      	movs	r6, #0
 800556c:	42a6      	cmp	r6, r4
 800556e:	d109      	bne.n	8005584 <__libc_init_array+0x24>
 8005570:	4d0b      	ldr	r5, [pc, #44]	; (80055a0 <__libc_init_array+0x40>)
 8005572:	4c0c      	ldr	r4, [pc, #48]	; (80055a4 <__libc_init_array+0x44>)
 8005574:	f004 fc90 	bl	8009e98 <_init>
 8005578:	1b64      	subs	r4, r4, r5
 800557a:	10a4      	asrs	r4, r4, #2
 800557c:	2600      	movs	r6, #0
 800557e:	42a6      	cmp	r6, r4
 8005580:	d105      	bne.n	800558e <__libc_init_array+0x2e>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	f855 3b04 	ldr.w	r3, [r5], #4
 8005588:	4798      	blx	r3
 800558a:	3601      	adds	r6, #1
 800558c:	e7ee      	b.n	800556c <__libc_init_array+0xc>
 800558e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005592:	4798      	blx	r3
 8005594:	3601      	adds	r6, #1
 8005596:	e7f2      	b.n	800557e <__libc_init_array+0x1e>
 8005598:	0800a3dc 	.word	0x0800a3dc
 800559c:	0800a3dc 	.word	0x0800a3dc
 80055a0:	0800a3dc 	.word	0x0800a3dc
 80055a4:	0800a3e0 	.word	0x0800a3e0

080055a8 <memset>:
 80055a8:	4402      	add	r2, r0
 80055aa:	4603      	mov	r3, r0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <__cvt>:
 80055b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	ec55 4b10 	vmov	r4, r5, d0
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	460e      	mov	r6, r1
 80055c4:	4619      	mov	r1, r3
 80055c6:	462b      	mov	r3, r5
 80055c8:	bfbb      	ittet	lt
 80055ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055ce:	461d      	movlt	r5, r3
 80055d0:	2300      	movge	r3, #0
 80055d2:	232d      	movlt	r3, #45	; 0x2d
 80055d4:	700b      	strb	r3, [r1, #0]
 80055d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055dc:	4691      	mov	r9, r2
 80055de:	f023 0820 	bic.w	r8, r3, #32
 80055e2:	bfbc      	itt	lt
 80055e4:	4622      	movlt	r2, r4
 80055e6:	4614      	movlt	r4, r2
 80055e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055ec:	d005      	beq.n	80055fa <__cvt+0x42>
 80055ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055f2:	d100      	bne.n	80055f6 <__cvt+0x3e>
 80055f4:	3601      	adds	r6, #1
 80055f6:	2102      	movs	r1, #2
 80055f8:	e000      	b.n	80055fc <__cvt+0x44>
 80055fa:	2103      	movs	r1, #3
 80055fc:	ab03      	add	r3, sp, #12
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	ab02      	add	r3, sp, #8
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	ec45 4b10 	vmov	d0, r4, r5
 8005608:	4653      	mov	r3, sl
 800560a:	4632      	mov	r2, r6
 800560c:	f001 fdac 	bl	8007168 <_dtoa_r>
 8005610:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005614:	4607      	mov	r7, r0
 8005616:	d102      	bne.n	800561e <__cvt+0x66>
 8005618:	f019 0f01 	tst.w	r9, #1
 800561c:	d022      	beq.n	8005664 <__cvt+0xac>
 800561e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005622:	eb07 0906 	add.w	r9, r7, r6
 8005626:	d110      	bne.n	800564a <__cvt+0x92>
 8005628:	783b      	ldrb	r3, [r7, #0]
 800562a:	2b30      	cmp	r3, #48	; 0x30
 800562c:	d10a      	bne.n	8005644 <__cvt+0x8c>
 800562e:	2200      	movs	r2, #0
 8005630:	2300      	movs	r3, #0
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	f7fb fa4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800563a:	b918      	cbnz	r0, 8005644 <__cvt+0x8c>
 800563c:	f1c6 0601 	rsb	r6, r6, #1
 8005640:	f8ca 6000 	str.w	r6, [sl]
 8005644:	f8da 3000 	ldr.w	r3, [sl]
 8005648:	4499      	add	r9, r3
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	4620      	mov	r0, r4
 8005650:	4629      	mov	r1, r5
 8005652:	f7fb fa41 	bl	8000ad8 <__aeabi_dcmpeq>
 8005656:	b108      	cbz	r0, 800565c <__cvt+0xa4>
 8005658:	f8cd 900c 	str.w	r9, [sp, #12]
 800565c:	2230      	movs	r2, #48	; 0x30
 800565e:	9b03      	ldr	r3, [sp, #12]
 8005660:	454b      	cmp	r3, r9
 8005662:	d307      	bcc.n	8005674 <__cvt+0xbc>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005668:	1bdb      	subs	r3, r3, r7
 800566a:	4638      	mov	r0, r7
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	b004      	add	sp, #16
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	1c59      	adds	r1, r3, #1
 8005676:	9103      	str	r1, [sp, #12]
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	e7f0      	b.n	800565e <__cvt+0xa6>

0800567c <__exponent>:
 800567c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800567e:	4603      	mov	r3, r0
 8005680:	2900      	cmp	r1, #0
 8005682:	bfb8      	it	lt
 8005684:	4249      	neglt	r1, r1
 8005686:	f803 2b02 	strb.w	r2, [r3], #2
 800568a:	bfb4      	ite	lt
 800568c:	222d      	movlt	r2, #45	; 0x2d
 800568e:	222b      	movge	r2, #43	; 0x2b
 8005690:	2909      	cmp	r1, #9
 8005692:	7042      	strb	r2, [r0, #1]
 8005694:	dd2a      	ble.n	80056ec <__exponent+0x70>
 8005696:	f10d 0407 	add.w	r4, sp, #7
 800569a:	46a4      	mov	ip, r4
 800569c:	270a      	movs	r7, #10
 800569e:	46a6      	mov	lr, r4
 80056a0:	460a      	mov	r2, r1
 80056a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80056a6:	fb07 1516 	mls	r5, r7, r6, r1
 80056aa:	3530      	adds	r5, #48	; 0x30
 80056ac:	2a63      	cmp	r2, #99	; 0x63
 80056ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80056b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056b6:	4631      	mov	r1, r6
 80056b8:	dcf1      	bgt.n	800569e <__exponent+0x22>
 80056ba:	3130      	adds	r1, #48	; 0x30
 80056bc:	f1ae 0502 	sub.w	r5, lr, #2
 80056c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056c4:	1c44      	adds	r4, r0, #1
 80056c6:	4629      	mov	r1, r5
 80056c8:	4561      	cmp	r1, ip
 80056ca:	d30a      	bcc.n	80056e2 <__exponent+0x66>
 80056cc:	f10d 0209 	add.w	r2, sp, #9
 80056d0:	eba2 020e 	sub.w	r2, r2, lr
 80056d4:	4565      	cmp	r5, ip
 80056d6:	bf88      	it	hi
 80056d8:	2200      	movhi	r2, #0
 80056da:	4413      	add	r3, r2
 80056dc:	1a18      	subs	r0, r3, r0
 80056de:	b003      	add	sp, #12
 80056e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80056ea:	e7ed      	b.n	80056c8 <__exponent+0x4c>
 80056ec:	2330      	movs	r3, #48	; 0x30
 80056ee:	3130      	adds	r1, #48	; 0x30
 80056f0:	7083      	strb	r3, [r0, #2]
 80056f2:	70c1      	strb	r1, [r0, #3]
 80056f4:	1d03      	adds	r3, r0, #4
 80056f6:	e7f1      	b.n	80056dc <__exponent+0x60>

080056f8 <_printf_float>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	ed2d 8b02 	vpush	{d8}
 8005700:	b08d      	sub	sp, #52	; 0x34
 8005702:	460c      	mov	r4, r1
 8005704:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005708:	4616      	mov	r6, r2
 800570a:	461f      	mov	r7, r3
 800570c:	4605      	mov	r5, r0
 800570e:	f002 fe89 	bl	8008424 <_localeconv_r>
 8005712:	f8d0 a000 	ldr.w	sl, [r0]
 8005716:	4650      	mov	r0, sl
 8005718:	f7fa fd62 	bl	80001e0 <strlen>
 800571c:	2300      	movs	r3, #0
 800571e:	930a      	str	r3, [sp, #40]	; 0x28
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	9305      	str	r3, [sp, #20]
 8005724:	f8d8 3000 	ldr.w	r3, [r8]
 8005728:	f894 b018 	ldrb.w	fp, [r4, #24]
 800572c:	3307      	adds	r3, #7
 800572e:	f023 0307 	bic.w	r3, r3, #7
 8005732:	f103 0208 	add.w	r2, r3, #8
 8005736:	f8c8 2000 	str.w	r2, [r8]
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005742:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800574a:	9307      	str	r3, [sp, #28]
 800574c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005750:	ee08 0a10 	vmov	s16, r0
 8005754:	4b9f      	ldr	r3, [pc, #636]	; (80059d4 <_printf_float+0x2dc>)
 8005756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	f7fb f9ed 	bl	8000b3c <__aeabi_dcmpun>
 8005762:	bb88      	cbnz	r0, 80057c8 <_printf_float+0xd0>
 8005764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005768:	4b9a      	ldr	r3, [pc, #616]	; (80059d4 <_printf_float+0x2dc>)
 800576a:	f04f 32ff 	mov.w	r2, #4294967295
 800576e:	f7fb f9c7 	bl	8000b00 <__aeabi_dcmple>
 8005772:	bb48      	cbnz	r0, 80057c8 <_printf_float+0xd0>
 8005774:	2200      	movs	r2, #0
 8005776:	2300      	movs	r3, #0
 8005778:	4640      	mov	r0, r8
 800577a:	4649      	mov	r1, r9
 800577c:	f7fb f9b6 	bl	8000aec <__aeabi_dcmplt>
 8005780:	b110      	cbz	r0, 8005788 <_printf_float+0x90>
 8005782:	232d      	movs	r3, #45	; 0x2d
 8005784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005788:	4b93      	ldr	r3, [pc, #588]	; (80059d8 <_printf_float+0x2e0>)
 800578a:	4894      	ldr	r0, [pc, #592]	; (80059dc <_printf_float+0x2e4>)
 800578c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005790:	bf94      	ite	ls
 8005792:	4698      	movls	r8, r3
 8005794:	4680      	movhi	r8, r0
 8005796:	2303      	movs	r3, #3
 8005798:	6123      	str	r3, [r4, #16]
 800579a:	9b05      	ldr	r3, [sp, #20]
 800579c:	f023 0204 	bic.w	r2, r3, #4
 80057a0:	6022      	str	r2, [r4, #0]
 80057a2:	f04f 0900 	mov.w	r9, #0
 80057a6:	9700      	str	r7, [sp, #0]
 80057a8:	4633      	mov	r3, r6
 80057aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80057ac:	4621      	mov	r1, r4
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 f9d8 	bl	8005b64 <_printf_common>
 80057b4:	3001      	adds	r0, #1
 80057b6:	f040 8090 	bne.w	80058da <_printf_float+0x1e2>
 80057ba:	f04f 30ff 	mov.w	r0, #4294967295
 80057be:	b00d      	add	sp, #52	; 0x34
 80057c0:	ecbd 8b02 	vpop	{d8}
 80057c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	4640      	mov	r0, r8
 80057ce:	4649      	mov	r1, r9
 80057d0:	f7fb f9b4 	bl	8000b3c <__aeabi_dcmpun>
 80057d4:	b140      	cbz	r0, 80057e8 <_printf_float+0xf0>
 80057d6:	464b      	mov	r3, r9
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bfbc      	itt	lt
 80057dc:	232d      	movlt	r3, #45	; 0x2d
 80057de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057e2:	487f      	ldr	r0, [pc, #508]	; (80059e0 <_printf_float+0x2e8>)
 80057e4:	4b7f      	ldr	r3, [pc, #508]	; (80059e4 <_printf_float+0x2ec>)
 80057e6:	e7d1      	b.n	800578c <_printf_float+0x94>
 80057e8:	6863      	ldr	r3, [r4, #4]
 80057ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057ee:	9206      	str	r2, [sp, #24]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	d13f      	bne.n	8005874 <_printf_float+0x17c>
 80057f4:	2306      	movs	r3, #6
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	9b05      	ldr	r3, [sp, #20]
 80057fa:	6861      	ldr	r1, [r4, #4]
 80057fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005800:	2300      	movs	r3, #0
 8005802:	9303      	str	r3, [sp, #12]
 8005804:	ab0a      	add	r3, sp, #40	; 0x28
 8005806:	e9cd b301 	strd	fp, r3, [sp, #4]
 800580a:	ab09      	add	r3, sp, #36	; 0x24
 800580c:	ec49 8b10 	vmov	d0, r8, r9
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6022      	str	r2, [r4, #0]
 8005814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005818:	4628      	mov	r0, r5
 800581a:	f7ff fecd 	bl	80055b8 <__cvt>
 800581e:	9b06      	ldr	r3, [sp, #24]
 8005820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005822:	2b47      	cmp	r3, #71	; 0x47
 8005824:	4680      	mov	r8, r0
 8005826:	d108      	bne.n	800583a <_printf_float+0x142>
 8005828:	1cc8      	adds	r0, r1, #3
 800582a:	db02      	blt.n	8005832 <_printf_float+0x13a>
 800582c:	6863      	ldr	r3, [r4, #4]
 800582e:	4299      	cmp	r1, r3
 8005830:	dd41      	ble.n	80058b6 <_printf_float+0x1be>
 8005832:	f1ab 0b02 	sub.w	fp, fp, #2
 8005836:	fa5f fb8b 	uxtb.w	fp, fp
 800583a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800583e:	d820      	bhi.n	8005882 <_printf_float+0x18a>
 8005840:	3901      	subs	r1, #1
 8005842:	465a      	mov	r2, fp
 8005844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005848:	9109      	str	r1, [sp, #36]	; 0x24
 800584a:	f7ff ff17 	bl	800567c <__exponent>
 800584e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005850:	1813      	adds	r3, r2, r0
 8005852:	2a01      	cmp	r2, #1
 8005854:	4681      	mov	r9, r0
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	dc02      	bgt.n	8005860 <_printf_float+0x168>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	07d2      	lsls	r2, r2, #31
 800585e:	d501      	bpl.n	8005864 <_printf_float+0x16c>
 8005860:	3301      	adds	r3, #1
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005868:	2b00      	cmp	r3, #0
 800586a:	d09c      	beq.n	80057a6 <_printf_float+0xae>
 800586c:	232d      	movs	r3, #45	; 0x2d
 800586e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005872:	e798      	b.n	80057a6 <_printf_float+0xae>
 8005874:	9a06      	ldr	r2, [sp, #24]
 8005876:	2a47      	cmp	r2, #71	; 0x47
 8005878:	d1be      	bne.n	80057f8 <_printf_float+0x100>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1bc      	bne.n	80057f8 <_printf_float+0x100>
 800587e:	2301      	movs	r3, #1
 8005880:	e7b9      	b.n	80057f6 <_printf_float+0xfe>
 8005882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005886:	d118      	bne.n	80058ba <_printf_float+0x1c2>
 8005888:	2900      	cmp	r1, #0
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	dd0b      	ble.n	80058a6 <_printf_float+0x1ae>
 800588e:	6121      	str	r1, [r4, #16]
 8005890:	b913      	cbnz	r3, 8005898 <_printf_float+0x1a0>
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	07d0      	lsls	r0, r2, #31
 8005896:	d502      	bpl.n	800589e <_printf_float+0x1a6>
 8005898:	3301      	adds	r3, #1
 800589a:	440b      	add	r3, r1
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	65a1      	str	r1, [r4, #88]	; 0x58
 80058a0:	f04f 0900 	mov.w	r9, #0
 80058a4:	e7de      	b.n	8005864 <_printf_float+0x16c>
 80058a6:	b913      	cbnz	r3, 80058ae <_printf_float+0x1b6>
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	07d2      	lsls	r2, r2, #31
 80058ac:	d501      	bpl.n	80058b2 <_printf_float+0x1ba>
 80058ae:	3302      	adds	r3, #2
 80058b0:	e7f4      	b.n	800589c <_printf_float+0x1a4>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e7f2      	b.n	800589c <_printf_float+0x1a4>
 80058b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058bc:	4299      	cmp	r1, r3
 80058be:	db05      	blt.n	80058cc <_printf_float+0x1d4>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	6121      	str	r1, [r4, #16]
 80058c4:	07d8      	lsls	r0, r3, #31
 80058c6:	d5ea      	bpl.n	800589e <_printf_float+0x1a6>
 80058c8:	1c4b      	adds	r3, r1, #1
 80058ca:	e7e7      	b.n	800589c <_printf_float+0x1a4>
 80058cc:	2900      	cmp	r1, #0
 80058ce:	bfd4      	ite	le
 80058d0:	f1c1 0202 	rsble	r2, r1, #2
 80058d4:	2201      	movgt	r2, #1
 80058d6:	4413      	add	r3, r2
 80058d8:	e7e0      	b.n	800589c <_printf_float+0x1a4>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	055a      	lsls	r2, r3, #21
 80058de:	d407      	bmi.n	80058f0 <_printf_float+0x1f8>
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	4642      	mov	r2, r8
 80058e4:	4631      	mov	r1, r6
 80058e6:	4628      	mov	r0, r5
 80058e8:	47b8      	blx	r7
 80058ea:	3001      	adds	r0, #1
 80058ec:	d12c      	bne.n	8005948 <_printf_float+0x250>
 80058ee:	e764      	b.n	80057ba <_printf_float+0xc2>
 80058f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058f4:	f240 80e0 	bls.w	8005ab8 <_printf_float+0x3c0>
 80058f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058fc:	2200      	movs	r2, #0
 80058fe:	2300      	movs	r3, #0
 8005900:	f7fb f8ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8005904:	2800      	cmp	r0, #0
 8005906:	d034      	beq.n	8005972 <_printf_float+0x27a>
 8005908:	4a37      	ldr	r2, [pc, #220]	; (80059e8 <_printf_float+0x2f0>)
 800590a:	2301      	movs	r3, #1
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f af51 	beq.w	80057ba <_printf_float+0xc2>
 8005918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800591c:	429a      	cmp	r2, r3
 800591e:	db02      	blt.n	8005926 <_printf_float+0x22e>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	07d8      	lsls	r0, r3, #31
 8005924:	d510      	bpl.n	8005948 <_printf_float+0x250>
 8005926:	ee18 3a10 	vmov	r3, s16
 800592a:	4652      	mov	r2, sl
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	f43f af41 	beq.w	80057ba <_printf_float+0xc2>
 8005938:	f04f 0800 	mov.w	r8, #0
 800593c:	f104 091a 	add.w	r9, r4, #26
 8005940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005942:	3b01      	subs	r3, #1
 8005944:	4543      	cmp	r3, r8
 8005946:	dc09      	bgt.n	800595c <_printf_float+0x264>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	079b      	lsls	r3, r3, #30
 800594c:	f100 8105 	bmi.w	8005b5a <_printf_float+0x462>
 8005950:	68e0      	ldr	r0, [r4, #12]
 8005952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005954:	4298      	cmp	r0, r3
 8005956:	bfb8      	it	lt
 8005958:	4618      	movlt	r0, r3
 800595a:	e730      	b.n	80057be <_printf_float+0xc6>
 800595c:	2301      	movs	r3, #1
 800595e:	464a      	mov	r2, r9
 8005960:	4631      	mov	r1, r6
 8005962:	4628      	mov	r0, r5
 8005964:	47b8      	blx	r7
 8005966:	3001      	adds	r0, #1
 8005968:	f43f af27 	beq.w	80057ba <_printf_float+0xc2>
 800596c:	f108 0801 	add.w	r8, r8, #1
 8005970:	e7e6      	b.n	8005940 <_printf_float+0x248>
 8005972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005974:	2b00      	cmp	r3, #0
 8005976:	dc39      	bgt.n	80059ec <_printf_float+0x2f4>
 8005978:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <_printf_float+0x2f0>)
 800597a:	2301      	movs	r3, #1
 800597c:	4631      	mov	r1, r6
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f af19 	beq.w	80057ba <_printf_float+0xc2>
 8005988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800598c:	4313      	orrs	r3, r2
 800598e:	d102      	bne.n	8005996 <_printf_float+0x29e>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	07d9      	lsls	r1, r3, #31
 8005994:	d5d8      	bpl.n	8005948 <_printf_float+0x250>
 8005996:	ee18 3a10 	vmov	r3, s16
 800599a:	4652      	mov	r2, sl
 800599c:	4631      	mov	r1, r6
 800599e:	4628      	mov	r0, r5
 80059a0:	47b8      	blx	r7
 80059a2:	3001      	adds	r0, #1
 80059a4:	f43f af09 	beq.w	80057ba <_printf_float+0xc2>
 80059a8:	f04f 0900 	mov.w	r9, #0
 80059ac:	f104 0a1a 	add.w	sl, r4, #26
 80059b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b2:	425b      	negs	r3, r3
 80059b4:	454b      	cmp	r3, r9
 80059b6:	dc01      	bgt.n	80059bc <_printf_float+0x2c4>
 80059b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ba:	e792      	b.n	80058e2 <_printf_float+0x1ea>
 80059bc:	2301      	movs	r3, #1
 80059be:	4652      	mov	r2, sl
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f aef7 	beq.w	80057ba <_printf_float+0xc2>
 80059cc:	f109 0901 	add.w	r9, r9, #1
 80059d0:	e7ee      	b.n	80059b0 <_printf_float+0x2b8>
 80059d2:	bf00      	nop
 80059d4:	7fefffff 	.word	0x7fefffff
 80059d8:	08009f30 	.word	0x08009f30
 80059dc:	08009f34 	.word	0x08009f34
 80059e0:	08009f3c 	.word	0x08009f3c
 80059e4:	08009f38 	.word	0x08009f38
 80059e8:	08009f40 	.word	0x08009f40
 80059ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059f0:	429a      	cmp	r2, r3
 80059f2:	bfa8      	it	ge
 80059f4:	461a      	movge	r2, r3
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	4691      	mov	r9, r2
 80059fa:	dc37      	bgt.n	8005a6c <_printf_float+0x374>
 80059fc:	f04f 0b00 	mov.w	fp, #0
 8005a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a04:	f104 021a 	add.w	r2, r4, #26
 8005a08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a0a:	9305      	str	r3, [sp, #20]
 8005a0c:	eba3 0309 	sub.w	r3, r3, r9
 8005a10:	455b      	cmp	r3, fp
 8005a12:	dc33      	bgt.n	8005a7c <_printf_float+0x384>
 8005a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	db3b      	blt.n	8005a94 <_printf_float+0x39c>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	07da      	lsls	r2, r3, #31
 8005a20:	d438      	bmi.n	8005a94 <_printf_float+0x39c>
 8005a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a24:	9a05      	ldr	r2, [sp, #20]
 8005a26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a28:	1a9a      	subs	r2, r3, r2
 8005a2a:	eba3 0901 	sub.w	r9, r3, r1
 8005a2e:	4591      	cmp	r9, r2
 8005a30:	bfa8      	it	ge
 8005a32:	4691      	movge	r9, r2
 8005a34:	f1b9 0f00 	cmp.w	r9, #0
 8005a38:	dc35      	bgt.n	8005aa6 <_printf_float+0x3ae>
 8005a3a:	f04f 0800 	mov.w	r8, #0
 8005a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a42:	f104 0a1a 	add.w	sl, r4, #26
 8005a46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	eba3 0309 	sub.w	r3, r3, r9
 8005a50:	4543      	cmp	r3, r8
 8005a52:	f77f af79 	ble.w	8005948 <_printf_float+0x250>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4652      	mov	r2, sl
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b8      	blx	r7
 8005a60:	3001      	adds	r0, #1
 8005a62:	f43f aeaa 	beq.w	80057ba <_printf_float+0xc2>
 8005a66:	f108 0801 	add.w	r8, r8, #1
 8005a6a:	e7ec      	b.n	8005a46 <_printf_float+0x34e>
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4642      	mov	r2, r8
 8005a72:	4628      	mov	r0, r5
 8005a74:	47b8      	blx	r7
 8005a76:	3001      	adds	r0, #1
 8005a78:	d1c0      	bne.n	80059fc <_printf_float+0x304>
 8005a7a:	e69e      	b.n	80057ba <_printf_float+0xc2>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	9205      	str	r2, [sp, #20]
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	f43f ae97 	beq.w	80057ba <_printf_float+0xc2>
 8005a8c:	9a05      	ldr	r2, [sp, #20]
 8005a8e:	f10b 0b01 	add.w	fp, fp, #1
 8005a92:	e7b9      	b.n	8005a08 <_printf_float+0x310>
 8005a94:	ee18 3a10 	vmov	r3, s16
 8005a98:	4652      	mov	r2, sl
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d1be      	bne.n	8005a22 <_printf_float+0x32a>
 8005aa4:	e689      	b.n	80057ba <_printf_float+0xc2>
 8005aa6:	9a05      	ldr	r2, [sp, #20]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	4442      	add	r2, r8
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d1c1      	bne.n	8005a3a <_printf_float+0x342>
 8005ab6:	e680      	b.n	80057ba <_printf_float+0xc2>
 8005ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aba:	2a01      	cmp	r2, #1
 8005abc:	dc01      	bgt.n	8005ac2 <_printf_float+0x3ca>
 8005abe:	07db      	lsls	r3, r3, #31
 8005ac0:	d538      	bpl.n	8005b34 <_printf_float+0x43c>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	f43f ae74 	beq.w	80057ba <_printf_float+0xc2>
 8005ad2:	ee18 3a10 	vmov	r3, s16
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b8      	blx	r7
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f43f ae6b 	beq.w	80057ba <_printf_float+0xc2>
 8005ae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2300      	movs	r3, #0
 8005aec:	f7fa fff4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005af0:	b9d8      	cbnz	r0, 8005b2a <_printf_float+0x432>
 8005af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af4:	f108 0201 	add.w	r2, r8, #1
 8005af8:	3b01      	subs	r3, #1
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b8      	blx	r7
 8005b00:	3001      	adds	r0, #1
 8005b02:	d10e      	bne.n	8005b22 <_printf_float+0x42a>
 8005b04:	e659      	b.n	80057ba <_printf_float+0xc2>
 8005b06:	2301      	movs	r3, #1
 8005b08:	4652      	mov	r2, sl
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	f43f ae52 	beq.w	80057ba <_printf_float+0xc2>
 8005b16:	f108 0801 	add.w	r8, r8, #1
 8005b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	4543      	cmp	r3, r8
 8005b20:	dcf1      	bgt.n	8005b06 <_printf_float+0x40e>
 8005b22:	464b      	mov	r3, r9
 8005b24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b28:	e6dc      	b.n	80058e4 <_printf_float+0x1ec>
 8005b2a:	f04f 0800 	mov.w	r8, #0
 8005b2e:	f104 0a1a 	add.w	sl, r4, #26
 8005b32:	e7f2      	b.n	8005b1a <_printf_float+0x422>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4642      	mov	r2, r8
 8005b38:	e7df      	b.n	8005afa <_printf_float+0x402>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	464a      	mov	r2, r9
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	f43f ae38 	beq.w	80057ba <_printf_float+0xc2>
 8005b4a:	f108 0801 	add.w	r8, r8, #1
 8005b4e:	68e3      	ldr	r3, [r4, #12]
 8005b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b52:	1a5b      	subs	r3, r3, r1
 8005b54:	4543      	cmp	r3, r8
 8005b56:	dcf0      	bgt.n	8005b3a <_printf_float+0x442>
 8005b58:	e6fa      	b.n	8005950 <_printf_float+0x258>
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	f104 0919 	add.w	r9, r4, #25
 8005b62:	e7f4      	b.n	8005b4e <_printf_float+0x456>

08005b64 <_printf_common>:
 8005b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b68:	4616      	mov	r6, r2
 8005b6a:	4699      	mov	r9, r3
 8005b6c:	688a      	ldr	r2, [r1, #8]
 8005b6e:	690b      	ldr	r3, [r1, #16]
 8005b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b74:	4293      	cmp	r3, r2
 8005b76:	bfb8      	it	lt
 8005b78:	4613      	movlt	r3, r2
 8005b7a:	6033      	str	r3, [r6, #0]
 8005b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b80:	4607      	mov	r7, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	b10a      	cbz	r2, 8005b8a <_printf_common+0x26>
 8005b86:	3301      	adds	r3, #1
 8005b88:	6033      	str	r3, [r6, #0]
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	0699      	lsls	r1, r3, #26
 8005b8e:	bf42      	ittt	mi
 8005b90:	6833      	ldrmi	r3, [r6, #0]
 8005b92:	3302      	addmi	r3, #2
 8005b94:	6033      	strmi	r3, [r6, #0]
 8005b96:	6825      	ldr	r5, [r4, #0]
 8005b98:	f015 0506 	ands.w	r5, r5, #6
 8005b9c:	d106      	bne.n	8005bac <_printf_common+0x48>
 8005b9e:	f104 0a19 	add.w	sl, r4, #25
 8005ba2:	68e3      	ldr	r3, [r4, #12]
 8005ba4:	6832      	ldr	r2, [r6, #0]
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	42ab      	cmp	r3, r5
 8005baa:	dc26      	bgt.n	8005bfa <_printf_common+0x96>
 8005bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bb0:	1e13      	subs	r3, r2, #0
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	bf18      	it	ne
 8005bb6:	2301      	movne	r3, #1
 8005bb8:	0692      	lsls	r2, r2, #26
 8005bba:	d42b      	bmi.n	8005c14 <_printf_common+0xb0>
 8005bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c0      	blx	r8
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d01e      	beq.n	8005c08 <_printf_common+0xa4>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	68e5      	ldr	r5, [r4, #12]
 8005bce:	6832      	ldr	r2, [r6, #0]
 8005bd0:	f003 0306 	and.w	r3, r3, #6
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	bf08      	it	eq
 8005bd8:	1aad      	subeq	r5, r5, r2
 8005bda:	68a3      	ldr	r3, [r4, #8]
 8005bdc:	6922      	ldr	r2, [r4, #16]
 8005bde:	bf0c      	ite	eq
 8005be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005be4:	2500      	movne	r5, #0
 8005be6:	4293      	cmp	r3, r2
 8005be8:	bfc4      	itt	gt
 8005bea:	1a9b      	subgt	r3, r3, r2
 8005bec:	18ed      	addgt	r5, r5, r3
 8005bee:	2600      	movs	r6, #0
 8005bf0:	341a      	adds	r4, #26
 8005bf2:	42b5      	cmp	r5, r6
 8005bf4:	d11a      	bne.n	8005c2c <_printf_common+0xc8>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e008      	b.n	8005c0c <_printf_common+0xa8>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	4649      	mov	r1, r9
 8005c00:	4638      	mov	r0, r7
 8005c02:	47c0      	blx	r8
 8005c04:	3001      	adds	r0, #1
 8005c06:	d103      	bne.n	8005c10 <_printf_common+0xac>
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c10:	3501      	adds	r5, #1
 8005c12:	e7c6      	b.n	8005ba2 <_printf_common+0x3e>
 8005c14:	18e1      	adds	r1, r4, r3
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	2030      	movs	r0, #48	; 0x30
 8005c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c1e:	4422      	add	r2, r4
 8005c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c28:	3302      	adds	r3, #2
 8005c2a:	e7c7      	b.n	8005bbc <_printf_common+0x58>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4622      	mov	r2, r4
 8005c30:	4649      	mov	r1, r9
 8005c32:	4638      	mov	r0, r7
 8005c34:	47c0      	blx	r8
 8005c36:	3001      	adds	r0, #1
 8005c38:	d0e6      	beq.n	8005c08 <_printf_common+0xa4>
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7d9      	b.n	8005bf2 <_printf_common+0x8e>
	...

08005c40 <_printf_i>:
 8005c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	7e0f      	ldrb	r7, [r1, #24]
 8005c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c48:	2f78      	cmp	r7, #120	; 0x78
 8005c4a:	4691      	mov	r9, r2
 8005c4c:	4680      	mov	r8, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	469a      	mov	sl, r3
 8005c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c56:	d807      	bhi.n	8005c68 <_printf_i+0x28>
 8005c58:	2f62      	cmp	r7, #98	; 0x62
 8005c5a:	d80a      	bhi.n	8005c72 <_printf_i+0x32>
 8005c5c:	2f00      	cmp	r7, #0
 8005c5e:	f000 80d8 	beq.w	8005e12 <_printf_i+0x1d2>
 8005c62:	2f58      	cmp	r7, #88	; 0x58
 8005c64:	f000 80a3 	beq.w	8005dae <_printf_i+0x16e>
 8005c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c70:	e03a      	b.n	8005ce8 <_printf_i+0xa8>
 8005c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c76:	2b15      	cmp	r3, #21
 8005c78:	d8f6      	bhi.n	8005c68 <_printf_i+0x28>
 8005c7a:	a101      	add	r1, pc, #4	; (adr r1, 8005c80 <_printf_i+0x40>)
 8005c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c80:	08005cd9 	.word	0x08005cd9
 8005c84:	08005ced 	.word	0x08005ced
 8005c88:	08005c69 	.word	0x08005c69
 8005c8c:	08005c69 	.word	0x08005c69
 8005c90:	08005c69 	.word	0x08005c69
 8005c94:	08005c69 	.word	0x08005c69
 8005c98:	08005ced 	.word	0x08005ced
 8005c9c:	08005c69 	.word	0x08005c69
 8005ca0:	08005c69 	.word	0x08005c69
 8005ca4:	08005c69 	.word	0x08005c69
 8005ca8:	08005c69 	.word	0x08005c69
 8005cac:	08005df9 	.word	0x08005df9
 8005cb0:	08005d1d 	.word	0x08005d1d
 8005cb4:	08005ddb 	.word	0x08005ddb
 8005cb8:	08005c69 	.word	0x08005c69
 8005cbc:	08005c69 	.word	0x08005c69
 8005cc0:	08005e1b 	.word	0x08005e1b
 8005cc4:	08005c69 	.word	0x08005c69
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005c69 	.word	0x08005c69
 8005cd0:	08005c69 	.word	0x08005c69
 8005cd4:	08005de3 	.word	0x08005de3
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	602a      	str	r2, [r5, #0]
 8005ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0a3      	b.n	8005e34 <_printf_i+0x1f4>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	6829      	ldr	r1, [r5, #0]
 8005cf0:	0606      	lsls	r6, r0, #24
 8005cf2:	f101 0304 	add.w	r3, r1, #4
 8005cf6:	d50a      	bpl.n	8005d0e <_printf_i+0xce>
 8005cf8:	680e      	ldr	r6, [r1, #0]
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	2e00      	cmp	r6, #0
 8005cfe:	da03      	bge.n	8005d08 <_printf_i+0xc8>
 8005d00:	232d      	movs	r3, #45	; 0x2d
 8005d02:	4276      	negs	r6, r6
 8005d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d08:	485e      	ldr	r0, [pc, #376]	; (8005e84 <_printf_i+0x244>)
 8005d0a:	230a      	movs	r3, #10
 8005d0c:	e019      	b.n	8005d42 <_printf_i+0x102>
 8005d0e:	680e      	ldr	r6, [r1, #0]
 8005d10:	602b      	str	r3, [r5, #0]
 8005d12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d16:	bf18      	it	ne
 8005d18:	b236      	sxthne	r6, r6
 8005d1a:	e7ef      	b.n	8005cfc <_printf_i+0xbc>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	1d19      	adds	r1, r3, #4
 8005d22:	6029      	str	r1, [r5, #0]
 8005d24:	0601      	lsls	r1, r0, #24
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0xec>
 8005d28:	681e      	ldr	r6, [r3, #0]
 8005d2a:	e002      	b.n	8005d32 <_printf_i+0xf2>
 8005d2c:	0646      	lsls	r6, r0, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0xe8>
 8005d30:	881e      	ldrh	r6, [r3, #0]
 8005d32:	4854      	ldr	r0, [pc, #336]	; (8005e84 <_printf_i+0x244>)
 8005d34:	2f6f      	cmp	r7, #111	; 0x6f
 8005d36:	bf0c      	ite	eq
 8005d38:	2308      	moveq	r3, #8
 8005d3a:	230a      	movne	r3, #10
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d42:	6865      	ldr	r5, [r4, #4]
 8005d44:	60a5      	str	r5, [r4, #8]
 8005d46:	2d00      	cmp	r5, #0
 8005d48:	bfa2      	ittt	ge
 8005d4a:	6821      	ldrge	r1, [r4, #0]
 8005d4c:	f021 0104 	bicge.w	r1, r1, #4
 8005d50:	6021      	strge	r1, [r4, #0]
 8005d52:	b90e      	cbnz	r6, 8005d58 <_printf_i+0x118>
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	d04d      	beq.n	8005df4 <_printf_i+0x1b4>
 8005d58:	4615      	mov	r5, r2
 8005d5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d62:	5dc7      	ldrb	r7, [r0, r7]
 8005d64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d68:	4637      	mov	r7, r6
 8005d6a:	42bb      	cmp	r3, r7
 8005d6c:	460e      	mov	r6, r1
 8005d6e:	d9f4      	bls.n	8005d5a <_printf_i+0x11a>
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d10b      	bne.n	8005d8c <_printf_i+0x14c>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	07de      	lsls	r6, r3, #31
 8005d78:	d508      	bpl.n	8005d8c <_printf_i+0x14c>
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	6861      	ldr	r1, [r4, #4]
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	bfde      	ittt	le
 8005d82:	2330      	movle	r3, #48	; 0x30
 8005d84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d8c:	1b52      	subs	r2, r2, r5
 8005d8e:	6122      	str	r2, [r4, #16]
 8005d90:	f8cd a000 	str.w	sl, [sp]
 8005d94:	464b      	mov	r3, r9
 8005d96:	aa03      	add	r2, sp, #12
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	f7ff fee2 	bl	8005b64 <_printf_common>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d14c      	bne.n	8005e3e <_printf_i+0x1fe>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	b004      	add	sp, #16
 8005daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dae:	4835      	ldr	r0, [pc, #212]	; (8005e84 <_printf_i+0x244>)
 8005db0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005db4:	6829      	ldr	r1, [r5, #0]
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dbc:	6029      	str	r1, [r5, #0]
 8005dbe:	061d      	lsls	r5, r3, #24
 8005dc0:	d514      	bpl.n	8005dec <_printf_i+0x1ac>
 8005dc2:	07df      	lsls	r7, r3, #31
 8005dc4:	bf44      	itt	mi
 8005dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dca:	6023      	strmi	r3, [r4, #0]
 8005dcc:	b91e      	cbnz	r6, 8005dd6 <_printf_i+0x196>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	f023 0320 	bic.w	r3, r3, #32
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	2310      	movs	r3, #16
 8005dd8:	e7b0      	b.n	8005d3c <_printf_i+0xfc>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	f043 0320 	orr.w	r3, r3, #32
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	2378      	movs	r3, #120	; 0x78
 8005de4:	4828      	ldr	r0, [pc, #160]	; (8005e88 <_printf_i+0x248>)
 8005de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dea:	e7e3      	b.n	8005db4 <_printf_i+0x174>
 8005dec:	0659      	lsls	r1, r3, #25
 8005dee:	bf48      	it	mi
 8005df0:	b2b6      	uxthmi	r6, r6
 8005df2:	e7e6      	b.n	8005dc2 <_printf_i+0x182>
 8005df4:	4615      	mov	r5, r2
 8005df6:	e7bb      	b.n	8005d70 <_printf_i+0x130>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	6826      	ldr	r6, [r4, #0]
 8005dfc:	6961      	ldr	r1, [r4, #20]
 8005dfe:	1d18      	adds	r0, r3, #4
 8005e00:	6028      	str	r0, [r5, #0]
 8005e02:	0635      	lsls	r5, r6, #24
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	d501      	bpl.n	8005e0c <_printf_i+0x1cc>
 8005e08:	6019      	str	r1, [r3, #0]
 8005e0a:	e002      	b.n	8005e12 <_printf_i+0x1d2>
 8005e0c:	0670      	lsls	r0, r6, #25
 8005e0e:	d5fb      	bpl.n	8005e08 <_printf_i+0x1c8>
 8005e10:	8019      	strh	r1, [r3, #0]
 8005e12:	2300      	movs	r3, #0
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	4615      	mov	r5, r2
 8005e18:	e7ba      	b.n	8005d90 <_printf_i+0x150>
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	1d1a      	adds	r2, r3, #4
 8005e1e:	602a      	str	r2, [r5, #0]
 8005e20:	681d      	ldr	r5, [r3, #0]
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	2100      	movs	r1, #0
 8005e26:	4628      	mov	r0, r5
 8005e28:	f7fa f9e2 	bl	80001f0 <memchr>
 8005e2c:	b108      	cbz	r0, 8005e32 <_printf_i+0x1f2>
 8005e2e:	1b40      	subs	r0, r0, r5
 8005e30:	6060      	str	r0, [r4, #4]
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	2300      	movs	r3, #0
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3c:	e7a8      	b.n	8005d90 <_printf_i+0x150>
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	462a      	mov	r2, r5
 8005e42:	4649      	mov	r1, r9
 8005e44:	4640      	mov	r0, r8
 8005e46:	47d0      	blx	sl
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d0ab      	beq.n	8005da4 <_printf_i+0x164>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	079b      	lsls	r3, r3, #30
 8005e50:	d413      	bmi.n	8005e7a <_printf_i+0x23a>
 8005e52:	68e0      	ldr	r0, [r4, #12]
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	4298      	cmp	r0, r3
 8005e58:	bfb8      	it	lt
 8005e5a:	4618      	movlt	r0, r3
 8005e5c:	e7a4      	b.n	8005da8 <_printf_i+0x168>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4632      	mov	r2, r6
 8005e62:	4649      	mov	r1, r9
 8005e64:	4640      	mov	r0, r8
 8005e66:	47d0      	blx	sl
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d09b      	beq.n	8005da4 <_printf_i+0x164>
 8005e6c:	3501      	adds	r5, #1
 8005e6e:	68e3      	ldr	r3, [r4, #12]
 8005e70:	9903      	ldr	r1, [sp, #12]
 8005e72:	1a5b      	subs	r3, r3, r1
 8005e74:	42ab      	cmp	r3, r5
 8005e76:	dcf2      	bgt.n	8005e5e <_printf_i+0x21e>
 8005e78:	e7eb      	b.n	8005e52 <_printf_i+0x212>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	f104 0619 	add.w	r6, r4, #25
 8005e80:	e7f5      	b.n	8005e6e <_printf_i+0x22e>
 8005e82:	bf00      	nop
 8005e84:	08009f42 	.word	0x08009f42
 8005e88:	08009f53 	.word	0x08009f53

08005e8c <_scanf_float>:
 8005e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	b087      	sub	sp, #28
 8005e92:	4617      	mov	r7, r2
 8005e94:	9303      	str	r3, [sp, #12]
 8005e96:	688b      	ldr	r3, [r1, #8]
 8005e98:	1e5a      	subs	r2, r3, #1
 8005e9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e9e:	bf83      	ittte	hi
 8005ea0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ea4:	195b      	addhi	r3, r3, r5
 8005ea6:	9302      	strhi	r3, [sp, #8]
 8005ea8:	2300      	movls	r3, #0
 8005eaa:	bf86      	itte	hi
 8005eac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005eb0:	608b      	strhi	r3, [r1, #8]
 8005eb2:	9302      	strls	r3, [sp, #8]
 8005eb4:	680b      	ldr	r3, [r1, #0]
 8005eb6:	468b      	mov	fp, r1
 8005eb8:	2500      	movs	r5, #0
 8005eba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005ebe:	f84b 3b1c 	str.w	r3, [fp], #28
 8005ec2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ec6:	4680      	mov	r8, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	465e      	mov	r6, fp
 8005ecc:	46aa      	mov	sl, r5
 8005ece:	46a9      	mov	r9, r5
 8005ed0:	9501      	str	r5, [sp, #4]
 8005ed2:	68a2      	ldr	r2, [r4, #8]
 8005ed4:	b152      	cbz	r2, 8005eec <_scanf_float+0x60>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b4e      	cmp	r3, #78	; 0x4e
 8005edc:	d864      	bhi.n	8005fa8 <_scanf_float+0x11c>
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d83c      	bhi.n	8005f5c <_scanf_float+0xd0>
 8005ee2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ee6:	b2c8      	uxtb	r0, r1
 8005ee8:	280e      	cmp	r0, #14
 8005eea:	d93a      	bls.n	8005f62 <_scanf_float+0xd6>
 8005eec:	f1b9 0f00 	cmp.w	r9, #0
 8005ef0:	d003      	beq.n	8005efa <_scanf_float+0x6e>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005efe:	f1ba 0f01 	cmp.w	sl, #1
 8005f02:	f200 8113 	bhi.w	800612c <_scanf_float+0x2a0>
 8005f06:	455e      	cmp	r6, fp
 8005f08:	f200 8105 	bhi.w	8006116 <_scanf_float+0x28a>
 8005f0c:	2501      	movs	r5, #1
 8005f0e:	4628      	mov	r0, r5
 8005f10:	b007      	add	sp, #28
 8005f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005f1a:	2a0d      	cmp	r2, #13
 8005f1c:	d8e6      	bhi.n	8005eec <_scanf_float+0x60>
 8005f1e:	a101      	add	r1, pc, #4	; (adr r1, 8005f24 <_scanf_float+0x98>)
 8005f20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f24:	08006063 	.word	0x08006063
 8005f28:	08005eed 	.word	0x08005eed
 8005f2c:	08005eed 	.word	0x08005eed
 8005f30:	08005eed 	.word	0x08005eed
 8005f34:	080060c3 	.word	0x080060c3
 8005f38:	0800609b 	.word	0x0800609b
 8005f3c:	08005eed 	.word	0x08005eed
 8005f40:	08005eed 	.word	0x08005eed
 8005f44:	08006071 	.word	0x08006071
 8005f48:	08005eed 	.word	0x08005eed
 8005f4c:	08005eed 	.word	0x08005eed
 8005f50:	08005eed 	.word	0x08005eed
 8005f54:	08005eed 	.word	0x08005eed
 8005f58:	08006029 	.word	0x08006029
 8005f5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005f60:	e7db      	b.n	8005f1a <_scanf_float+0x8e>
 8005f62:	290e      	cmp	r1, #14
 8005f64:	d8c2      	bhi.n	8005eec <_scanf_float+0x60>
 8005f66:	a001      	add	r0, pc, #4	; (adr r0, 8005f6c <_scanf_float+0xe0>)
 8005f68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f6c:	0800601b 	.word	0x0800601b
 8005f70:	08005eed 	.word	0x08005eed
 8005f74:	0800601b 	.word	0x0800601b
 8005f78:	080060af 	.word	0x080060af
 8005f7c:	08005eed 	.word	0x08005eed
 8005f80:	08005fc9 	.word	0x08005fc9
 8005f84:	08006005 	.word	0x08006005
 8005f88:	08006005 	.word	0x08006005
 8005f8c:	08006005 	.word	0x08006005
 8005f90:	08006005 	.word	0x08006005
 8005f94:	08006005 	.word	0x08006005
 8005f98:	08006005 	.word	0x08006005
 8005f9c:	08006005 	.word	0x08006005
 8005fa0:	08006005 	.word	0x08006005
 8005fa4:	08006005 	.word	0x08006005
 8005fa8:	2b6e      	cmp	r3, #110	; 0x6e
 8005faa:	d809      	bhi.n	8005fc0 <_scanf_float+0x134>
 8005fac:	2b60      	cmp	r3, #96	; 0x60
 8005fae:	d8b2      	bhi.n	8005f16 <_scanf_float+0x8a>
 8005fb0:	2b54      	cmp	r3, #84	; 0x54
 8005fb2:	d077      	beq.n	80060a4 <_scanf_float+0x218>
 8005fb4:	2b59      	cmp	r3, #89	; 0x59
 8005fb6:	d199      	bne.n	8005eec <_scanf_float+0x60>
 8005fb8:	2d07      	cmp	r5, #7
 8005fba:	d197      	bne.n	8005eec <_scanf_float+0x60>
 8005fbc:	2508      	movs	r5, #8
 8005fbe:	e029      	b.n	8006014 <_scanf_float+0x188>
 8005fc0:	2b74      	cmp	r3, #116	; 0x74
 8005fc2:	d06f      	beq.n	80060a4 <_scanf_float+0x218>
 8005fc4:	2b79      	cmp	r3, #121	; 0x79
 8005fc6:	e7f6      	b.n	8005fb6 <_scanf_float+0x12a>
 8005fc8:	6821      	ldr	r1, [r4, #0]
 8005fca:	05c8      	lsls	r0, r1, #23
 8005fcc:	d51a      	bpl.n	8006004 <_scanf_float+0x178>
 8005fce:	9b02      	ldr	r3, [sp, #8]
 8005fd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005fd4:	6021      	str	r1, [r4, #0]
 8005fd6:	f109 0901 	add.w	r9, r9, #1
 8005fda:	b11b      	cbz	r3, 8005fe4 <_scanf_float+0x158>
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	3201      	adds	r2, #1
 8005fe0:	9302      	str	r3, [sp, #8]
 8005fe2:	60a2      	str	r2, [r4, #8]
 8005fe4:	68a3      	ldr	r3, [r4, #8]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	3301      	adds	r3, #1
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	f340 8084 	ble.w	8006104 <_scanf_float+0x278>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	3301      	adds	r3, #1
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	e766      	b.n	8005ed2 <_scanf_float+0x46>
 8006004:	eb1a 0f05 	cmn.w	sl, r5
 8006008:	f47f af70 	bne.w	8005eec <_scanf_float+0x60>
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006012:	6022      	str	r2, [r4, #0]
 8006014:	f806 3b01 	strb.w	r3, [r6], #1
 8006018:	e7e4      	b.n	8005fe4 <_scanf_float+0x158>
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	0610      	lsls	r0, r2, #24
 800601e:	f57f af65 	bpl.w	8005eec <_scanf_float+0x60>
 8006022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006026:	e7f4      	b.n	8006012 <_scanf_float+0x186>
 8006028:	f1ba 0f00 	cmp.w	sl, #0
 800602c:	d10e      	bne.n	800604c <_scanf_float+0x1c0>
 800602e:	f1b9 0f00 	cmp.w	r9, #0
 8006032:	d10e      	bne.n	8006052 <_scanf_float+0x1c6>
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800603a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800603e:	d108      	bne.n	8006052 <_scanf_float+0x1c6>
 8006040:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006044:	6022      	str	r2, [r4, #0]
 8006046:	f04f 0a01 	mov.w	sl, #1
 800604a:	e7e3      	b.n	8006014 <_scanf_float+0x188>
 800604c:	f1ba 0f02 	cmp.w	sl, #2
 8006050:	d055      	beq.n	80060fe <_scanf_float+0x272>
 8006052:	2d01      	cmp	r5, #1
 8006054:	d002      	beq.n	800605c <_scanf_float+0x1d0>
 8006056:	2d04      	cmp	r5, #4
 8006058:	f47f af48 	bne.w	8005eec <_scanf_float+0x60>
 800605c:	3501      	adds	r5, #1
 800605e:	b2ed      	uxtb	r5, r5
 8006060:	e7d8      	b.n	8006014 <_scanf_float+0x188>
 8006062:	f1ba 0f01 	cmp.w	sl, #1
 8006066:	f47f af41 	bne.w	8005eec <_scanf_float+0x60>
 800606a:	f04f 0a02 	mov.w	sl, #2
 800606e:	e7d1      	b.n	8006014 <_scanf_float+0x188>
 8006070:	b97d      	cbnz	r5, 8006092 <_scanf_float+0x206>
 8006072:	f1b9 0f00 	cmp.w	r9, #0
 8006076:	f47f af3c 	bne.w	8005ef2 <_scanf_float+0x66>
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006080:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006084:	f47f af39 	bne.w	8005efa <_scanf_float+0x6e>
 8006088:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800608c:	6022      	str	r2, [r4, #0]
 800608e:	2501      	movs	r5, #1
 8006090:	e7c0      	b.n	8006014 <_scanf_float+0x188>
 8006092:	2d03      	cmp	r5, #3
 8006094:	d0e2      	beq.n	800605c <_scanf_float+0x1d0>
 8006096:	2d05      	cmp	r5, #5
 8006098:	e7de      	b.n	8006058 <_scanf_float+0x1cc>
 800609a:	2d02      	cmp	r5, #2
 800609c:	f47f af26 	bne.w	8005eec <_scanf_float+0x60>
 80060a0:	2503      	movs	r5, #3
 80060a2:	e7b7      	b.n	8006014 <_scanf_float+0x188>
 80060a4:	2d06      	cmp	r5, #6
 80060a6:	f47f af21 	bne.w	8005eec <_scanf_float+0x60>
 80060aa:	2507      	movs	r5, #7
 80060ac:	e7b2      	b.n	8006014 <_scanf_float+0x188>
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	0591      	lsls	r1, r2, #22
 80060b2:	f57f af1b 	bpl.w	8005eec <_scanf_float+0x60>
 80060b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80060ba:	6022      	str	r2, [r4, #0]
 80060bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80060c0:	e7a8      	b.n	8006014 <_scanf_float+0x188>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80060c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80060cc:	d006      	beq.n	80060dc <_scanf_float+0x250>
 80060ce:	0550      	lsls	r0, r2, #21
 80060d0:	f57f af0c 	bpl.w	8005eec <_scanf_float+0x60>
 80060d4:	f1b9 0f00 	cmp.w	r9, #0
 80060d8:	f43f af0f 	beq.w	8005efa <_scanf_float+0x6e>
 80060dc:	0591      	lsls	r1, r2, #22
 80060de:	bf58      	it	pl
 80060e0:	9901      	ldrpl	r1, [sp, #4]
 80060e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060e6:	bf58      	it	pl
 80060e8:	eba9 0101 	subpl.w	r1, r9, r1
 80060ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80060f0:	bf58      	it	pl
 80060f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80060f6:	6022      	str	r2, [r4, #0]
 80060f8:	f04f 0900 	mov.w	r9, #0
 80060fc:	e78a      	b.n	8006014 <_scanf_float+0x188>
 80060fe:	f04f 0a03 	mov.w	sl, #3
 8006102:	e787      	b.n	8006014 <_scanf_float+0x188>
 8006104:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006108:	4639      	mov	r1, r7
 800610a:	4640      	mov	r0, r8
 800610c:	4798      	blx	r3
 800610e:	2800      	cmp	r0, #0
 8006110:	f43f aedf 	beq.w	8005ed2 <_scanf_float+0x46>
 8006114:	e6ea      	b.n	8005eec <_scanf_float+0x60>
 8006116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800611a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800611e:	463a      	mov	r2, r7
 8006120:	4640      	mov	r0, r8
 8006122:	4798      	blx	r3
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	3b01      	subs	r3, #1
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	e6ec      	b.n	8005f06 <_scanf_float+0x7a>
 800612c:	1e6b      	subs	r3, r5, #1
 800612e:	2b06      	cmp	r3, #6
 8006130:	d825      	bhi.n	800617e <_scanf_float+0x2f2>
 8006132:	2d02      	cmp	r5, #2
 8006134:	d836      	bhi.n	80061a4 <_scanf_float+0x318>
 8006136:	455e      	cmp	r6, fp
 8006138:	f67f aee8 	bls.w	8005f0c <_scanf_float+0x80>
 800613c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006140:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006144:	463a      	mov	r2, r7
 8006146:	4640      	mov	r0, r8
 8006148:	4798      	blx	r3
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	3b01      	subs	r3, #1
 800614e:	6123      	str	r3, [r4, #16]
 8006150:	e7f1      	b.n	8006136 <_scanf_float+0x2aa>
 8006152:	9802      	ldr	r0, [sp, #8]
 8006154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006158:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800615c:	9002      	str	r0, [sp, #8]
 800615e:	463a      	mov	r2, r7
 8006160:	4640      	mov	r0, r8
 8006162:	4798      	blx	r3
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	3b01      	subs	r3, #1
 8006168:	6123      	str	r3, [r4, #16]
 800616a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800616e:	fa5f fa8a 	uxtb.w	sl, sl
 8006172:	f1ba 0f02 	cmp.w	sl, #2
 8006176:	d1ec      	bne.n	8006152 <_scanf_float+0x2c6>
 8006178:	3d03      	subs	r5, #3
 800617a:	b2ed      	uxtb	r5, r5
 800617c:	1b76      	subs	r6, r6, r5
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	05da      	lsls	r2, r3, #23
 8006182:	d52f      	bpl.n	80061e4 <_scanf_float+0x358>
 8006184:	055b      	lsls	r3, r3, #21
 8006186:	d510      	bpl.n	80061aa <_scanf_float+0x31e>
 8006188:	455e      	cmp	r6, fp
 800618a:	f67f aebf 	bls.w	8005f0c <_scanf_float+0x80>
 800618e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006196:	463a      	mov	r2, r7
 8006198:	4640      	mov	r0, r8
 800619a:	4798      	blx	r3
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	3b01      	subs	r3, #1
 80061a0:	6123      	str	r3, [r4, #16]
 80061a2:	e7f1      	b.n	8006188 <_scanf_float+0x2fc>
 80061a4:	46aa      	mov	sl, r5
 80061a6:	9602      	str	r6, [sp, #8]
 80061a8:	e7df      	b.n	800616a <_scanf_float+0x2de>
 80061aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	2965      	cmp	r1, #101	; 0x65
 80061b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80061b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80061ba:	6123      	str	r3, [r4, #16]
 80061bc:	d00c      	beq.n	80061d8 <_scanf_float+0x34c>
 80061be:	2945      	cmp	r1, #69	; 0x45
 80061c0:	d00a      	beq.n	80061d8 <_scanf_float+0x34c>
 80061c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061c6:	463a      	mov	r2, r7
 80061c8:	4640      	mov	r0, r8
 80061ca:	4798      	blx	r3
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	1eb5      	subs	r5, r6, #2
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061dc:	463a      	mov	r2, r7
 80061de:	4640      	mov	r0, r8
 80061e0:	4798      	blx	r3
 80061e2:	462e      	mov	r6, r5
 80061e4:	6825      	ldr	r5, [r4, #0]
 80061e6:	f015 0510 	ands.w	r5, r5, #16
 80061ea:	d159      	bne.n	80062a0 <_scanf_float+0x414>
 80061ec:	7035      	strb	r5, [r6, #0]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f8:	d11b      	bne.n	8006232 <_scanf_float+0x3a6>
 80061fa:	9b01      	ldr	r3, [sp, #4]
 80061fc:	454b      	cmp	r3, r9
 80061fe:	eba3 0209 	sub.w	r2, r3, r9
 8006202:	d123      	bne.n	800624c <_scanf_float+0x3c0>
 8006204:	2200      	movs	r2, #0
 8006206:	4659      	mov	r1, fp
 8006208:	4640      	mov	r0, r8
 800620a:	f000 fe97 	bl	8006f3c <_strtod_r>
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	9b03      	ldr	r3, [sp, #12]
 8006212:	f012 0f02 	tst.w	r2, #2
 8006216:	ec57 6b10 	vmov	r6, r7, d0
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	d021      	beq.n	8006262 <_scanf_float+0x3d6>
 800621e:	9903      	ldr	r1, [sp, #12]
 8006220:	1d1a      	adds	r2, r3, #4
 8006222:	600a      	str	r2, [r1, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	e9c3 6700 	strd	r6, r7, [r3]
 800622a:	68e3      	ldr	r3, [r4, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60e3      	str	r3, [r4, #12]
 8006230:	e66d      	b.n	8005f0e <_scanf_float+0x82>
 8006232:	9b04      	ldr	r3, [sp, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0e5      	beq.n	8006204 <_scanf_float+0x378>
 8006238:	9905      	ldr	r1, [sp, #20]
 800623a:	230a      	movs	r3, #10
 800623c:	462a      	mov	r2, r5
 800623e:	3101      	adds	r1, #1
 8006240:	4640      	mov	r0, r8
 8006242:	f000 ff03 	bl	800704c <_strtol_r>
 8006246:	9b04      	ldr	r3, [sp, #16]
 8006248:	9e05      	ldr	r6, [sp, #20]
 800624a:	1ac2      	subs	r2, r0, r3
 800624c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006250:	429e      	cmp	r6, r3
 8006252:	bf28      	it	cs
 8006254:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006258:	4912      	ldr	r1, [pc, #72]	; (80062a4 <_scanf_float+0x418>)
 800625a:	4630      	mov	r0, r6
 800625c:	f000 f82c 	bl	80062b8 <siprintf>
 8006260:	e7d0      	b.n	8006204 <_scanf_float+0x378>
 8006262:	9903      	ldr	r1, [sp, #12]
 8006264:	f012 0f04 	tst.w	r2, #4
 8006268:	f103 0204 	add.w	r2, r3, #4
 800626c:	600a      	str	r2, [r1, #0]
 800626e:	d1d9      	bne.n	8006224 <_scanf_float+0x398>
 8006270:	f8d3 8000 	ldr.w	r8, [r3]
 8006274:	ee10 2a10 	vmov	r2, s0
 8006278:	ee10 0a10 	vmov	r0, s0
 800627c:	463b      	mov	r3, r7
 800627e:	4639      	mov	r1, r7
 8006280:	f7fa fc5c 	bl	8000b3c <__aeabi_dcmpun>
 8006284:	b128      	cbz	r0, 8006292 <_scanf_float+0x406>
 8006286:	4808      	ldr	r0, [pc, #32]	; (80062a8 <_scanf_float+0x41c>)
 8006288:	f000 f810 	bl	80062ac <nanf>
 800628c:	ed88 0a00 	vstr	s0, [r8]
 8006290:	e7cb      	b.n	800622a <_scanf_float+0x39e>
 8006292:	4630      	mov	r0, r6
 8006294:	4639      	mov	r1, r7
 8006296:	f7fa fcaf 	bl	8000bf8 <__aeabi_d2f>
 800629a:	f8c8 0000 	str.w	r0, [r8]
 800629e:	e7c4      	b.n	800622a <_scanf_float+0x39e>
 80062a0:	2500      	movs	r5, #0
 80062a2:	e634      	b.n	8005f0e <_scanf_float+0x82>
 80062a4:	08009f64 	.word	0x08009f64
 80062a8:	0800a370 	.word	0x0800a370

080062ac <nanf>:
 80062ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80062b4 <nanf+0x8>
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	7fc00000 	.word	0x7fc00000

080062b8 <siprintf>:
 80062b8:	b40e      	push	{r1, r2, r3}
 80062ba:	b500      	push	{lr}
 80062bc:	b09c      	sub	sp, #112	; 0x70
 80062be:	ab1d      	add	r3, sp, #116	; 0x74
 80062c0:	9002      	str	r0, [sp, #8]
 80062c2:	9006      	str	r0, [sp, #24]
 80062c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062c8:	4809      	ldr	r0, [pc, #36]	; (80062f0 <siprintf+0x38>)
 80062ca:	9107      	str	r1, [sp, #28]
 80062cc:	9104      	str	r1, [sp, #16]
 80062ce:	4909      	ldr	r1, [pc, #36]	; (80062f4 <siprintf+0x3c>)
 80062d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d4:	9105      	str	r1, [sp, #20]
 80062d6:	6800      	ldr	r0, [r0, #0]
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	a902      	add	r1, sp, #8
 80062dc:	f002 fee2 	bl	80090a4 <_svfiprintf_r>
 80062e0:	9b02      	ldr	r3, [sp, #8]
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	b01c      	add	sp, #112	; 0x70
 80062e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062ec:	b003      	add	sp, #12
 80062ee:	4770      	bx	lr
 80062f0:	2000001c 	.word	0x2000001c
 80062f4:	ffff0208 	.word	0xffff0208

080062f8 <sulp>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	ec45 4b10 	vmov	d0, r4, r5
 8006302:	4616      	mov	r6, r2
 8006304:	f002 fc2c 	bl	8008b60 <__ulp>
 8006308:	ec51 0b10 	vmov	r0, r1, d0
 800630c:	b17e      	cbz	r6, 800632e <sulp+0x36>
 800630e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006312:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006316:	2b00      	cmp	r3, #0
 8006318:	dd09      	ble.n	800632e <sulp+0x36>
 800631a:	051b      	lsls	r3, r3, #20
 800631c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006320:	2400      	movs	r4, #0
 8006322:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	f7fa f96d 	bl	8000608 <__aeabi_dmul>
 800632e:	bd70      	pop	{r4, r5, r6, pc}

08006330 <_strtod_l>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	ed2d 8b02 	vpush	{d8}
 8006338:	b09d      	sub	sp, #116	; 0x74
 800633a:	461f      	mov	r7, r3
 800633c:	2300      	movs	r3, #0
 800633e:	9318      	str	r3, [sp, #96]	; 0x60
 8006340:	4ba2      	ldr	r3, [pc, #648]	; (80065cc <_strtod_l+0x29c>)
 8006342:	9213      	str	r2, [sp, #76]	; 0x4c
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	9305      	str	r3, [sp, #20]
 8006348:	4604      	mov	r4, r0
 800634a:	4618      	mov	r0, r3
 800634c:	4688      	mov	r8, r1
 800634e:	f7f9 ff47 	bl	80001e0 <strlen>
 8006352:	f04f 0a00 	mov.w	sl, #0
 8006356:	4605      	mov	r5, r0
 8006358:	f04f 0b00 	mov.w	fp, #0
 800635c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	2a2b      	cmp	r2, #43	; 0x2b
 8006366:	d04e      	beq.n	8006406 <_strtod_l+0xd6>
 8006368:	d83b      	bhi.n	80063e2 <_strtod_l+0xb2>
 800636a:	2a0d      	cmp	r2, #13
 800636c:	d834      	bhi.n	80063d8 <_strtod_l+0xa8>
 800636e:	2a08      	cmp	r2, #8
 8006370:	d834      	bhi.n	80063dc <_strtod_l+0xac>
 8006372:	2a00      	cmp	r2, #0
 8006374:	d03e      	beq.n	80063f4 <_strtod_l+0xc4>
 8006376:	2300      	movs	r3, #0
 8006378:	930a      	str	r3, [sp, #40]	; 0x28
 800637a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800637c:	7833      	ldrb	r3, [r6, #0]
 800637e:	2b30      	cmp	r3, #48	; 0x30
 8006380:	f040 80b0 	bne.w	80064e4 <_strtod_l+0x1b4>
 8006384:	7873      	ldrb	r3, [r6, #1]
 8006386:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800638a:	2b58      	cmp	r3, #88	; 0x58
 800638c:	d168      	bne.n	8006460 <_strtod_l+0x130>
 800638e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	ab18      	add	r3, sp, #96	; 0x60
 8006394:	9702      	str	r7, [sp, #8]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	4a8d      	ldr	r2, [pc, #564]	; (80065d0 <_strtod_l+0x2a0>)
 800639a:	ab19      	add	r3, sp, #100	; 0x64
 800639c:	a917      	add	r1, sp, #92	; 0x5c
 800639e:	4620      	mov	r0, r4
 80063a0:	f001 fd38 	bl	8007e14 <__gethex>
 80063a4:	f010 0707 	ands.w	r7, r0, #7
 80063a8:	4605      	mov	r5, r0
 80063aa:	d005      	beq.n	80063b8 <_strtod_l+0x88>
 80063ac:	2f06      	cmp	r7, #6
 80063ae:	d12c      	bne.n	800640a <_strtod_l+0xda>
 80063b0:	3601      	adds	r6, #1
 80063b2:	2300      	movs	r3, #0
 80063b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80063b6:	930a      	str	r3, [sp, #40]	; 0x28
 80063b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f040 8590 	bne.w	8006ee0 <_strtod_l+0xbb0>
 80063c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063c2:	b1eb      	cbz	r3, 8006400 <_strtod_l+0xd0>
 80063c4:	4652      	mov	r2, sl
 80063c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80063ca:	ec43 2b10 	vmov	d0, r2, r3
 80063ce:	b01d      	add	sp, #116	; 0x74
 80063d0:	ecbd 8b02 	vpop	{d8}
 80063d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d8:	2a20      	cmp	r2, #32
 80063da:	d1cc      	bne.n	8006376 <_strtod_l+0x46>
 80063dc:	3301      	adds	r3, #1
 80063de:	9317      	str	r3, [sp, #92]	; 0x5c
 80063e0:	e7be      	b.n	8006360 <_strtod_l+0x30>
 80063e2:	2a2d      	cmp	r2, #45	; 0x2d
 80063e4:	d1c7      	bne.n	8006376 <_strtod_l+0x46>
 80063e6:	2201      	movs	r2, #1
 80063e8:	920a      	str	r2, [sp, #40]	; 0x28
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1c2      	bne.n	800637a <_strtod_l+0x4a>
 80063f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 856e 	bne.w	8006edc <_strtod_l+0xbac>
 8006400:	4652      	mov	r2, sl
 8006402:	465b      	mov	r3, fp
 8006404:	e7e1      	b.n	80063ca <_strtod_l+0x9a>
 8006406:	2200      	movs	r2, #0
 8006408:	e7ee      	b.n	80063e8 <_strtod_l+0xb8>
 800640a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800640c:	b13a      	cbz	r2, 800641e <_strtod_l+0xee>
 800640e:	2135      	movs	r1, #53	; 0x35
 8006410:	a81a      	add	r0, sp, #104	; 0x68
 8006412:	f002 fcb0 	bl	8008d76 <__copybits>
 8006416:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006418:	4620      	mov	r0, r4
 800641a:	f002 f86f 	bl	80084fc <_Bfree>
 800641e:	3f01      	subs	r7, #1
 8006420:	2f04      	cmp	r7, #4
 8006422:	d806      	bhi.n	8006432 <_strtod_l+0x102>
 8006424:	e8df f007 	tbb	[pc, r7]
 8006428:	1714030a 	.word	0x1714030a
 800642c:	0a          	.byte	0x0a
 800642d:	00          	.byte	0x00
 800642e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006432:	0728      	lsls	r0, r5, #28
 8006434:	d5c0      	bpl.n	80063b8 <_strtod_l+0x88>
 8006436:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800643a:	e7bd      	b.n	80063b8 <_strtod_l+0x88>
 800643c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006440:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006442:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006446:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800644a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800644e:	e7f0      	b.n	8006432 <_strtod_l+0x102>
 8006450:	f8df b180 	ldr.w	fp, [pc, #384]	; 80065d4 <_strtod_l+0x2a4>
 8006454:	e7ed      	b.n	8006432 <_strtod_l+0x102>
 8006456:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800645a:	f04f 3aff 	mov.w	sl, #4294967295
 800645e:	e7e8      	b.n	8006432 <_strtod_l+0x102>
 8006460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	9217      	str	r2, [sp, #92]	; 0x5c
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	2b30      	cmp	r3, #48	; 0x30
 800646a:	d0f9      	beq.n	8006460 <_strtod_l+0x130>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0a3      	beq.n	80063b8 <_strtod_l+0x88>
 8006470:	2301      	movs	r3, #1
 8006472:	f04f 0900 	mov.w	r9, #0
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800647a:	9308      	str	r3, [sp, #32]
 800647c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006480:	464f      	mov	r7, r9
 8006482:	220a      	movs	r2, #10
 8006484:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006486:	7806      	ldrb	r6, [r0, #0]
 8006488:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800648c:	b2d9      	uxtb	r1, r3
 800648e:	2909      	cmp	r1, #9
 8006490:	d92a      	bls.n	80064e8 <_strtod_l+0x1b8>
 8006492:	9905      	ldr	r1, [sp, #20]
 8006494:	462a      	mov	r2, r5
 8006496:	f002 ff1f 	bl	80092d8 <strncmp>
 800649a:	b398      	cbz	r0, 8006504 <_strtod_l+0x1d4>
 800649c:	2000      	movs	r0, #0
 800649e:	4632      	mov	r2, r6
 80064a0:	463d      	mov	r5, r7
 80064a2:	9005      	str	r0, [sp, #20]
 80064a4:	4603      	mov	r3, r0
 80064a6:	2a65      	cmp	r2, #101	; 0x65
 80064a8:	d001      	beq.n	80064ae <_strtod_l+0x17e>
 80064aa:	2a45      	cmp	r2, #69	; 0x45
 80064ac:	d118      	bne.n	80064e0 <_strtod_l+0x1b0>
 80064ae:	b91d      	cbnz	r5, 80064b8 <_strtod_l+0x188>
 80064b0:	9a04      	ldr	r2, [sp, #16]
 80064b2:	4302      	orrs	r2, r0
 80064b4:	d09e      	beq.n	80063f4 <_strtod_l+0xc4>
 80064b6:	2500      	movs	r5, #0
 80064b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80064bc:	f108 0201 	add.w	r2, r8, #1
 80064c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80064c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80064c6:	2a2b      	cmp	r2, #43	; 0x2b
 80064c8:	d075      	beq.n	80065b6 <_strtod_l+0x286>
 80064ca:	2a2d      	cmp	r2, #45	; 0x2d
 80064cc:	d07b      	beq.n	80065c6 <_strtod_l+0x296>
 80064ce:	f04f 0c00 	mov.w	ip, #0
 80064d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80064d6:	2909      	cmp	r1, #9
 80064d8:	f240 8082 	bls.w	80065e0 <_strtod_l+0x2b0>
 80064dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80064e0:	2600      	movs	r6, #0
 80064e2:	e09d      	b.n	8006620 <_strtod_l+0x2f0>
 80064e4:	2300      	movs	r3, #0
 80064e6:	e7c4      	b.n	8006472 <_strtod_l+0x142>
 80064e8:	2f08      	cmp	r7, #8
 80064ea:	bfd8      	it	le
 80064ec:	9907      	ldrle	r1, [sp, #28]
 80064ee:	f100 0001 	add.w	r0, r0, #1
 80064f2:	bfda      	itte	le
 80064f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80064f8:	9307      	strle	r3, [sp, #28]
 80064fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80064fe:	3701      	adds	r7, #1
 8006500:	9017      	str	r0, [sp, #92]	; 0x5c
 8006502:	e7bf      	b.n	8006484 <_strtod_l+0x154>
 8006504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006506:	195a      	adds	r2, r3, r5
 8006508:	9217      	str	r2, [sp, #92]	; 0x5c
 800650a:	5d5a      	ldrb	r2, [r3, r5]
 800650c:	2f00      	cmp	r7, #0
 800650e:	d037      	beq.n	8006580 <_strtod_l+0x250>
 8006510:	9005      	str	r0, [sp, #20]
 8006512:	463d      	mov	r5, r7
 8006514:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006518:	2b09      	cmp	r3, #9
 800651a:	d912      	bls.n	8006542 <_strtod_l+0x212>
 800651c:	2301      	movs	r3, #1
 800651e:	e7c2      	b.n	80064a6 <_strtod_l+0x176>
 8006520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	9217      	str	r2, [sp, #92]	; 0x5c
 8006526:	785a      	ldrb	r2, [r3, #1]
 8006528:	3001      	adds	r0, #1
 800652a:	2a30      	cmp	r2, #48	; 0x30
 800652c:	d0f8      	beq.n	8006520 <_strtod_l+0x1f0>
 800652e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006532:	2b08      	cmp	r3, #8
 8006534:	f200 84d9 	bhi.w	8006eea <_strtod_l+0xbba>
 8006538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800653a:	9005      	str	r0, [sp, #20]
 800653c:	2000      	movs	r0, #0
 800653e:	9308      	str	r3, [sp, #32]
 8006540:	4605      	mov	r5, r0
 8006542:	3a30      	subs	r2, #48	; 0x30
 8006544:	f100 0301 	add.w	r3, r0, #1
 8006548:	d014      	beq.n	8006574 <_strtod_l+0x244>
 800654a:	9905      	ldr	r1, [sp, #20]
 800654c:	4419      	add	r1, r3
 800654e:	9105      	str	r1, [sp, #20]
 8006550:	462b      	mov	r3, r5
 8006552:	eb00 0e05 	add.w	lr, r0, r5
 8006556:	210a      	movs	r1, #10
 8006558:	4573      	cmp	r3, lr
 800655a:	d113      	bne.n	8006584 <_strtod_l+0x254>
 800655c:	182b      	adds	r3, r5, r0
 800655e:	2b08      	cmp	r3, #8
 8006560:	f105 0501 	add.w	r5, r5, #1
 8006564:	4405      	add	r5, r0
 8006566:	dc1c      	bgt.n	80065a2 <_strtod_l+0x272>
 8006568:	9907      	ldr	r1, [sp, #28]
 800656a:	230a      	movs	r3, #10
 800656c:	fb03 2301 	mla	r3, r3, r1, r2
 8006570:	9307      	str	r3, [sp, #28]
 8006572:	2300      	movs	r3, #0
 8006574:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006576:	1c51      	adds	r1, r2, #1
 8006578:	9117      	str	r1, [sp, #92]	; 0x5c
 800657a:	7852      	ldrb	r2, [r2, #1]
 800657c:	4618      	mov	r0, r3
 800657e:	e7c9      	b.n	8006514 <_strtod_l+0x1e4>
 8006580:	4638      	mov	r0, r7
 8006582:	e7d2      	b.n	800652a <_strtod_l+0x1fa>
 8006584:	2b08      	cmp	r3, #8
 8006586:	dc04      	bgt.n	8006592 <_strtod_l+0x262>
 8006588:	9e07      	ldr	r6, [sp, #28]
 800658a:	434e      	muls	r6, r1
 800658c:	9607      	str	r6, [sp, #28]
 800658e:	3301      	adds	r3, #1
 8006590:	e7e2      	b.n	8006558 <_strtod_l+0x228>
 8006592:	f103 0c01 	add.w	ip, r3, #1
 8006596:	f1bc 0f10 	cmp.w	ip, #16
 800659a:	bfd8      	it	le
 800659c:	fb01 f909 	mulle.w	r9, r1, r9
 80065a0:	e7f5      	b.n	800658e <_strtod_l+0x25e>
 80065a2:	2d10      	cmp	r5, #16
 80065a4:	bfdc      	itt	le
 80065a6:	230a      	movle	r3, #10
 80065a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80065ac:	e7e1      	b.n	8006572 <_strtod_l+0x242>
 80065ae:	2300      	movs	r3, #0
 80065b0:	9305      	str	r3, [sp, #20]
 80065b2:	2301      	movs	r3, #1
 80065b4:	e77c      	b.n	80064b0 <_strtod_l+0x180>
 80065b6:	f04f 0c00 	mov.w	ip, #0
 80065ba:	f108 0202 	add.w	r2, r8, #2
 80065be:	9217      	str	r2, [sp, #92]	; 0x5c
 80065c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80065c4:	e785      	b.n	80064d2 <_strtod_l+0x1a2>
 80065c6:	f04f 0c01 	mov.w	ip, #1
 80065ca:	e7f6      	b.n	80065ba <_strtod_l+0x28a>
 80065cc:	0800a1b8 	.word	0x0800a1b8
 80065d0:	08009f6c 	.word	0x08009f6c
 80065d4:	7ff00000 	.word	0x7ff00000
 80065d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065da:	1c51      	adds	r1, r2, #1
 80065dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80065de:	7852      	ldrb	r2, [r2, #1]
 80065e0:	2a30      	cmp	r2, #48	; 0x30
 80065e2:	d0f9      	beq.n	80065d8 <_strtod_l+0x2a8>
 80065e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80065e8:	2908      	cmp	r1, #8
 80065ea:	f63f af79 	bhi.w	80064e0 <_strtod_l+0x1b0>
 80065ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80065f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065f4:	9206      	str	r2, [sp, #24]
 80065f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065f8:	1c51      	adds	r1, r2, #1
 80065fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80065fc:	7852      	ldrb	r2, [r2, #1]
 80065fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006602:	2e09      	cmp	r6, #9
 8006604:	d937      	bls.n	8006676 <_strtod_l+0x346>
 8006606:	9e06      	ldr	r6, [sp, #24]
 8006608:	1b89      	subs	r1, r1, r6
 800660a:	2908      	cmp	r1, #8
 800660c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006610:	dc02      	bgt.n	8006618 <_strtod_l+0x2e8>
 8006612:	4576      	cmp	r6, lr
 8006614:	bfa8      	it	ge
 8006616:	4676      	movge	r6, lr
 8006618:	f1bc 0f00 	cmp.w	ip, #0
 800661c:	d000      	beq.n	8006620 <_strtod_l+0x2f0>
 800661e:	4276      	negs	r6, r6
 8006620:	2d00      	cmp	r5, #0
 8006622:	d14d      	bne.n	80066c0 <_strtod_l+0x390>
 8006624:	9904      	ldr	r1, [sp, #16]
 8006626:	4301      	orrs	r1, r0
 8006628:	f47f aec6 	bne.w	80063b8 <_strtod_l+0x88>
 800662c:	2b00      	cmp	r3, #0
 800662e:	f47f aee1 	bne.w	80063f4 <_strtod_l+0xc4>
 8006632:	2a69      	cmp	r2, #105	; 0x69
 8006634:	d027      	beq.n	8006686 <_strtod_l+0x356>
 8006636:	dc24      	bgt.n	8006682 <_strtod_l+0x352>
 8006638:	2a49      	cmp	r2, #73	; 0x49
 800663a:	d024      	beq.n	8006686 <_strtod_l+0x356>
 800663c:	2a4e      	cmp	r2, #78	; 0x4e
 800663e:	f47f aed9 	bne.w	80063f4 <_strtod_l+0xc4>
 8006642:	499f      	ldr	r1, [pc, #636]	; (80068c0 <_strtod_l+0x590>)
 8006644:	a817      	add	r0, sp, #92	; 0x5c
 8006646:	f001 fe3d 	bl	80082c4 <__match>
 800664a:	2800      	cmp	r0, #0
 800664c:	f43f aed2 	beq.w	80063f4 <_strtod_l+0xc4>
 8006650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b28      	cmp	r3, #40	; 0x28
 8006656:	d12d      	bne.n	80066b4 <_strtod_l+0x384>
 8006658:	499a      	ldr	r1, [pc, #616]	; (80068c4 <_strtod_l+0x594>)
 800665a:	aa1a      	add	r2, sp, #104	; 0x68
 800665c:	a817      	add	r0, sp, #92	; 0x5c
 800665e:	f001 fe45 	bl	80082ec <__hexnan>
 8006662:	2805      	cmp	r0, #5
 8006664:	d126      	bne.n	80066b4 <_strtod_l+0x384>
 8006666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006668:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800666c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006670:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006674:	e6a0      	b.n	80063b8 <_strtod_l+0x88>
 8006676:	210a      	movs	r1, #10
 8006678:	fb01 2e0e 	mla	lr, r1, lr, r2
 800667c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006680:	e7b9      	b.n	80065f6 <_strtod_l+0x2c6>
 8006682:	2a6e      	cmp	r2, #110	; 0x6e
 8006684:	e7db      	b.n	800663e <_strtod_l+0x30e>
 8006686:	4990      	ldr	r1, [pc, #576]	; (80068c8 <_strtod_l+0x598>)
 8006688:	a817      	add	r0, sp, #92	; 0x5c
 800668a:	f001 fe1b 	bl	80082c4 <__match>
 800668e:	2800      	cmp	r0, #0
 8006690:	f43f aeb0 	beq.w	80063f4 <_strtod_l+0xc4>
 8006694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006696:	498d      	ldr	r1, [pc, #564]	; (80068cc <_strtod_l+0x59c>)
 8006698:	3b01      	subs	r3, #1
 800669a:	a817      	add	r0, sp, #92	; 0x5c
 800669c:	9317      	str	r3, [sp, #92]	; 0x5c
 800669e:	f001 fe11 	bl	80082c4 <__match>
 80066a2:	b910      	cbnz	r0, 80066aa <_strtod_l+0x37a>
 80066a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066a6:	3301      	adds	r3, #1
 80066a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80066aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80068dc <_strtod_l+0x5ac>
 80066ae:	f04f 0a00 	mov.w	sl, #0
 80066b2:	e681      	b.n	80063b8 <_strtod_l+0x88>
 80066b4:	4886      	ldr	r0, [pc, #536]	; (80068d0 <_strtod_l+0x5a0>)
 80066b6:	f002 fdf7 	bl	80092a8 <nan>
 80066ba:	ec5b ab10 	vmov	sl, fp, d0
 80066be:	e67b      	b.n	80063b8 <_strtod_l+0x88>
 80066c0:	9b05      	ldr	r3, [sp, #20]
 80066c2:	9807      	ldr	r0, [sp, #28]
 80066c4:	1af3      	subs	r3, r6, r3
 80066c6:	2f00      	cmp	r7, #0
 80066c8:	bf08      	it	eq
 80066ca:	462f      	moveq	r7, r5
 80066cc:	2d10      	cmp	r5, #16
 80066ce:	9306      	str	r3, [sp, #24]
 80066d0:	46a8      	mov	r8, r5
 80066d2:	bfa8      	it	ge
 80066d4:	f04f 0810 	movge.w	r8, #16
 80066d8:	f7f9 ff1c 	bl	8000514 <__aeabi_ui2d>
 80066dc:	2d09      	cmp	r5, #9
 80066de:	4682      	mov	sl, r0
 80066e0:	468b      	mov	fp, r1
 80066e2:	dd13      	ble.n	800670c <_strtod_l+0x3dc>
 80066e4:	4b7b      	ldr	r3, [pc, #492]	; (80068d4 <_strtod_l+0x5a4>)
 80066e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80066ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80066ee:	f7f9 ff8b 	bl	8000608 <__aeabi_dmul>
 80066f2:	4682      	mov	sl, r0
 80066f4:	4648      	mov	r0, r9
 80066f6:	468b      	mov	fp, r1
 80066f8:	f7f9 ff0c 	bl	8000514 <__aeabi_ui2d>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4650      	mov	r0, sl
 8006702:	4659      	mov	r1, fp
 8006704:	f7f9 fdca 	bl	800029c <__adddf3>
 8006708:	4682      	mov	sl, r0
 800670a:	468b      	mov	fp, r1
 800670c:	2d0f      	cmp	r5, #15
 800670e:	dc38      	bgt.n	8006782 <_strtod_l+0x452>
 8006710:	9b06      	ldr	r3, [sp, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f43f ae50 	beq.w	80063b8 <_strtod_l+0x88>
 8006718:	dd24      	ble.n	8006764 <_strtod_l+0x434>
 800671a:	2b16      	cmp	r3, #22
 800671c:	dc0b      	bgt.n	8006736 <_strtod_l+0x406>
 800671e:	496d      	ldr	r1, [pc, #436]	; (80068d4 <_strtod_l+0x5a4>)
 8006720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006728:	4652      	mov	r2, sl
 800672a:	465b      	mov	r3, fp
 800672c:	f7f9 ff6c 	bl	8000608 <__aeabi_dmul>
 8006730:	4682      	mov	sl, r0
 8006732:	468b      	mov	fp, r1
 8006734:	e640      	b.n	80063b8 <_strtod_l+0x88>
 8006736:	9a06      	ldr	r2, [sp, #24]
 8006738:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800673c:	4293      	cmp	r3, r2
 800673e:	db20      	blt.n	8006782 <_strtod_l+0x452>
 8006740:	4c64      	ldr	r4, [pc, #400]	; (80068d4 <_strtod_l+0x5a4>)
 8006742:	f1c5 050f 	rsb	r5, r5, #15
 8006746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800674a:	4652      	mov	r2, sl
 800674c:	465b      	mov	r3, fp
 800674e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006752:	f7f9 ff59 	bl	8000608 <__aeabi_dmul>
 8006756:	9b06      	ldr	r3, [sp, #24]
 8006758:	1b5d      	subs	r5, r3, r5
 800675a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800675e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006762:	e7e3      	b.n	800672c <_strtod_l+0x3fc>
 8006764:	9b06      	ldr	r3, [sp, #24]
 8006766:	3316      	adds	r3, #22
 8006768:	db0b      	blt.n	8006782 <_strtod_l+0x452>
 800676a:	9b05      	ldr	r3, [sp, #20]
 800676c:	1b9e      	subs	r6, r3, r6
 800676e:	4b59      	ldr	r3, [pc, #356]	; (80068d4 <_strtod_l+0x5a4>)
 8006770:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006774:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006778:	4650      	mov	r0, sl
 800677a:	4659      	mov	r1, fp
 800677c:	f7fa f86e 	bl	800085c <__aeabi_ddiv>
 8006780:	e7d6      	b.n	8006730 <_strtod_l+0x400>
 8006782:	9b06      	ldr	r3, [sp, #24]
 8006784:	eba5 0808 	sub.w	r8, r5, r8
 8006788:	4498      	add	r8, r3
 800678a:	f1b8 0f00 	cmp.w	r8, #0
 800678e:	dd74      	ble.n	800687a <_strtod_l+0x54a>
 8006790:	f018 030f 	ands.w	r3, r8, #15
 8006794:	d00a      	beq.n	80067ac <_strtod_l+0x47c>
 8006796:	494f      	ldr	r1, [pc, #316]	; (80068d4 <_strtod_l+0x5a4>)
 8006798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800679c:	4652      	mov	r2, sl
 800679e:	465b      	mov	r3, fp
 80067a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067a4:	f7f9 ff30 	bl	8000608 <__aeabi_dmul>
 80067a8:	4682      	mov	sl, r0
 80067aa:	468b      	mov	fp, r1
 80067ac:	f038 080f 	bics.w	r8, r8, #15
 80067b0:	d04f      	beq.n	8006852 <_strtod_l+0x522>
 80067b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80067b6:	dd22      	ble.n	80067fe <_strtod_l+0x4ce>
 80067b8:	2500      	movs	r5, #0
 80067ba:	462e      	mov	r6, r5
 80067bc:	9507      	str	r5, [sp, #28]
 80067be:	9505      	str	r5, [sp, #20]
 80067c0:	2322      	movs	r3, #34	; 0x22
 80067c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80068dc <_strtod_l+0x5ac>
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	f04f 0a00 	mov.w	sl, #0
 80067cc:	9b07      	ldr	r3, [sp, #28]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f43f adf2 	beq.w	80063b8 <_strtod_l+0x88>
 80067d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80067d6:	4620      	mov	r0, r4
 80067d8:	f001 fe90 	bl	80084fc <_Bfree>
 80067dc:	9905      	ldr	r1, [sp, #20]
 80067de:	4620      	mov	r0, r4
 80067e0:	f001 fe8c 	bl	80084fc <_Bfree>
 80067e4:	4631      	mov	r1, r6
 80067e6:	4620      	mov	r0, r4
 80067e8:	f001 fe88 	bl	80084fc <_Bfree>
 80067ec:	9907      	ldr	r1, [sp, #28]
 80067ee:	4620      	mov	r0, r4
 80067f0:	f001 fe84 	bl	80084fc <_Bfree>
 80067f4:	4629      	mov	r1, r5
 80067f6:	4620      	mov	r0, r4
 80067f8:	f001 fe80 	bl	80084fc <_Bfree>
 80067fc:	e5dc      	b.n	80063b8 <_strtod_l+0x88>
 80067fe:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <_strtod_l+0x5a8>)
 8006800:	9304      	str	r3, [sp, #16]
 8006802:	2300      	movs	r3, #0
 8006804:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006808:	4650      	mov	r0, sl
 800680a:	4659      	mov	r1, fp
 800680c:	4699      	mov	r9, r3
 800680e:	f1b8 0f01 	cmp.w	r8, #1
 8006812:	dc21      	bgt.n	8006858 <_strtod_l+0x528>
 8006814:	b10b      	cbz	r3, 800681a <_strtod_l+0x4ea>
 8006816:	4682      	mov	sl, r0
 8006818:	468b      	mov	fp, r1
 800681a:	4b2f      	ldr	r3, [pc, #188]	; (80068d8 <_strtod_l+0x5a8>)
 800681c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006820:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006824:	4652      	mov	r2, sl
 8006826:	465b      	mov	r3, fp
 8006828:	e9d9 0100 	ldrd	r0, r1, [r9]
 800682c:	f7f9 feec 	bl	8000608 <__aeabi_dmul>
 8006830:	4b2a      	ldr	r3, [pc, #168]	; (80068dc <_strtod_l+0x5ac>)
 8006832:	460a      	mov	r2, r1
 8006834:	400b      	ands	r3, r1
 8006836:	492a      	ldr	r1, [pc, #168]	; (80068e0 <_strtod_l+0x5b0>)
 8006838:	428b      	cmp	r3, r1
 800683a:	4682      	mov	sl, r0
 800683c:	d8bc      	bhi.n	80067b8 <_strtod_l+0x488>
 800683e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006842:	428b      	cmp	r3, r1
 8006844:	bf86      	itte	hi
 8006846:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80068e4 <_strtod_l+0x5b4>
 800684a:	f04f 3aff 	movhi.w	sl, #4294967295
 800684e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006852:	2300      	movs	r3, #0
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	e084      	b.n	8006962 <_strtod_l+0x632>
 8006858:	f018 0f01 	tst.w	r8, #1
 800685c:	d005      	beq.n	800686a <_strtod_l+0x53a>
 800685e:	9b04      	ldr	r3, [sp, #16]
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	f7f9 fed0 	bl	8000608 <__aeabi_dmul>
 8006868:	2301      	movs	r3, #1
 800686a:	9a04      	ldr	r2, [sp, #16]
 800686c:	3208      	adds	r2, #8
 800686e:	f109 0901 	add.w	r9, r9, #1
 8006872:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006876:	9204      	str	r2, [sp, #16]
 8006878:	e7c9      	b.n	800680e <_strtod_l+0x4de>
 800687a:	d0ea      	beq.n	8006852 <_strtod_l+0x522>
 800687c:	f1c8 0800 	rsb	r8, r8, #0
 8006880:	f018 020f 	ands.w	r2, r8, #15
 8006884:	d00a      	beq.n	800689c <_strtod_l+0x56c>
 8006886:	4b13      	ldr	r3, [pc, #76]	; (80068d4 <_strtod_l+0x5a4>)
 8006888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800688c:	4650      	mov	r0, sl
 800688e:	4659      	mov	r1, fp
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f7f9 ffe2 	bl	800085c <__aeabi_ddiv>
 8006898:	4682      	mov	sl, r0
 800689a:	468b      	mov	fp, r1
 800689c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80068a0:	d0d7      	beq.n	8006852 <_strtod_l+0x522>
 80068a2:	f1b8 0f1f 	cmp.w	r8, #31
 80068a6:	dd1f      	ble.n	80068e8 <_strtod_l+0x5b8>
 80068a8:	2500      	movs	r5, #0
 80068aa:	462e      	mov	r6, r5
 80068ac:	9507      	str	r5, [sp, #28]
 80068ae:	9505      	str	r5, [sp, #20]
 80068b0:	2322      	movs	r3, #34	; 0x22
 80068b2:	f04f 0a00 	mov.w	sl, #0
 80068b6:	f04f 0b00 	mov.w	fp, #0
 80068ba:	6023      	str	r3, [r4, #0]
 80068bc:	e786      	b.n	80067cc <_strtod_l+0x49c>
 80068be:	bf00      	nop
 80068c0:	08009f3d 	.word	0x08009f3d
 80068c4:	08009f80 	.word	0x08009f80
 80068c8:	08009f35 	.word	0x08009f35
 80068cc:	0800a0c4 	.word	0x0800a0c4
 80068d0:	0800a370 	.word	0x0800a370
 80068d4:	0800a250 	.word	0x0800a250
 80068d8:	0800a228 	.word	0x0800a228
 80068dc:	7ff00000 	.word	0x7ff00000
 80068e0:	7ca00000 	.word	0x7ca00000
 80068e4:	7fefffff 	.word	0x7fefffff
 80068e8:	f018 0310 	ands.w	r3, r8, #16
 80068ec:	bf18      	it	ne
 80068ee:	236a      	movne	r3, #106	; 0x6a
 80068f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006ca0 <_strtod_l+0x970>
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	4650      	mov	r0, sl
 80068f8:	4659      	mov	r1, fp
 80068fa:	2300      	movs	r3, #0
 80068fc:	f018 0f01 	tst.w	r8, #1
 8006900:	d004      	beq.n	800690c <_strtod_l+0x5dc>
 8006902:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006906:	f7f9 fe7f 	bl	8000608 <__aeabi_dmul>
 800690a:	2301      	movs	r3, #1
 800690c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006910:	f109 0908 	add.w	r9, r9, #8
 8006914:	d1f2      	bne.n	80068fc <_strtod_l+0x5cc>
 8006916:	b10b      	cbz	r3, 800691c <_strtod_l+0x5ec>
 8006918:	4682      	mov	sl, r0
 800691a:	468b      	mov	fp, r1
 800691c:	9b04      	ldr	r3, [sp, #16]
 800691e:	b1c3      	cbz	r3, 8006952 <_strtod_l+0x622>
 8006920:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006924:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006928:	2b00      	cmp	r3, #0
 800692a:	4659      	mov	r1, fp
 800692c:	dd11      	ble.n	8006952 <_strtod_l+0x622>
 800692e:	2b1f      	cmp	r3, #31
 8006930:	f340 8124 	ble.w	8006b7c <_strtod_l+0x84c>
 8006934:	2b34      	cmp	r3, #52	; 0x34
 8006936:	bfde      	ittt	le
 8006938:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800693c:	f04f 33ff 	movle.w	r3, #4294967295
 8006940:	fa03 f202 	lslle.w	r2, r3, r2
 8006944:	f04f 0a00 	mov.w	sl, #0
 8006948:	bfcc      	ite	gt
 800694a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800694e:	ea02 0b01 	andle.w	fp, r2, r1
 8006952:	2200      	movs	r2, #0
 8006954:	2300      	movs	r3, #0
 8006956:	4650      	mov	r0, sl
 8006958:	4659      	mov	r1, fp
 800695a:	f7fa f8bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800695e:	2800      	cmp	r0, #0
 8006960:	d1a2      	bne.n	80068a8 <_strtod_l+0x578>
 8006962:	9b07      	ldr	r3, [sp, #28]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	9908      	ldr	r1, [sp, #32]
 8006968:	462b      	mov	r3, r5
 800696a:	463a      	mov	r2, r7
 800696c:	4620      	mov	r0, r4
 800696e:	f001 fe2d 	bl	80085cc <__s2b>
 8006972:	9007      	str	r0, [sp, #28]
 8006974:	2800      	cmp	r0, #0
 8006976:	f43f af1f 	beq.w	80067b8 <_strtod_l+0x488>
 800697a:	9b05      	ldr	r3, [sp, #20]
 800697c:	1b9e      	subs	r6, r3, r6
 800697e:	9b06      	ldr	r3, [sp, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	bfb4      	ite	lt
 8006984:	4633      	movlt	r3, r6
 8006986:	2300      	movge	r3, #0
 8006988:	930c      	str	r3, [sp, #48]	; 0x30
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	2500      	movs	r5, #0
 800698e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006992:	9312      	str	r3, [sp, #72]	; 0x48
 8006994:	462e      	mov	r6, r5
 8006996:	9b07      	ldr	r3, [sp, #28]
 8006998:	4620      	mov	r0, r4
 800699a:	6859      	ldr	r1, [r3, #4]
 800699c:	f001 fd6e 	bl	800847c <_Balloc>
 80069a0:	9005      	str	r0, [sp, #20]
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f43f af0c 	beq.w	80067c0 <_strtod_l+0x490>
 80069a8:	9b07      	ldr	r3, [sp, #28]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	3202      	adds	r2, #2
 80069ae:	f103 010c 	add.w	r1, r3, #12
 80069b2:	0092      	lsls	r2, r2, #2
 80069b4:	300c      	adds	r0, #12
 80069b6:	f001 fd53 	bl	8008460 <memcpy>
 80069ba:	ec4b ab10 	vmov	d0, sl, fp
 80069be:	aa1a      	add	r2, sp, #104	; 0x68
 80069c0:	a919      	add	r1, sp, #100	; 0x64
 80069c2:	4620      	mov	r0, r4
 80069c4:	f002 f948 	bl	8008c58 <__d2b>
 80069c8:	ec4b ab18 	vmov	d8, sl, fp
 80069cc:	9018      	str	r0, [sp, #96]	; 0x60
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f43f aef6 	beq.w	80067c0 <_strtod_l+0x490>
 80069d4:	2101      	movs	r1, #1
 80069d6:	4620      	mov	r0, r4
 80069d8:	f001 fe92 	bl	8008700 <__i2b>
 80069dc:	4606      	mov	r6, r0
 80069de:	2800      	cmp	r0, #0
 80069e0:	f43f aeee 	beq.w	80067c0 <_strtod_l+0x490>
 80069e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069e6:	9904      	ldr	r1, [sp, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bfab      	itete	ge
 80069ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80069ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80069f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80069f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80069f6:	bfac      	ite	ge
 80069f8:	eb03 0902 	addge.w	r9, r3, r2
 80069fc:	1ad7      	sublt	r7, r2, r3
 80069fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a00:	eba3 0801 	sub.w	r8, r3, r1
 8006a04:	4490      	add	r8, r2
 8006a06:	4ba1      	ldr	r3, [pc, #644]	; (8006c8c <_strtod_l+0x95c>)
 8006a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a0c:	4598      	cmp	r8, r3
 8006a0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a12:	f280 80c7 	bge.w	8006ba4 <_strtod_l+0x874>
 8006a16:	eba3 0308 	sub.w	r3, r3, r8
 8006a1a:	2b1f      	cmp	r3, #31
 8006a1c:	eba2 0203 	sub.w	r2, r2, r3
 8006a20:	f04f 0101 	mov.w	r1, #1
 8006a24:	f300 80b1 	bgt.w	8006b8a <_strtod_l+0x85a>
 8006a28:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8006a2e:	2300      	movs	r3, #0
 8006a30:	9308      	str	r3, [sp, #32]
 8006a32:	eb09 0802 	add.w	r8, r9, r2
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	45c1      	cmp	r9, r8
 8006a3a:	4417      	add	r7, r2
 8006a3c:	441f      	add	r7, r3
 8006a3e:	464b      	mov	r3, r9
 8006a40:	bfa8      	it	ge
 8006a42:	4643      	movge	r3, r8
 8006a44:	42bb      	cmp	r3, r7
 8006a46:	bfa8      	it	ge
 8006a48:	463b      	movge	r3, r7
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bfc2      	ittt	gt
 8006a4e:	eba8 0803 	subgt.w	r8, r8, r3
 8006a52:	1aff      	subgt	r7, r7, r3
 8006a54:	eba9 0903 	subgt.w	r9, r9, r3
 8006a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	dd17      	ble.n	8006a8e <_strtod_l+0x75e>
 8006a5e:	4631      	mov	r1, r6
 8006a60:	461a      	mov	r2, r3
 8006a62:	4620      	mov	r0, r4
 8006a64:	f001 ff0c 	bl	8008880 <__pow5mult>
 8006a68:	4606      	mov	r6, r0
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	f43f aea8 	beq.w	80067c0 <_strtod_l+0x490>
 8006a70:	4601      	mov	r1, r0
 8006a72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a74:	4620      	mov	r0, r4
 8006a76:	f001 fe59 	bl	800872c <__multiply>
 8006a7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f43f ae9f 	beq.w	80067c0 <_strtod_l+0x490>
 8006a82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a84:	4620      	mov	r0, r4
 8006a86:	f001 fd39 	bl	80084fc <_Bfree>
 8006a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a8c:	9318      	str	r3, [sp, #96]	; 0x60
 8006a8e:	f1b8 0f00 	cmp.w	r8, #0
 8006a92:	f300 808c 	bgt.w	8006bae <_strtod_l+0x87e>
 8006a96:	9b06      	ldr	r3, [sp, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dd08      	ble.n	8006aae <_strtod_l+0x77e>
 8006a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a9e:	9905      	ldr	r1, [sp, #20]
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f001 feed 	bl	8008880 <__pow5mult>
 8006aa6:	9005      	str	r0, [sp, #20]
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f43f ae89 	beq.w	80067c0 <_strtod_l+0x490>
 8006aae:	2f00      	cmp	r7, #0
 8006ab0:	dd08      	ble.n	8006ac4 <_strtod_l+0x794>
 8006ab2:	9905      	ldr	r1, [sp, #20]
 8006ab4:	463a      	mov	r2, r7
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f001 ff3c 	bl	8008934 <__lshift>
 8006abc:	9005      	str	r0, [sp, #20]
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f43f ae7e 	beq.w	80067c0 <_strtod_l+0x490>
 8006ac4:	f1b9 0f00 	cmp.w	r9, #0
 8006ac8:	dd08      	ble.n	8006adc <_strtod_l+0x7ac>
 8006aca:	4631      	mov	r1, r6
 8006acc:	464a      	mov	r2, r9
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f001 ff30 	bl	8008934 <__lshift>
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	f43f ae72 	beq.w	80067c0 <_strtod_l+0x490>
 8006adc:	9a05      	ldr	r2, [sp, #20]
 8006ade:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f001 ffb3 	bl	8008a4c <__mdiff>
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	f43f ae69 	beq.w	80067c0 <_strtod_l+0x490>
 8006aee:	68c3      	ldr	r3, [r0, #12]
 8006af0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006af2:	2300      	movs	r3, #0
 8006af4:	60c3      	str	r3, [r0, #12]
 8006af6:	4631      	mov	r1, r6
 8006af8:	f001 ff8c 	bl	8008a14 <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	da60      	bge.n	8006bc2 <_strtod_l+0x892>
 8006b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b02:	ea53 030a 	orrs.w	r3, r3, sl
 8006b06:	f040 8082 	bne.w	8006c0e <_strtod_l+0x8de>
 8006b0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d17d      	bne.n	8006c0e <_strtod_l+0x8de>
 8006b12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b16:	0d1b      	lsrs	r3, r3, #20
 8006b18:	051b      	lsls	r3, r3, #20
 8006b1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006b1e:	d976      	bls.n	8006c0e <_strtod_l+0x8de>
 8006b20:	696b      	ldr	r3, [r5, #20]
 8006b22:	b913      	cbnz	r3, 8006b2a <_strtod_l+0x7fa>
 8006b24:	692b      	ldr	r3, [r5, #16]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	dd71      	ble.n	8006c0e <_strtod_l+0x8de>
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f001 ff00 	bl	8008934 <__lshift>
 8006b34:	4631      	mov	r1, r6
 8006b36:	4605      	mov	r5, r0
 8006b38:	f001 ff6c 	bl	8008a14 <__mcmp>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	dd66      	ble.n	8006c0e <_strtod_l+0x8de>
 8006b40:	9904      	ldr	r1, [sp, #16]
 8006b42:	4a53      	ldr	r2, [pc, #332]	; (8006c90 <_strtod_l+0x960>)
 8006b44:	465b      	mov	r3, fp
 8006b46:	2900      	cmp	r1, #0
 8006b48:	f000 8081 	beq.w	8006c4e <_strtod_l+0x91e>
 8006b4c:	ea02 010b 	and.w	r1, r2, fp
 8006b50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006b54:	dc7b      	bgt.n	8006c4e <_strtod_l+0x91e>
 8006b56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006b5a:	f77f aea9 	ble.w	80068b0 <_strtod_l+0x580>
 8006b5e:	4b4d      	ldr	r3, [pc, #308]	; (8006c94 <_strtod_l+0x964>)
 8006b60:	4650      	mov	r0, sl
 8006b62:	4659      	mov	r1, fp
 8006b64:	2200      	movs	r2, #0
 8006b66:	f7f9 fd4f 	bl	8000608 <__aeabi_dmul>
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4303      	orrs	r3, r0
 8006b6e:	bf08      	it	eq
 8006b70:	2322      	moveq	r3, #34	; 0x22
 8006b72:	4682      	mov	sl, r0
 8006b74:	468b      	mov	fp, r1
 8006b76:	bf08      	it	eq
 8006b78:	6023      	streq	r3, [r4, #0]
 8006b7a:	e62b      	b.n	80067d4 <_strtod_l+0x4a4>
 8006b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	ea03 0a0a 	and.w	sl, r3, sl
 8006b88:	e6e3      	b.n	8006952 <_strtod_l+0x622>
 8006b8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006b8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006b92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006b96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006b9a:	fa01 f308 	lsl.w	r3, r1, r8
 8006b9e:	9308      	str	r3, [sp, #32]
 8006ba0:	910d      	str	r1, [sp, #52]	; 0x34
 8006ba2:	e746      	b.n	8006a32 <_strtod_l+0x702>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9308      	str	r3, [sp, #32]
 8006ba8:	2301      	movs	r3, #1
 8006baa:	930d      	str	r3, [sp, #52]	; 0x34
 8006bac:	e741      	b.n	8006a32 <_strtod_l+0x702>
 8006bae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f001 febe 	bl	8008934 <__lshift>
 8006bb8:	9018      	str	r0, [sp, #96]	; 0x60
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	f47f af6b 	bne.w	8006a96 <_strtod_l+0x766>
 8006bc0:	e5fe      	b.n	80067c0 <_strtod_l+0x490>
 8006bc2:	465f      	mov	r7, fp
 8006bc4:	d16e      	bne.n	8006ca4 <_strtod_l+0x974>
 8006bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bcc:	b342      	cbz	r2, 8006c20 <_strtod_l+0x8f0>
 8006bce:	4a32      	ldr	r2, [pc, #200]	; (8006c98 <_strtod_l+0x968>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d128      	bne.n	8006c26 <_strtod_l+0x8f6>
 8006bd4:	9b04      	ldr	r3, [sp, #16]
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	b1eb      	cbz	r3, 8006c16 <_strtod_l+0x8e6>
 8006bda:	4b2d      	ldr	r3, [pc, #180]	; (8006c90 <_strtod_l+0x960>)
 8006bdc:	403b      	ands	r3, r7
 8006bde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295
 8006be6:	d819      	bhi.n	8006c1c <_strtod_l+0x8ec>
 8006be8:	0d1b      	lsrs	r3, r3, #20
 8006bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	4299      	cmp	r1, r3
 8006bf4:	d117      	bne.n	8006c26 <_strtod_l+0x8f6>
 8006bf6:	4b29      	ldr	r3, [pc, #164]	; (8006c9c <_strtod_l+0x96c>)
 8006bf8:	429f      	cmp	r7, r3
 8006bfa:	d102      	bne.n	8006c02 <_strtod_l+0x8d2>
 8006bfc:	3101      	adds	r1, #1
 8006bfe:	f43f addf 	beq.w	80067c0 <_strtod_l+0x490>
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <_strtod_l+0x960>)
 8006c04:	403b      	ands	r3, r7
 8006c06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006c0a:	f04f 0a00 	mov.w	sl, #0
 8006c0e:	9b04      	ldr	r3, [sp, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1a4      	bne.n	8006b5e <_strtod_l+0x82e>
 8006c14:	e5de      	b.n	80067d4 <_strtod_l+0x4a4>
 8006c16:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1a:	e7ea      	b.n	8006bf2 <_strtod_l+0x8c2>
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	e7e8      	b.n	8006bf2 <_strtod_l+0x8c2>
 8006c20:	ea53 030a 	orrs.w	r3, r3, sl
 8006c24:	d08c      	beq.n	8006b40 <_strtod_l+0x810>
 8006c26:	9b08      	ldr	r3, [sp, #32]
 8006c28:	b1db      	cbz	r3, 8006c62 <_strtod_l+0x932>
 8006c2a:	423b      	tst	r3, r7
 8006c2c:	d0ef      	beq.n	8006c0e <_strtod_l+0x8de>
 8006c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c30:	9a04      	ldr	r2, [sp, #16]
 8006c32:	4650      	mov	r0, sl
 8006c34:	4659      	mov	r1, fp
 8006c36:	b1c3      	cbz	r3, 8006c6a <_strtod_l+0x93a>
 8006c38:	f7ff fb5e 	bl	80062f8 <sulp>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	ec51 0b18 	vmov	r0, r1, d8
 8006c44:	f7f9 fb2a 	bl	800029c <__adddf3>
 8006c48:	4682      	mov	sl, r0
 8006c4a:	468b      	mov	fp, r1
 8006c4c:	e7df      	b.n	8006c0e <_strtod_l+0x8de>
 8006c4e:	4013      	ands	r3, r2
 8006c50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006c54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006c58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006c5c:	f04f 3aff 	mov.w	sl, #4294967295
 8006c60:	e7d5      	b.n	8006c0e <_strtod_l+0x8de>
 8006c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c64:	ea13 0f0a 	tst.w	r3, sl
 8006c68:	e7e0      	b.n	8006c2c <_strtod_l+0x8fc>
 8006c6a:	f7ff fb45 	bl	80062f8 <sulp>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	ec51 0b18 	vmov	r0, r1, d8
 8006c76:	f7f9 fb0f 	bl	8000298 <__aeabi_dsub>
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4682      	mov	sl, r0
 8006c80:	468b      	mov	fp, r1
 8006c82:	f7f9 ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d0c1      	beq.n	8006c0e <_strtod_l+0x8de>
 8006c8a:	e611      	b.n	80068b0 <_strtod_l+0x580>
 8006c8c:	fffffc02 	.word	0xfffffc02
 8006c90:	7ff00000 	.word	0x7ff00000
 8006c94:	39500000 	.word	0x39500000
 8006c98:	000fffff 	.word	0x000fffff
 8006c9c:	7fefffff 	.word	0x7fefffff
 8006ca0:	08009f98 	.word	0x08009f98
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f002 f832 	bl	8008d10 <__ratio>
 8006cac:	ec59 8b10 	vmov	r8, r9, d0
 8006cb0:	ee10 0a10 	vmov	r0, s0
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 ff20 	bl	8000b00 <__aeabi_dcmple>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d07a      	beq.n	8006dba <_strtod_l+0xa8a>
 8006cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d04a      	beq.n	8006d60 <_strtod_l+0xa30>
 8006cca:	4b95      	ldr	r3, [pc, #596]	; (8006f20 <_strtod_l+0xbf0>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006cd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006f20 <_strtod_l+0xbf0>
 8006cd6:	f04f 0800 	mov.w	r8, #0
 8006cda:	4b92      	ldr	r3, [pc, #584]	; (8006f24 <_strtod_l+0xbf4>)
 8006cdc:	403b      	ands	r3, r7
 8006cde:	930d      	str	r3, [sp, #52]	; 0x34
 8006ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ce2:	4b91      	ldr	r3, [pc, #580]	; (8006f28 <_strtod_l+0xbf8>)
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	f040 80b0 	bne.w	8006e4a <_strtod_l+0xb1a>
 8006cea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006cee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006cf2:	ec4b ab10 	vmov	d0, sl, fp
 8006cf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006cfa:	f001 ff31 	bl	8008b60 <__ulp>
 8006cfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d02:	ec53 2b10 	vmov	r2, r3, d0
 8006d06:	f7f9 fc7f 	bl	8000608 <__aeabi_dmul>
 8006d0a:	4652      	mov	r2, sl
 8006d0c:	465b      	mov	r3, fp
 8006d0e:	f7f9 fac5 	bl	800029c <__adddf3>
 8006d12:	460b      	mov	r3, r1
 8006d14:	4983      	ldr	r1, [pc, #524]	; (8006f24 <_strtod_l+0xbf4>)
 8006d16:	4a85      	ldr	r2, [pc, #532]	; (8006f2c <_strtod_l+0xbfc>)
 8006d18:	4019      	ands	r1, r3
 8006d1a:	4291      	cmp	r1, r2
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	d960      	bls.n	8006de2 <_strtod_l+0xab2>
 8006d20:	ee18 3a90 	vmov	r3, s17
 8006d24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d104      	bne.n	8006d36 <_strtod_l+0xa06>
 8006d2c:	ee18 3a10 	vmov	r3, s16
 8006d30:	3301      	adds	r3, #1
 8006d32:	f43f ad45 	beq.w	80067c0 <_strtod_l+0x490>
 8006d36:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006f38 <_strtod_l+0xc08>
 8006d3a:	f04f 3aff 	mov.w	sl, #4294967295
 8006d3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d40:	4620      	mov	r0, r4
 8006d42:	f001 fbdb 	bl	80084fc <_Bfree>
 8006d46:	9905      	ldr	r1, [sp, #20]
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f001 fbd7 	bl	80084fc <_Bfree>
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4620      	mov	r0, r4
 8006d52:	f001 fbd3 	bl	80084fc <_Bfree>
 8006d56:	4629      	mov	r1, r5
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f001 fbcf 	bl	80084fc <_Bfree>
 8006d5e:	e61a      	b.n	8006996 <_strtod_l+0x666>
 8006d60:	f1ba 0f00 	cmp.w	sl, #0
 8006d64:	d11b      	bne.n	8006d9e <_strtod_l+0xa6e>
 8006d66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d6a:	b9f3      	cbnz	r3, 8006daa <_strtod_l+0xa7a>
 8006d6c:	4b6c      	ldr	r3, [pc, #432]	; (8006f20 <_strtod_l+0xbf0>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	4640      	mov	r0, r8
 8006d72:	4649      	mov	r1, r9
 8006d74:	f7f9 feba 	bl	8000aec <__aeabi_dcmplt>
 8006d78:	b9d0      	cbnz	r0, 8006db0 <_strtod_l+0xa80>
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	4b6c      	ldr	r3, [pc, #432]	; (8006f30 <_strtod_l+0xc00>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	f7f9 fc41 	bl	8000608 <__aeabi_dmul>
 8006d86:	4680      	mov	r8, r0
 8006d88:	4689      	mov	r9, r1
 8006d8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006d92:	9315      	str	r3, [sp, #84]	; 0x54
 8006d94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006d98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d9c:	e79d      	b.n	8006cda <_strtod_l+0x9aa>
 8006d9e:	f1ba 0f01 	cmp.w	sl, #1
 8006da2:	d102      	bne.n	8006daa <_strtod_l+0xa7a>
 8006da4:	2f00      	cmp	r7, #0
 8006da6:	f43f ad83 	beq.w	80068b0 <_strtod_l+0x580>
 8006daa:	4b62      	ldr	r3, [pc, #392]	; (8006f34 <_strtod_l+0xc04>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	e78e      	b.n	8006cce <_strtod_l+0x99e>
 8006db0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006f30 <_strtod_l+0xc00>
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	e7e7      	b.n	8006d8a <_strtod_l+0xa5a>
 8006dba:	4b5d      	ldr	r3, [pc, #372]	; (8006f30 <_strtod_l+0xc00>)
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f7f9 fc21 	bl	8000608 <__aeabi_dmul>
 8006dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc8:	4680      	mov	r8, r0
 8006dca:	4689      	mov	r9, r1
 8006dcc:	b933      	cbnz	r3, 8006ddc <_strtod_l+0xaac>
 8006dce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dd2:	900e      	str	r0, [sp, #56]	; 0x38
 8006dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006dda:	e7dd      	b.n	8006d98 <_strtod_l+0xa68>
 8006ddc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006de0:	e7f9      	b.n	8006dd6 <_strtod_l+0xaa6>
 8006de2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006de6:	9b04      	ldr	r3, [sp, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1a8      	bne.n	8006d3e <_strtod_l+0xa0e>
 8006dec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006df2:	0d1b      	lsrs	r3, r3, #20
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d1a1      	bne.n	8006d3e <_strtod_l+0xa0e>
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	f7f9 ff63 	bl	8000cc8 <__aeabi_d2lz>
 8006e02:	f7f9 fbd3 	bl	80005ac <__aeabi_l2d>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 fa43 	bl	8000298 <__aeabi_dsub>
 8006e12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e18:	ea43 030a 	orr.w	r3, r3, sl
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	4680      	mov	r8, r0
 8006e20:	4689      	mov	r9, r1
 8006e22:	d055      	beq.n	8006ed0 <_strtod_l+0xba0>
 8006e24:	a336      	add	r3, pc, #216	; (adr r3, 8006f00 <_strtod_l+0xbd0>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 fe5f 	bl	8000aec <__aeabi_dcmplt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f47f acd0 	bne.w	80067d4 <_strtod_l+0x4a4>
 8006e34:	a334      	add	r3, pc, #208	; (adr r3, 8006f08 <_strtod_l+0xbd8>)
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 fe73 	bl	8000b28 <__aeabi_dcmpgt>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	f43f af7b 	beq.w	8006d3e <_strtod_l+0xa0e>
 8006e48:	e4c4      	b.n	80067d4 <_strtod_l+0x4a4>
 8006e4a:	9b04      	ldr	r3, [sp, #16]
 8006e4c:	b333      	cbz	r3, 8006e9c <_strtod_l+0xb6c>
 8006e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e54:	d822      	bhi.n	8006e9c <_strtod_l+0xb6c>
 8006e56:	a32e      	add	r3, pc, #184	; (adr r3, 8006f10 <_strtod_l+0xbe0>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	4649      	mov	r1, r9
 8006e60:	f7f9 fe4e 	bl	8000b00 <__aeabi_dcmple>
 8006e64:	b1a0      	cbz	r0, 8006e90 <_strtod_l+0xb60>
 8006e66:	4649      	mov	r1, r9
 8006e68:	4640      	mov	r0, r8
 8006e6a:	f7f9 fea5 	bl	8000bb8 <__aeabi_d2uiz>
 8006e6e:	2801      	cmp	r0, #1
 8006e70:	bf38      	it	cc
 8006e72:	2001      	movcc	r0, #1
 8006e74:	f7f9 fb4e 	bl	8000514 <__aeabi_ui2d>
 8006e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e7a:	4680      	mov	r8, r0
 8006e7c:	4689      	mov	r9, r1
 8006e7e:	bb23      	cbnz	r3, 8006eca <_strtod_l+0xb9a>
 8006e80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e84:	9010      	str	r0, [sp, #64]	; 0x40
 8006e86:	9311      	str	r3, [sp, #68]	; 0x44
 8006e88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ea0:	eeb0 0a48 	vmov.f32	s0, s16
 8006ea4:	eef0 0a68 	vmov.f32	s1, s17
 8006ea8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006eac:	f001 fe58 	bl	8008b60 <__ulp>
 8006eb0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006eb4:	ec53 2b10 	vmov	r2, r3, d0
 8006eb8:	f7f9 fba6 	bl	8000608 <__aeabi_dmul>
 8006ebc:	ec53 2b18 	vmov	r2, r3, d8
 8006ec0:	f7f9 f9ec 	bl	800029c <__adddf3>
 8006ec4:	4682      	mov	sl, r0
 8006ec6:	468b      	mov	fp, r1
 8006ec8:	e78d      	b.n	8006de6 <_strtod_l+0xab6>
 8006eca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006ece:	e7db      	b.n	8006e88 <_strtod_l+0xb58>
 8006ed0:	a311      	add	r3, pc, #68	; (adr r3, 8006f18 <_strtod_l+0xbe8>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f7f9 fe09 	bl	8000aec <__aeabi_dcmplt>
 8006eda:	e7b2      	b.n	8006e42 <_strtod_l+0xb12>
 8006edc:	2300      	movs	r3, #0
 8006ede:	930a      	str	r3, [sp, #40]	; 0x28
 8006ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ee2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	f7ff ba6b 	b.w	80063c0 <_strtod_l+0x90>
 8006eea:	2a65      	cmp	r2, #101	; 0x65
 8006eec:	f43f ab5f 	beq.w	80065ae <_strtod_l+0x27e>
 8006ef0:	2a45      	cmp	r2, #69	; 0x45
 8006ef2:	f43f ab5c 	beq.w	80065ae <_strtod_l+0x27e>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f7ff bb94 	b.w	8006624 <_strtod_l+0x2f4>
 8006efc:	f3af 8000 	nop.w
 8006f00:	94a03595 	.word	0x94a03595
 8006f04:	3fdfffff 	.word	0x3fdfffff
 8006f08:	35afe535 	.word	0x35afe535
 8006f0c:	3fe00000 	.word	0x3fe00000
 8006f10:	ffc00000 	.word	0xffc00000
 8006f14:	41dfffff 	.word	0x41dfffff
 8006f18:	94a03595 	.word	0x94a03595
 8006f1c:	3fcfffff 	.word	0x3fcfffff
 8006f20:	3ff00000 	.word	0x3ff00000
 8006f24:	7ff00000 	.word	0x7ff00000
 8006f28:	7fe00000 	.word	0x7fe00000
 8006f2c:	7c9fffff 	.word	0x7c9fffff
 8006f30:	3fe00000 	.word	0x3fe00000
 8006f34:	bff00000 	.word	0xbff00000
 8006f38:	7fefffff 	.word	0x7fefffff

08006f3c <_strtod_r>:
 8006f3c:	4b01      	ldr	r3, [pc, #4]	; (8006f44 <_strtod_r+0x8>)
 8006f3e:	f7ff b9f7 	b.w	8006330 <_strtod_l>
 8006f42:	bf00      	nop
 8006f44:	20000084 	.word	0x20000084

08006f48 <_strtol_l.constprop.0>:
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f4e:	d001      	beq.n	8006f54 <_strtol_l.constprop.0+0xc>
 8006f50:	2b24      	cmp	r3, #36	; 0x24
 8006f52:	d906      	bls.n	8006f62 <_strtol_l.constprop.0+0x1a>
 8006f54:	f7fe fafe 	bl	8005554 <__errno>
 8006f58:	2316      	movs	r3, #22
 8006f5a:	6003      	str	r3, [r0, #0]
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007048 <_strtol_l.constprop.0+0x100>
 8006f66:	460d      	mov	r5, r1
 8006f68:	462e      	mov	r6, r5
 8006f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006f72:	f017 0708 	ands.w	r7, r7, #8
 8006f76:	d1f7      	bne.n	8006f68 <_strtol_l.constprop.0+0x20>
 8006f78:	2c2d      	cmp	r4, #45	; 0x2d
 8006f7a:	d132      	bne.n	8006fe2 <_strtol_l.constprop.0+0x9a>
 8006f7c:	782c      	ldrb	r4, [r5, #0]
 8006f7e:	2701      	movs	r7, #1
 8006f80:	1cb5      	adds	r5, r6, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d05b      	beq.n	800703e <_strtol_l.constprop.0+0xf6>
 8006f86:	2b10      	cmp	r3, #16
 8006f88:	d109      	bne.n	8006f9e <_strtol_l.constprop.0+0x56>
 8006f8a:	2c30      	cmp	r4, #48	; 0x30
 8006f8c:	d107      	bne.n	8006f9e <_strtol_l.constprop.0+0x56>
 8006f8e:	782c      	ldrb	r4, [r5, #0]
 8006f90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006f94:	2c58      	cmp	r4, #88	; 0x58
 8006f96:	d14d      	bne.n	8007034 <_strtol_l.constprop.0+0xec>
 8006f98:	786c      	ldrb	r4, [r5, #1]
 8006f9a:	2310      	movs	r3, #16
 8006f9c:	3502      	adds	r5, #2
 8006f9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006fa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fa6:	f04f 0c00 	mov.w	ip, #0
 8006faa:	fbb8 f9f3 	udiv	r9, r8, r3
 8006fae:	4666      	mov	r6, ip
 8006fb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006fb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006fb8:	f1be 0f09 	cmp.w	lr, #9
 8006fbc:	d816      	bhi.n	8006fec <_strtol_l.constprop.0+0xa4>
 8006fbe:	4674      	mov	r4, lr
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	dd24      	ble.n	800700e <_strtol_l.constprop.0+0xc6>
 8006fc4:	f1bc 0f00 	cmp.w	ip, #0
 8006fc8:	db1e      	blt.n	8007008 <_strtol_l.constprop.0+0xc0>
 8006fca:	45b1      	cmp	r9, r6
 8006fcc:	d31c      	bcc.n	8007008 <_strtol_l.constprop.0+0xc0>
 8006fce:	d101      	bne.n	8006fd4 <_strtol_l.constprop.0+0x8c>
 8006fd0:	45a2      	cmp	sl, r4
 8006fd2:	db19      	blt.n	8007008 <_strtol_l.constprop.0+0xc0>
 8006fd4:	fb06 4603 	mla	r6, r6, r3, r4
 8006fd8:	f04f 0c01 	mov.w	ip, #1
 8006fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fe0:	e7e8      	b.n	8006fb4 <_strtol_l.constprop.0+0x6c>
 8006fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8006fe4:	bf04      	itt	eq
 8006fe6:	782c      	ldrbeq	r4, [r5, #0]
 8006fe8:	1cb5      	addeq	r5, r6, #2
 8006fea:	e7ca      	b.n	8006f82 <_strtol_l.constprop.0+0x3a>
 8006fec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006ff0:	f1be 0f19 	cmp.w	lr, #25
 8006ff4:	d801      	bhi.n	8006ffa <_strtol_l.constprop.0+0xb2>
 8006ff6:	3c37      	subs	r4, #55	; 0x37
 8006ff8:	e7e2      	b.n	8006fc0 <_strtol_l.constprop.0+0x78>
 8006ffa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006ffe:	f1be 0f19 	cmp.w	lr, #25
 8007002:	d804      	bhi.n	800700e <_strtol_l.constprop.0+0xc6>
 8007004:	3c57      	subs	r4, #87	; 0x57
 8007006:	e7db      	b.n	8006fc0 <_strtol_l.constprop.0+0x78>
 8007008:	f04f 3cff 	mov.w	ip, #4294967295
 800700c:	e7e6      	b.n	8006fdc <_strtol_l.constprop.0+0x94>
 800700e:	f1bc 0f00 	cmp.w	ip, #0
 8007012:	da05      	bge.n	8007020 <_strtol_l.constprop.0+0xd8>
 8007014:	2322      	movs	r3, #34	; 0x22
 8007016:	6003      	str	r3, [r0, #0]
 8007018:	4646      	mov	r6, r8
 800701a:	b942      	cbnz	r2, 800702e <_strtol_l.constprop.0+0xe6>
 800701c:	4630      	mov	r0, r6
 800701e:	e79e      	b.n	8006f5e <_strtol_l.constprop.0+0x16>
 8007020:	b107      	cbz	r7, 8007024 <_strtol_l.constprop.0+0xdc>
 8007022:	4276      	negs	r6, r6
 8007024:	2a00      	cmp	r2, #0
 8007026:	d0f9      	beq.n	800701c <_strtol_l.constprop.0+0xd4>
 8007028:	f1bc 0f00 	cmp.w	ip, #0
 800702c:	d000      	beq.n	8007030 <_strtol_l.constprop.0+0xe8>
 800702e:	1e69      	subs	r1, r5, #1
 8007030:	6011      	str	r1, [r2, #0]
 8007032:	e7f3      	b.n	800701c <_strtol_l.constprop.0+0xd4>
 8007034:	2430      	movs	r4, #48	; 0x30
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1b1      	bne.n	8006f9e <_strtol_l.constprop.0+0x56>
 800703a:	2308      	movs	r3, #8
 800703c:	e7af      	b.n	8006f9e <_strtol_l.constprop.0+0x56>
 800703e:	2c30      	cmp	r4, #48	; 0x30
 8007040:	d0a5      	beq.n	8006f8e <_strtol_l.constprop.0+0x46>
 8007042:	230a      	movs	r3, #10
 8007044:	e7ab      	b.n	8006f9e <_strtol_l.constprop.0+0x56>
 8007046:	bf00      	nop
 8007048:	08009fc1 	.word	0x08009fc1

0800704c <_strtol_r>:
 800704c:	f7ff bf7c 	b.w	8006f48 <_strtol_l.constprop.0>

08007050 <quorem>:
 8007050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	6903      	ldr	r3, [r0, #16]
 8007056:	690c      	ldr	r4, [r1, #16]
 8007058:	42a3      	cmp	r3, r4
 800705a:	4607      	mov	r7, r0
 800705c:	f2c0 8081 	blt.w	8007162 <quorem+0x112>
 8007060:	3c01      	subs	r4, #1
 8007062:	f101 0814 	add.w	r8, r1, #20
 8007066:	f100 0514 	add.w	r5, r0, #20
 800706a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007074:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007078:	3301      	adds	r3, #1
 800707a:	429a      	cmp	r2, r3
 800707c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007080:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007084:	fbb2 f6f3 	udiv	r6, r2, r3
 8007088:	d331      	bcc.n	80070ee <quorem+0x9e>
 800708a:	f04f 0e00 	mov.w	lr, #0
 800708e:	4640      	mov	r0, r8
 8007090:	46ac      	mov	ip, r5
 8007092:	46f2      	mov	sl, lr
 8007094:	f850 2b04 	ldr.w	r2, [r0], #4
 8007098:	b293      	uxth	r3, r2
 800709a:	fb06 e303 	mla	r3, r6, r3, lr
 800709e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	ebaa 0303 	sub.w	r3, sl, r3
 80070a8:	f8dc a000 	ldr.w	sl, [ip]
 80070ac:	0c12      	lsrs	r2, r2, #16
 80070ae:	fa13 f38a 	uxtah	r3, r3, sl
 80070b2:	fb06 e202 	mla	r2, r6, r2, lr
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	9b00      	ldr	r3, [sp, #0]
 80070ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070be:	b292      	uxth	r2, r2
 80070c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80070cc:	4581      	cmp	r9, r0
 80070ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070d2:	f84c 3b04 	str.w	r3, [ip], #4
 80070d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070da:	d2db      	bcs.n	8007094 <quorem+0x44>
 80070dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80070e0:	b92b      	cbnz	r3, 80070ee <quorem+0x9e>
 80070e2:	9b01      	ldr	r3, [sp, #4]
 80070e4:	3b04      	subs	r3, #4
 80070e6:	429d      	cmp	r5, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	d32e      	bcc.n	800714a <quorem+0xfa>
 80070ec:	613c      	str	r4, [r7, #16]
 80070ee:	4638      	mov	r0, r7
 80070f0:	f001 fc90 	bl	8008a14 <__mcmp>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	db24      	blt.n	8007142 <quorem+0xf2>
 80070f8:	3601      	adds	r6, #1
 80070fa:	4628      	mov	r0, r5
 80070fc:	f04f 0c00 	mov.w	ip, #0
 8007100:	f858 2b04 	ldr.w	r2, [r8], #4
 8007104:	f8d0 e000 	ldr.w	lr, [r0]
 8007108:	b293      	uxth	r3, r2
 800710a:	ebac 0303 	sub.w	r3, ip, r3
 800710e:	0c12      	lsrs	r2, r2, #16
 8007110:	fa13 f38e 	uxtah	r3, r3, lr
 8007114:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007118:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800711c:	b29b      	uxth	r3, r3
 800711e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007122:	45c1      	cmp	r9, r8
 8007124:	f840 3b04 	str.w	r3, [r0], #4
 8007128:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800712c:	d2e8      	bcs.n	8007100 <quorem+0xb0>
 800712e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007136:	b922      	cbnz	r2, 8007142 <quorem+0xf2>
 8007138:	3b04      	subs	r3, #4
 800713a:	429d      	cmp	r5, r3
 800713c:	461a      	mov	r2, r3
 800713e:	d30a      	bcc.n	8007156 <quorem+0x106>
 8007140:	613c      	str	r4, [r7, #16]
 8007142:	4630      	mov	r0, r6
 8007144:	b003      	add	sp, #12
 8007146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	3b04      	subs	r3, #4
 800714e:	2a00      	cmp	r2, #0
 8007150:	d1cc      	bne.n	80070ec <quorem+0x9c>
 8007152:	3c01      	subs	r4, #1
 8007154:	e7c7      	b.n	80070e6 <quorem+0x96>
 8007156:	6812      	ldr	r2, [r2, #0]
 8007158:	3b04      	subs	r3, #4
 800715a:	2a00      	cmp	r2, #0
 800715c:	d1f0      	bne.n	8007140 <quorem+0xf0>
 800715e:	3c01      	subs	r4, #1
 8007160:	e7eb      	b.n	800713a <quorem+0xea>
 8007162:	2000      	movs	r0, #0
 8007164:	e7ee      	b.n	8007144 <quorem+0xf4>
	...

08007168 <_dtoa_r>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	ed2d 8b04 	vpush	{d8-d9}
 8007170:	ec57 6b10 	vmov	r6, r7, d0
 8007174:	b093      	sub	sp, #76	; 0x4c
 8007176:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007178:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800717c:	9106      	str	r1, [sp, #24]
 800717e:	ee10 aa10 	vmov	sl, s0
 8007182:	4604      	mov	r4, r0
 8007184:	9209      	str	r2, [sp, #36]	; 0x24
 8007186:	930c      	str	r3, [sp, #48]	; 0x30
 8007188:	46bb      	mov	fp, r7
 800718a:	b975      	cbnz	r5, 80071aa <_dtoa_r+0x42>
 800718c:	2010      	movs	r0, #16
 800718e:	f001 f94d 	bl	800842c <malloc>
 8007192:	4602      	mov	r2, r0
 8007194:	6260      	str	r0, [r4, #36]	; 0x24
 8007196:	b920      	cbnz	r0, 80071a2 <_dtoa_r+0x3a>
 8007198:	4ba7      	ldr	r3, [pc, #668]	; (8007438 <_dtoa_r+0x2d0>)
 800719a:	21ea      	movs	r1, #234	; 0xea
 800719c:	48a7      	ldr	r0, [pc, #668]	; (800743c <_dtoa_r+0x2d4>)
 800719e:	f002 f8bd 	bl	800931c <__assert_func>
 80071a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071a6:	6005      	str	r5, [r0, #0]
 80071a8:	60c5      	str	r5, [r0, #12]
 80071aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ac:	6819      	ldr	r1, [r3, #0]
 80071ae:	b151      	cbz	r1, 80071c6 <_dtoa_r+0x5e>
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	604a      	str	r2, [r1, #4]
 80071b4:	2301      	movs	r3, #1
 80071b6:	4093      	lsls	r3, r2
 80071b8:	608b      	str	r3, [r1, #8]
 80071ba:	4620      	mov	r0, r4
 80071bc:	f001 f99e 	bl	80084fc <_Bfree>
 80071c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	1e3b      	subs	r3, r7, #0
 80071c8:	bfaa      	itet	ge
 80071ca:	2300      	movge	r3, #0
 80071cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80071d0:	f8c8 3000 	strge.w	r3, [r8]
 80071d4:	4b9a      	ldr	r3, [pc, #616]	; (8007440 <_dtoa_r+0x2d8>)
 80071d6:	bfbc      	itt	lt
 80071d8:	2201      	movlt	r2, #1
 80071da:	f8c8 2000 	strlt.w	r2, [r8]
 80071de:	ea33 030b 	bics.w	r3, r3, fp
 80071e2:	d11b      	bne.n	800721c <_dtoa_r+0xb4>
 80071e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071f0:	4333      	orrs	r3, r6
 80071f2:	f000 8592 	beq.w	8007d1a <_dtoa_r+0xbb2>
 80071f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f8:	b963      	cbnz	r3, 8007214 <_dtoa_r+0xac>
 80071fa:	4b92      	ldr	r3, [pc, #584]	; (8007444 <_dtoa_r+0x2dc>)
 80071fc:	e022      	b.n	8007244 <_dtoa_r+0xdc>
 80071fe:	4b92      	ldr	r3, [pc, #584]	; (8007448 <_dtoa_r+0x2e0>)
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	3308      	adds	r3, #8
 8007204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	9801      	ldr	r0, [sp, #4]
 800720a:	b013      	add	sp, #76	; 0x4c
 800720c:	ecbd 8b04 	vpop	{d8-d9}
 8007210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007214:	4b8b      	ldr	r3, [pc, #556]	; (8007444 <_dtoa_r+0x2dc>)
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	3303      	adds	r3, #3
 800721a:	e7f3      	b.n	8007204 <_dtoa_r+0x9c>
 800721c:	2200      	movs	r2, #0
 800721e:	2300      	movs	r3, #0
 8007220:	4650      	mov	r0, sl
 8007222:	4659      	mov	r1, fp
 8007224:	f7f9 fc58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007228:	ec4b ab19 	vmov	d9, sl, fp
 800722c:	4680      	mov	r8, r0
 800722e:	b158      	cbz	r0, 8007248 <_dtoa_r+0xe0>
 8007230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007232:	2301      	movs	r3, #1
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 856b 	beq.w	8007d14 <_dtoa_r+0xbac>
 800723e:	4883      	ldr	r0, [pc, #524]	; (800744c <_dtoa_r+0x2e4>)
 8007240:	6018      	str	r0, [r3, #0]
 8007242:	1e43      	subs	r3, r0, #1
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	e7df      	b.n	8007208 <_dtoa_r+0xa0>
 8007248:	ec4b ab10 	vmov	d0, sl, fp
 800724c:	aa10      	add	r2, sp, #64	; 0x40
 800724e:	a911      	add	r1, sp, #68	; 0x44
 8007250:	4620      	mov	r0, r4
 8007252:	f001 fd01 	bl	8008c58 <__d2b>
 8007256:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800725a:	ee08 0a10 	vmov	s16, r0
 800725e:	2d00      	cmp	r5, #0
 8007260:	f000 8084 	beq.w	800736c <_dtoa_r+0x204>
 8007264:	ee19 3a90 	vmov	r3, s19
 8007268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800726c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007270:	4656      	mov	r6, sl
 8007272:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800727a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800727e:	4b74      	ldr	r3, [pc, #464]	; (8007450 <_dtoa_r+0x2e8>)
 8007280:	2200      	movs	r2, #0
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	f7f9 f807 	bl	8000298 <__aeabi_dsub>
 800728a:	a365      	add	r3, pc, #404	; (adr r3, 8007420 <_dtoa_r+0x2b8>)
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f7f9 f9ba 	bl	8000608 <__aeabi_dmul>
 8007294:	a364      	add	r3, pc, #400	; (adr r3, 8007428 <_dtoa_r+0x2c0>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f7f8 ffff 	bl	800029c <__adddf3>
 800729e:	4606      	mov	r6, r0
 80072a0:	4628      	mov	r0, r5
 80072a2:	460f      	mov	r7, r1
 80072a4:	f7f9 f946 	bl	8000534 <__aeabi_i2d>
 80072a8:	a361      	add	r3, pc, #388	; (adr r3, 8007430 <_dtoa_r+0x2c8>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f9 f9ab 	bl	8000608 <__aeabi_dmul>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4630      	mov	r0, r6
 80072b8:	4639      	mov	r1, r7
 80072ba:	f7f8 ffef 	bl	800029c <__adddf3>
 80072be:	4606      	mov	r6, r0
 80072c0:	460f      	mov	r7, r1
 80072c2:	f7f9 fc51 	bl	8000b68 <__aeabi_d2iz>
 80072c6:	2200      	movs	r2, #0
 80072c8:	9000      	str	r0, [sp, #0]
 80072ca:	2300      	movs	r3, #0
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	f7f9 fc0c 	bl	8000aec <__aeabi_dcmplt>
 80072d4:	b150      	cbz	r0, 80072ec <_dtoa_r+0x184>
 80072d6:	9800      	ldr	r0, [sp, #0]
 80072d8:	f7f9 f92c 	bl	8000534 <__aeabi_i2d>
 80072dc:	4632      	mov	r2, r6
 80072de:	463b      	mov	r3, r7
 80072e0:	f7f9 fbfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80072e4:	b910      	cbnz	r0, 80072ec <_dtoa_r+0x184>
 80072e6:	9b00      	ldr	r3, [sp, #0]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	9b00      	ldr	r3, [sp, #0]
 80072ee:	2b16      	cmp	r3, #22
 80072f0:	d85a      	bhi.n	80073a8 <_dtoa_r+0x240>
 80072f2:	9a00      	ldr	r2, [sp, #0]
 80072f4:	4b57      	ldr	r3, [pc, #348]	; (8007454 <_dtoa_r+0x2ec>)
 80072f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	ec51 0b19 	vmov	r0, r1, d9
 8007302:	f7f9 fbf3 	bl	8000aec <__aeabi_dcmplt>
 8007306:	2800      	cmp	r0, #0
 8007308:	d050      	beq.n	80073ac <_dtoa_r+0x244>
 800730a:	9b00      	ldr	r3, [sp, #0]
 800730c:	3b01      	subs	r3, #1
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	930b      	str	r3, [sp, #44]	; 0x2c
 8007314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007316:	1b5d      	subs	r5, r3, r5
 8007318:	1e6b      	subs	r3, r5, #1
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	bf45      	ittet	mi
 800731e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007322:	9304      	strmi	r3, [sp, #16]
 8007324:	2300      	movpl	r3, #0
 8007326:	2300      	movmi	r3, #0
 8007328:	bf4c      	ite	mi
 800732a:	9305      	strmi	r3, [sp, #20]
 800732c:	9304      	strpl	r3, [sp, #16]
 800732e:	9b00      	ldr	r3, [sp, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	db3d      	blt.n	80073b0 <_dtoa_r+0x248>
 8007334:	9b05      	ldr	r3, [sp, #20]
 8007336:	9a00      	ldr	r2, [sp, #0]
 8007338:	920a      	str	r2, [sp, #40]	; 0x28
 800733a:	4413      	add	r3, r2
 800733c:	9305      	str	r3, [sp, #20]
 800733e:	2300      	movs	r3, #0
 8007340:	9307      	str	r3, [sp, #28]
 8007342:	9b06      	ldr	r3, [sp, #24]
 8007344:	2b09      	cmp	r3, #9
 8007346:	f200 8089 	bhi.w	800745c <_dtoa_r+0x2f4>
 800734a:	2b05      	cmp	r3, #5
 800734c:	bfc4      	itt	gt
 800734e:	3b04      	subgt	r3, #4
 8007350:	9306      	strgt	r3, [sp, #24]
 8007352:	9b06      	ldr	r3, [sp, #24]
 8007354:	f1a3 0302 	sub.w	r3, r3, #2
 8007358:	bfcc      	ite	gt
 800735a:	2500      	movgt	r5, #0
 800735c:	2501      	movle	r5, #1
 800735e:	2b03      	cmp	r3, #3
 8007360:	f200 8087 	bhi.w	8007472 <_dtoa_r+0x30a>
 8007364:	e8df f003 	tbb	[pc, r3]
 8007368:	59383a2d 	.word	0x59383a2d
 800736c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007370:	441d      	add	r5, r3
 8007372:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007376:	2b20      	cmp	r3, #32
 8007378:	bfc1      	itttt	gt
 800737a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800737e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007382:	fa0b f303 	lslgt.w	r3, fp, r3
 8007386:	fa26 f000 	lsrgt.w	r0, r6, r0
 800738a:	bfda      	itte	le
 800738c:	f1c3 0320 	rsble	r3, r3, #32
 8007390:	fa06 f003 	lslle.w	r0, r6, r3
 8007394:	4318      	orrgt	r0, r3
 8007396:	f7f9 f8bd 	bl	8000514 <__aeabi_ui2d>
 800739a:	2301      	movs	r3, #1
 800739c:	4606      	mov	r6, r0
 800739e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073a2:	3d01      	subs	r5, #1
 80073a4:	930e      	str	r3, [sp, #56]	; 0x38
 80073a6:	e76a      	b.n	800727e <_dtoa_r+0x116>
 80073a8:	2301      	movs	r3, #1
 80073aa:	e7b2      	b.n	8007312 <_dtoa_r+0x1aa>
 80073ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80073ae:	e7b1      	b.n	8007314 <_dtoa_r+0x1ac>
 80073b0:	9b04      	ldr	r3, [sp, #16]
 80073b2:	9a00      	ldr	r2, [sp, #0]
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	9304      	str	r3, [sp, #16]
 80073b8:	4253      	negs	r3, r2
 80073ba:	9307      	str	r3, [sp, #28]
 80073bc:	2300      	movs	r3, #0
 80073be:	930a      	str	r3, [sp, #40]	; 0x28
 80073c0:	e7bf      	b.n	8007342 <_dtoa_r+0x1da>
 80073c2:	2300      	movs	r3, #0
 80073c4:	9308      	str	r3, [sp, #32]
 80073c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dc55      	bgt.n	8007478 <_dtoa_r+0x310>
 80073cc:	2301      	movs	r3, #1
 80073ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073d2:	461a      	mov	r2, r3
 80073d4:	9209      	str	r2, [sp, #36]	; 0x24
 80073d6:	e00c      	b.n	80073f2 <_dtoa_r+0x28a>
 80073d8:	2301      	movs	r3, #1
 80073da:	e7f3      	b.n	80073c4 <_dtoa_r+0x25c>
 80073dc:	2300      	movs	r3, #0
 80073de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e0:	9308      	str	r3, [sp, #32]
 80073e2:	9b00      	ldr	r3, [sp, #0]
 80073e4:	4413      	add	r3, r2
 80073e6:	9302      	str	r3, [sp, #8]
 80073e8:	3301      	adds	r3, #1
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	bfb8      	it	lt
 80073f0:	2301      	movlt	r3, #1
 80073f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073f4:	2200      	movs	r2, #0
 80073f6:	6042      	str	r2, [r0, #4]
 80073f8:	2204      	movs	r2, #4
 80073fa:	f102 0614 	add.w	r6, r2, #20
 80073fe:	429e      	cmp	r6, r3
 8007400:	6841      	ldr	r1, [r0, #4]
 8007402:	d93d      	bls.n	8007480 <_dtoa_r+0x318>
 8007404:	4620      	mov	r0, r4
 8007406:	f001 f839 	bl	800847c <_Balloc>
 800740a:	9001      	str	r0, [sp, #4]
 800740c:	2800      	cmp	r0, #0
 800740e:	d13b      	bne.n	8007488 <_dtoa_r+0x320>
 8007410:	4b11      	ldr	r3, [pc, #68]	; (8007458 <_dtoa_r+0x2f0>)
 8007412:	4602      	mov	r2, r0
 8007414:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007418:	e6c0      	b.n	800719c <_dtoa_r+0x34>
 800741a:	2301      	movs	r3, #1
 800741c:	e7df      	b.n	80073de <_dtoa_r+0x276>
 800741e:	bf00      	nop
 8007420:	636f4361 	.word	0x636f4361
 8007424:	3fd287a7 	.word	0x3fd287a7
 8007428:	8b60c8b3 	.word	0x8b60c8b3
 800742c:	3fc68a28 	.word	0x3fc68a28
 8007430:	509f79fb 	.word	0x509f79fb
 8007434:	3fd34413 	.word	0x3fd34413
 8007438:	0800a0ce 	.word	0x0800a0ce
 800743c:	0800a0e5 	.word	0x0800a0e5
 8007440:	7ff00000 	.word	0x7ff00000
 8007444:	0800a0ca 	.word	0x0800a0ca
 8007448:	0800a0c1 	.word	0x0800a0c1
 800744c:	08009f41 	.word	0x08009f41
 8007450:	3ff80000 	.word	0x3ff80000
 8007454:	0800a250 	.word	0x0800a250
 8007458:	0800a140 	.word	0x0800a140
 800745c:	2501      	movs	r5, #1
 800745e:	2300      	movs	r3, #0
 8007460:	9306      	str	r3, [sp, #24]
 8007462:	9508      	str	r5, [sp, #32]
 8007464:	f04f 33ff 	mov.w	r3, #4294967295
 8007468:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800746c:	2200      	movs	r2, #0
 800746e:	2312      	movs	r3, #18
 8007470:	e7b0      	b.n	80073d4 <_dtoa_r+0x26c>
 8007472:	2301      	movs	r3, #1
 8007474:	9308      	str	r3, [sp, #32]
 8007476:	e7f5      	b.n	8007464 <_dtoa_r+0x2fc>
 8007478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800747e:	e7b8      	b.n	80073f2 <_dtoa_r+0x28a>
 8007480:	3101      	adds	r1, #1
 8007482:	6041      	str	r1, [r0, #4]
 8007484:	0052      	lsls	r2, r2, #1
 8007486:	e7b8      	b.n	80073fa <_dtoa_r+0x292>
 8007488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800748a:	9a01      	ldr	r2, [sp, #4]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	2b0e      	cmp	r3, #14
 8007492:	f200 809d 	bhi.w	80075d0 <_dtoa_r+0x468>
 8007496:	2d00      	cmp	r5, #0
 8007498:	f000 809a 	beq.w	80075d0 <_dtoa_r+0x468>
 800749c:	9b00      	ldr	r3, [sp, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd32      	ble.n	8007508 <_dtoa_r+0x3a0>
 80074a2:	4ab7      	ldr	r2, [pc, #732]	; (8007780 <_dtoa_r+0x618>)
 80074a4:	f003 030f 	and.w	r3, r3, #15
 80074a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074b0:	9b00      	ldr	r3, [sp, #0]
 80074b2:	05d8      	lsls	r0, r3, #23
 80074b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80074b8:	d516      	bpl.n	80074e8 <_dtoa_r+0x380>
 80074ba:	4bb2      	ldr	r3, [pc, #712]	; (8007784 <_dtoa_r+0x61c>)
 80074bc:	ec51 0b19 	vmov	r0, r1, d9
 80074c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074c4:	f7f9 f9ca 	bl	800085c <__aeabi_ddiv>
 80074c8:	f007 070f 	and.w	r7, r7, #15
 80074cc:	4682      	mov	sl, r0
 80074ce:	468b      	mov	fp, r1
 80074d0:	2503      	movs	r5, #3
 80074d2:	4eac      	ldr	r6, [pc, #688]	; (8007784 <_dtoa_r+0x61c>)
 80074d4:	b957      	cbnz	r7, 80074ec <_dtoa_r+0x384>
 80074d6:	4642      	mov	r2, r8
 80074d8:	464b      	mov	r3, r9
 80074da:	4650      	mov	r0, sl
 80074dc:	4659      	mov	r1, fp
 80074de:	f7f9 f9bd 	bl	800085c <__aeabi_ddiv>
 80074e2:	4682      	mov	sl, r0
 80074e4:	468b      	mov	fp, r1
 80074e6:	e028      	b.n	800753a <_dtoa_r+0x3d2>
 80074e8:	2502      	movs	r5, #2
 80074ea:	e7f2      	b.n	80074d2 <_dtoa_r+0x36a>
 80074ec:	07f9      	lsls	r1, r7, #31
 80074ee:	d508      	bpl.n	8007502 <_dtoa_r+0x39a>
 80074f0:	4640      	mov	r0, r8
 80074f2:	4649      	mov	r1, r9
 80074f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074f8:	f7f9 f886 	bl	8000608 <__aeabi_dmul>
 80074fc:	3501      	adds	r5, #1
 80074fe:	4680      	mov	r8, r0
 8007500:	4689      	mov	r9, r1
 8007502:	107f      	asrs	r7, r7, #1
 8007504:	3608      	adds	r6, #8
 8007506:	e7e5      	b.n	80074d4 <_dtoa_r+0x36c>
 8007508:	f000 809b 	beq.w	8007642 <_dtoa_r+0x4da>
 800750c:	9b00      	ldr	r3, [sp, #0]
 800750e:	4f9d      	ldr	r7, [pc, #628]	; (8007784 <_dtoa_r+0x61c>)
 8007510:	425e      	negs	r6, r3
 8007512:	4b9b      	ldr	r3, [pc, #620]	; (8007780 <_dtoa_r+0x618>)
 8007514:	f006 020f 	and.w	r2, r6, #15
 8007518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	ec51 0b19 	vmov	r0, r1, d9
 8007524:	f7f9 f870 	bl	8000608 <__aeabi_dmul>
 8007528:	1136      	asrs	r6, r6, #4
 800752a:	4682      	mov	sl, r0
 800752c:	468b      	mov	fp, r1
 800752e:	2300      	movs	r3, #0
 8007530:	2502      	movs	r5, #2
 8007532:	2e00      	cmp	r6, #0
 8007534:	d17a      	bne.n	800762c <_dtoa_r+0x4c4>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1d3      	bne.n	80074e2 <_dtoa_r+0x37a>
 800753a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8082 	beq.w	8007646 <_dtoa_r+0x4de>
 8007542:	4b91      	ldr	r3, [pc, #580]	; (8007788 <_dtoa_r+0x620>)
 8007544:	2200      	movs	r2, #0
 8007546:	4650      	mov	r0, sl
 8007548:	4659      	mov	r1, fp
 800754a:	f7f9 facf 	bl	8000aec <__aeabi_dcmplt>
 800754e:	2800      	cmp	r0, #0
 8007550:	d079      	beq.n	8007646 <_dtoa_r+0x4de>
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d076      	beq.n	8007646 <_dtoa_r+0x4de>
 8007558:	9b02      	ldr	r3, [sp, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	dd36      	ble.n	80075cc <_dtoa_r+0x464>
 800755e:	9b00      	ldr	r3, [sp, #0]
 8007560:	4650      	mov	r0, sl
 8007562:	4659      	mov	r1, fp
 8007564:	1e5f      	subs	r7, r3, #1
 8007566:	2200      	movs	r2, #0
 8007568:	4b88      	ldr	r3, [pc, #544]	; (800778c <_dtoa_r+0x624>)
 800756a:	f7f9 f84d 	bl	8000608 <__aeabi_dmul>
 800756e:	9e02      	ldr	r6, [sp, #8]
 8007570:	4682      	mov	sl, r0
 8007572:	468b      	mov	fp, r1
 8007574:	3501      	adds	r5, #1
 8007576:	4628      	mov	r0, r5
 8007578:	f7f8 ffdc 	bl	8000534 <__aeabi_i2d>
 800757c:	4652      	mov	r2, sl
 800757e:	465b      	mov	r3, fp
 8007580:	f7f9 f842 	bl	8000608 <__aeabi_dmul>
 8007584:	4b82      	ldr	r3, [pc, #520]	; (8007790 <_dtoa_r+0x628>)
 8007586:	2200      	movs	r2, #0
 8007588:	f7f8 fe88 	bl	800029c <__adddf3>
 800758c:	46d0      	mov	r8, sl
 800758e:	46d9      	mov	r9, fp
 8007590:	4682      	mov	sl, r0
 8007592:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007596:	2e00      	cmp	r6, #0
 8007598:	d158      	bne.n	800764c <_dtoa_r+0x4e4>
 800759a:	4b7e      	ldr	r3, [pc, #504]	; (8007794 <_dtoa_r+0x62c>)
 800759c:	2200      	movs	r2, #0
 800759e:	4640      	mov	r0, r8
 80075a0:	4649      	mov	r1, r9
 80075a2:	f7f8 fe79 	bl	8000298 <__aeabi_dsub>
 80075a6:	4652      	mov	r2, sl
 80075a8:	465b      	mov	r3, fp
 80075aa:	4680      	mov	r8, r0
 80075ac:	4689      	mov	r9, r1
 80075ae:	f7f9 fabb 	bl	8000b28 <__aeabi_dcmpgt>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	f040 8295 	bne.w	8007ae2 <_dtoa_r+0x97a>
 80075b8:	4652      	mov	r2, sl
 80075ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075be:	4640      	mov	r0, r8
 80075c0:	4649      	mov	r1, r9
 80075c2:	f7f9 fa93 	bl	8000aec <__aeabi_dcmplt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f040 8289 	bne.w	8007ade <_dtoa_r+0x976>
 80075cc:	ec5b ab19 	vmov	sl, fp, d9
 80075d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f2c0 8148 	blt.w	8007868 <_dtoa_r+0x700>
 80075d8:	9a00      	ldr	r2, [sp, #0]
 80075da:	2a0e      	cmp	r2, #14
 80075dc:	f300 8144 	bgt.w	8007868 <_dtoa_r+0x700>
 80075e0:	4b67      	ldr	r3, [pc, #412]	; (8007780 <_dtoa_r+0x618>)
 80075e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f280 80d5 	bge.w	800779c <_dtoa_r+0x634>
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f300 80d1 	bgt.w	800779c <_dtoa_r+0x634>
 80075fa:	f040 826f 	bne.w	8007adc <_dtoa_r+0x974>
 80075fe:	4b65      	ldr	r3, [pc, #404]	; (8007794 <_dtoa_r+0x62c>)
 8007600:	2200      	movs	r2, #0
 8007602:	4640      	mov	r0, r8
 8007604:	4649      	mov	r1, r9
 8007606:	f7f8 ffff 	bl	8000608 <__aeabi_dmul>
 800760a:	4652      	mov	r2, sl
 800760c:	465b      	mov	r3, fp
 800760e:	f7f9 fa81 	bl	8000b14 <__aeabi_dcmpge>
 8007612:	9e03      	ldr	r6, [sp, #12]
 8007614:	4637      	mov	r7, r6
 8007616:	2800      	cmp	r0, #0
 8007618:	f040 8245 	bne.w	8007aa6 <_dtoa_r+0x93e>
 800761c:	9d01      	ldr	r5, [sp, #4]
 800761e:	2331      	movs	r3, #49	; 0x31
 8007620:	f805 3b01 	strb.w	r3, [r5], #1
 8007624:	9b00      	ldr	r3, [sp, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	e240      	b.n	8007aae <_dtoa_r+0x946>
 800762c:	07f2      	lsls	r2, r6, #31
 800762e:	d505      	bpl.n	800763c <_dtoa_r+0x4d4>
 8007630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007634:	f7f8 ffe8 	bl	8000608 <__aeabi_dmul>
 8007638:	3501      	adds	r5, #1
 800763a:	2301      	movs	r3, #1
 800763c:	1076      	asrs	r6, r6, #1
 800763e:	3708      	adds	r7, #8
 8007640:	e777      	b.n	8007532 <_dtoa_r+0x3ca>
 8007642:	2502      	movs	r5, #2
 8007644:	e779      	b.n	800753a <_dtoa_r+0x3d2>
 8007646:	9f00      	ldr	r7, [sp, #0]
 8007648:	9e03      	ldr	r6, [sp, #12]
 800764a:	e794      	b.n	8007576 <_dtoa_r+0x40e>
 800764c:	9901      	ldr	r1, [sp, #4]
 800764e:	4b4c      	ldr	r3, [pc, #304]	; (8007780 <_dtoa_r+0x618>)
 8007650:	4431      	add	r1, r6
 8007652:	910d      	str	r1, [sp, #52]	; 0x34
 8007654:	9908      	ldr	r1, [sp, #32]
 8007656:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800765a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800765e:	2900      	cmp	r1, #0
 8007660:	d043      	beq.n	80076ea <_dtoa_r+0x582>
 8007662:	494d      	ldr	r1, [pc, #308]	; (8007798 <_dtoa_r+0x630>)
 8007664:	2000      	movs	r0, #0
 8007666:	f7f9 f8f9 	bl	800085c <__aeabi_ddiv>
 800766a:	4652      	mov	r2, sl
 800766c:	465b      	mov	r3, fp
 800766e:	f7f8 fe13 	bl	8000298 <__aeabi_dsub>
 8007672:	9d01      	ldr	r5, [sp, #4]
 8007674:	4682      	mov	sl, r0
 8007676:	468b      	mov	fp, r1
 8007678:	4649      	mov	r1, r9
 800767a:	4640      	mov	r0, r8
 800767c:	f7f9 fa74 	bl	8000b68 <__aeabi_d2iz>
 8007680:	4606      	mov	r6, r0
 8007682:	f7f8 ff57 	bl	8000534 <__aeabi_i2d>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4640      	mov	r0, r8
 800768c:	4649      	mov	r1, r9
 800768e:	f7f8 fe03 	bl	8000298 <__aeabi_dsub>
 8007692:	3630      	adds	r6, #48	; 0x30
 8007694:	f805 6b01 	strb.w	r6, [r5], #1
 8007698:	4652      	mov	r2, sl
 800769a:	465b      	mov	r3, fp
 800769c:	4680      	mov	r8, r0
 800769e:	4689      	mov	r9, r1
 80076a0:	f7f9 fa24 	bl	8000aec <__aeabi_dcmplt>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d163      	bne.n	8007770 <_dtoa_r+0x608>
 80076a8:	4642      	mov	r2, r8
 80076aa:	464b      	mov	r3, r9
 80076ac:	4936      	ldr	r1, [pc, #216]	; (8007788 <_dtoa_r+0x620>)
 80076ae:	2000      	movs	r0, #0
 80076b0:	f7f8 fdf2 	bl	8000298 <__aeabi_dsub>
 80076b4:	4652      	mov	r2, sl
 80076b6:	465b      	mov	r3, fp
 80076b8:	f7f9 fa18 	bl	8000aec <__aeabi_dcmplt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f040 80b5 	bne.w	800782c <_dtoa_r+0x6c4>
 80076c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076c4:	429d      	cmp	r5, r3
 80076c6:	d081      	beq.n	80075cc <_dtoa_r+0x464>
 80076c8:	4b30      	ldr	r3, [pc, #192]	; (800778c <_dtoa_r+0x624>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	4650      	mov	r0, sl
 80076ce:	4659      	mov	r1, fp
 80076d0:	f7f8 ff9a 	bl	8000608 <__aeabi_dmul>
 80076d4:	4b2d      	ldr	r3, [pc, #180]	; (800778c <_dtoa_r+0x624>)
 80076d6:	4682      	mov	sl, r0
 80076d8:	468b      	mov	fp, r1
 80076da:	4640      	mov	r0, r8
 80076dc:	4649      	mov	r1, r9
 80076de:	2200      	movs	r2, #0
 80076e0:	f7f8 ff92 	bl	8000608 <__aeabi_dmul>
 80076e4:	4680      	mov	r8, r0
 80076e6:	4689      	mov	r9, r1
 80076e8:	e7c6      	b.n	8007678 <_dtoa_r+0x510>
 80076ea:	4650      	mov	r0, sl
 80076ec:	4659      	mov	r1, fp
 80076ee:	f7f8 ff8b 	bl	8000608 <__aeabi_dmul>
 80076f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076f4:	9d01      	ldr	r5, [sp, #4]
 80076f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076f8:	4682      	mov	sl, r0
 80076fa:	468b      	mov	fp, r1
 80076fc:	4649      	mov	r1, r9
 80076fe:	4640      	mov	r0, r8
 8007700:	f7f9 fa32 	bl	8000b68 <__aeabi_d2iz>
 8007704:	4606      	mov	r6, r0
 8007706:	f7f8 ff15 	bl	8000534 <__aeabi_i2d>
 800770a:	3630      	adds	r6, #48	; 0x30
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4640      	mov	r0, r8
 8007712:	4649      	mov	r1, r9
 8007714:	f7f8 fdc0 	bl	8000298 <__aeabi_dsub>
 8007718:	f805 6b01 	strb.w	r6, [r5], #1
 800771c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800771e:	429d      	cmp	r5, r3
 8007720:	4680      	mov	r8, r0
 8007722:	4689      	mov	r9, r1
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	d124      	bne.n	8007774 <_dtoa_r+0x60c>
 800772a:	4b1b      	ldr	r3, [pc, #108]	; (8007798 <_dtoa_r+0x630>)
 800772c:	4650      	mov	r0, sl
 800772e:	4659      	mov	r1, fp
 8007730:	f7f8 fdb4 	bl	800029c <__adddf3>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4640      	mov	r0, r8
 800773a:	4649      	mov	r1, r9
 800773c:	f7f9 f9f4 	bl	8000b28 <__aeabi_dcmpgt>
 8007740:	2800      	cmp	r0, #0
 8007742:	d173      	bne.n	800782c <_dtoa_r+0x6c4>
 8007744:	4652      	mov	r2, sl
 8007746:	465b      	mov	r3, fp
 8007748:	4913      	ldr	r1, [pc, #76]	; (8007798 <_dtoa_r+0x630>)
 800774a:	2000      	movs	r0, #0
 800774c:	f7f8 fda4 	bl	8000298 <__aeabi_dsub>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4640      	mov	r0, r8
 8007756:	4649      	mov	r1, r9
 8007758:	f7f9 f9c8 	bl	8000aec <__aeabi_dcmplt>
 800775c:	2800      	cmp	r0, #0
 800775e:	f43f af35 	beq.w	80075cc <_dtoa_r+0x464>
 8007762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007764:	1e6b      	subs	r3, r5, #1
 8007766:	930f      	str	r3, [sp, #60]	; 0x3c
 8007768:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800776c:	2b30      	cmp	r3, #48	; 0x30
 800776e:	d0f8      	beq.n	8007762 <_dtoa_r+0x5fa>
 8007770:	9700      	str	r7, [sp, #0]
 8007772:	e049      	b.n	8007808 <_dtoa_r+0x6a0>
 8007774:	4b05      	ldr	r3, [pc, #20]	; (800778c <_dtoa_r+0x624>)
 8007776:	f7f8 ff47 	bl	8000608 <__aeabi_dmul>
 800777a:	4680      	mov	r8, r0
 800777c:	4689      	mov	r9, r1
 800777e:	e7bd      	b.n	80076fc <_dtoa_r+0x594>
 8007780:	0800a250 	.word	0x0800a250
 8007784:	0800a228 	.word	0x0800a228
 8007788:	3ff00000 	.word	0x3ff00000
 800778c:	40240000 	.word	0x40240000
 8007790:	401c0000 	.word	0x401c0000
 8007794:	40140000 	.word	0x40140000
 8007798:	3fe00000 	.word	0x3fe00000
 800779c:	9d01      	ldr	r5, [sp, #4]
 800779e:	4656      	mov	r6, sl
 80077a0:	465f      	mov	r7, fp
 80077a2:	4642      	mov	r2, r8
 80077a4:	464b      	mov	r3, r9
 80077a6:	4630      	mov	r0, r6
 80077a8:	4639      	mov	r1, r7
 80077aa:	f7f9 f857 	bl	800085c <__aeabi_ddiv>
 80077ae:	f7f9 f9db 	bl	8000b68 <__aeabi_d2iz>
 80077b2:	4682      	mov	sl, r0
 80077b4:	f7f8 febe 	bl	8000534 <__aeabi_i2d>
 80077b8:	4642      	mov	r2, r8
 80077ba:	464b      	mov	r3, r9
 80077bc:	f7f8 ff24 	bl	8000608 <__aeabi_dmul>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4630      	mov	r0, r6
 80077c6:	4639      	mov	r1, r7
 80077c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80077cc:	f7f8 fd64 	bl	8000298 <__aeabi_dsub>
 80077d0:	f805 6b01 	strb.w	r6, [r5], #1
 80077d4:	9e01      	ldr	r6, [sp, #4]
 80077d6:	9f03      	ldr	r7, [sp, #12]
 80077d8:	1bae      	subs	r6, r5, r6
 80077da:	42b7      	cmp	r7, r6
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	d135      	bne.n	800784e <_dtoa_r+0x6e6>
 80077e2:	f7f8 fd5b 	bl	800029c <__adddf3>
 80077e6:	4642      	mov	r2, r8
 80077e8:	464b      	mov	r3, r9
 80077ea:	4606      	mov	r6, r0
 80077ec:	460f      	mov	r7, r1
 80077ee:	f7f9 f99b 	bl	8000b28 <__aeabi_dcmpgt>
 80077f2:	b9d0      	cbnz	r0, 800782a <_dtoa_r+0x6c2>
 80077f4:	4642      	mov	r2, r8
 80077f6:	464b      	mov	r3, r9
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f9 f96c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007800:	b110      	cbz	r0, 8007808 <_dtoa_r+0x6a0>
 8007802:	f01a 0f01 	tst.w	sl, #1
 8007806:	d110      	bne.n	800782a <_dtoa_r+0x6c2>
 8007808:	4620      	mov	r0, r4
 800780a:	ee18 1a10 	vmov	r1, s16
 800780e:	f000 fe75 	bl	80084fc <_Bfree>
 8007812:	2300      	movs	r3, #0
 8007814:	9800      	ldr	r0, [sp, #0]
 8007816:	702b      	strb	r3, [r5, #0]
 8007818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800781a:	3001      	adds	r0, #1
 800781c:	6018      	str	r0, [r3, #0]
 800781e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007820:	2b00      	cmp	r3, #0
 8007822:	f43f acf1 	beq.w	8007208 <_dtoa_r+0xa0>
 8007826:	601d      	str	r5, [r3, #0]
 8007828:	e4ee      	b.n	8007208 <_dtoa_r+0xa0>
 800782a:	9f00      	ldr	r7, [sp, #0]
 800782c:	462b      	mov	r3, r5
 800782e:	461d      	mov	r5, r3
 8007830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007834:	2a39      	cmp	r2, #57	; 0x39
 8007836:	d106      	bne.n	8007846 <_dtoa_r+0x6de>
 8007838:	9a01      	ldr	r2, [sp, #4]
 800783a:	429a      	cmp	r2, r3
 800783c:	d1f7      	bne.n	800782e <_dtoa_r+0x6c6>
 800783e:	9901      	ldr	r1, [sp, #4]
 8007840:	2230      	movs	r2, #48	; 0x30
 8007842:	3701      	adds	r7, #1
 8007844:	700a      	strb	r2, [r1, #0]
 8007846:	781a      	ldrb	r2, [r3, #0]
 8007848:	3201      	adds	r2, #1
 800784a:	701a      	strb	r2, [r3, #0]
 800784c:	e790      	b.n	8007770 <_dtoa_r+0x608>
 800784e:	4ba6      	ldr	r3, [pc, #664]	; (8007ae8 <_dtoa_r+0x980>)
 8007850:	2200      	movs	r2, #0
 8007852:	f7f8 fed9 	bl	8000608 <__aeabi_dmul>
 8007856:	2200      	movs	r2, #0
 8007858:	2300      	movs	r3, #0
 800785a:	4606      	mov	r6, r0
 800785c:	460f      	mov	r7, r1
 800785e:	f7f9 f93b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007862:	2800      	cmp	r0, #0
 8007864:	d09d      	beq.n	80077a2 <_dtoa_r+0x63a>
 8007866:	e7cf      	b.n	8007808 <_dtoa_r+0x6a0>
 8007868:	9a08      	ldr	r2, [sp, #32]
 800786a:	2a00      	cmp	r2, #0
 800786c:	f000 80d7 	beq.w	8007a1e <_dtoa_r+0x8b6>
 8007870:	9a06      	ldr	r2, [sp, #24]
 8007872:	2a01      	cmp	r2, #1
 8007874:	f300 80ba 	bgt.w	80079ec <_dtoa_r+0x884>
 8007878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800787a:	2a00      	cmp	r2, #0
 800787c:	f000 80b2 	beq.w	80079e4 <_dtoa_r+0x87c>
 8007880:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007884:	9e07      	ldr	r6, [sp, #28]
 8007886:	9d04      	ldr	r5, [sp, #16]
 8007888:	9a04      	ldr	r2, [sp, #16]
 800788a:	441a      	add	r2, r3
 800788c:	9204      	str	r2, [sp, #16]
 800788e:	9a05      	ldr	r2, [sp, #20]
 8007890:	2101      	movs	r1, #1
 8007892:	441a      	add	r2, r3
 8007894:	4620      	mov	r0, r4
 8007896:	9205      	str	r2, [sp, #20]
 8007898:	f000 ff32 	bl	8008700 <__i2b>
 800789c:	4607      	mov	r7, r0
 800789e:	2d00      	cmp	r5, #0
 80078a0:	dd0c      	ble.n	80078bc <_dtoa_r+0x754>
 80078a2:	9b05      	ldr	r3, [sp, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dd09      	ble.n	80078bc <_dtoa_r+0x754>
 80078a8:	42ab      	cmp	r3, r5
 80078aa:	9a04      	ldr	r2, [sp, #16]
 80078ac:	bfa8      	it	ge
 80078ae:	462b      	movge	r3, r5
 80078b0:	1ad2      	subs	r2, r2, r3
 80078b2:	9204      	str	r2, [sp, #16]
 80078b4:	9a05      	ldr	r2, [sp, #20]
 80078b6:	1aed      	subs	r5, r5, r3
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	9b07      	ldr	r3, [sp, #28]
 80078be:	b31b      	cbz	r3, 8007908 <_dtoa_r+0x7a0>
 80078c0:	9b08      	ldr	r3, [sp, #32]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80af 	beq.w	8007a26 <_dtoa_r+0x8be>
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	dd13      	ble.n	80078f4 <_dtoa_r+0x78c>
 80078cc:	4639      	mov	r1, r7
 80078ce:	4632      	mov	r2, r6
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 ffd5 	bl	8008880 <__pow5mult>
 80078d6:	ee18 2a10 	vmov	r2, s16
 80078da:	4601      	mov	r1, r0
 80078dc:	4607      	mov	r7, r0
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 ff24 	bl	800872c <__multiply>
 80078e4:	ee18 1a10 	vmov	r1, s16
 80078e8:	4680      	mov	r8, r0
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 fe06 	bl	80084fc <_Bfree>
 80078f0:	ee08 8a10 	vmov	s16, r8
 80078f4:	9b07      	ldr	r3, [sp, #28]
 80078f6:	1b9a      	subs	r2, r3, r6
 80078f8:	d006      	beq.n	8007908 <_dtoa_r+0x7a0>
 80078fa:	ee18 1a10 	vmov	r1, s16
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 ffbe 	bl	8008880 <__pow5mult>
 8007904:	ee08 0a10 	vmov	s16, r0
 8007908:	2101      	movs	r1, #1
 800790a:	4620      	mov	r0, r4
 800790c:	f000 fef8 	bl	8008700 <__i2b>
 8007910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007912:	2b00      	cmp	r3, #0
 8007914:	4606      	mov	r6, r0
 8007916:	f340 8088 	ble.w	8007a2a <_dtoa_r+0x8c2>
 800791a:	461a      	mov	r2, r3
 800791c:	4601      	mov	r1, r0
 800791e:	4620      	mov	r0, r4
 8007920:	f000 ffae 	bl	8008880 <__pow5mult>
 8007924:	9b06      	ldr	r3, [sp, #24]
 8007926:	2b01      	cmp	r3, #1
 8007928:	4606      	mov	r6, r0
 800792a:	f340 8081 	ble.w	8007a30 <_dtoa_r+0x8c8>
 800792e:	f04f 0800 	mov.w	r8, #0
 8007932:	6933      	ldr	r3, [r6, #16]
 8007934:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007938:	6918      	ldr	r0, [r3, #16]
 800793a:	f000 fe91 	bl	8008660 <__hi0bits>
 800793e:	f1c0 0020 	rsb	r0, r0, #32
 8007942:	9b05      	ldr	r3, [sp, #20]
 8007944:	4418      	add	r0, r3
 8007946:	f010 001f 	ands.w	r0, r0, #31
 800794a:	f000 8092 	beq.w	8007a72 <_dtoa_r+0x90a>
 800794e:	f1c0 0320 	rsb	r3, r0, #32
 8007952:	2b04      	cmp	r3, #4
 8007954:	f340 808a 	ble.w	8007a6c <_dtoa_r+0x904>
 8007958:	f1c0 001c 	rsb	r0, r0, #28
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	4403      	add	r3, r0
 8007960:	9304      	str	r3, [sp, #16]
 8007962:	9b05      	ldr	r3, [sp, #20]
 8007964:	4403      	add	r3, r0
 8007966:	4405      	add	r5, r0
 8007968:	9305      	str	r3, [sp, #20]
 800796a:	9b04      	ldr	r3, [sp, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	dd07      	ble.n	8007980 <_dtoa_r+0x818>
 8007970:	ee18 1a10 	vmov	r1, s16
 8007974:	461a      	mov	r2, r3
 8007976:	4620      	mov	r0, r4
 8007978:	f000 ffdc 	bl	8008934 <__lshift>
 800797c:	ee08 0a10 	vmov	s16, r0
 8007980:	9b05      	ldr	r3, [sp, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	dd05      	ble.n	8007992 <_dtoa_r+0x82a>
 8007986:	4631      	mov	r1, r6
 8007988:	461a      	mov	r2, r3
 800798a:	4620      	mov	r0, r4
 800798c:	f000 ffd2 	bl	8008934 <__lshift>
 8007990:	4606      	mov	r6, r0
 8007992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d06e      	beq.n	8007a76 <_dtoa_r+0x90e>
 8007998:	ee18 0a10 	vmov	r0, s16
 800799c:	4631      	mov	r1, r6
 800799e:	f001 f839 	bl	8008a14 <__mcmp>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	da67      	bge.n	8007a76 <_dtoa_r+0x90e>
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	ee18 1a10 	vmov	r1, s16
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	220a      	movs	r2, #10
 80079b2:	2300      	movs	r3, #0
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 fdc3 	bl	8008540 <__multadd>
 80079ba:	9b08      	ldr	r3, [sp, #32]
 80079bc:	ee08 0a10 	vmov	s16, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 81b1 	beq.w	8007d28 <_dtoa_r+0xbc0>
 80079c6:	2300      	movs	r3, #0
 80079c8:	4639      	mov	r1, r7
 80079ca:	220a      	movs	r2, #10
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 fdb7 	bl	8008540 <__multadd>
 80079d2:	9b02      	ldr	r3, [sp, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	4607      	mov	r7, r0
 80079d8:	f300 808e 	bgt.w	8007af8 <_dtoa_r+0x990>
 80079dc:	9b06      	ldr	r3, [sp, #24]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	dc51      	bgt.n	8007a86 <_dtoa_r+0x91e>
 80079e2:	e089      	b.n	8007af8 <_dtoa_r+0x990>
 80079e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079ea:	e74b      	b.n	8007884 <_dtoa_r+0x71c>
 80079ec:	9b03      	ldr	r3, [sp, #12]
 80079ee:	1e5e      	subs	r6, r3, #1
 80079f0:	9b07      	ldr	r3, [sp, #28]
 80079f2:	42b3      	cmp	r3, r6
 80079f4:	bfbf      	itttt	lt
 80079f6:	9b07      	ldrlt	r3, [sp, #28]
 80079f8:	9607      	strlt	r6, [sp, #28]
 80079fa:	1af2      	sublt	r2, r6, r3
 80079fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80079fe:	bfb6      	itet	lt
 8007a00:	189b      	addlt	r3, r3, r2
 8007a02:	1b9e      	subge	r6, r3, r6
 8007a04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	bfb8      	it	lt
 8007a0a:	2600      	movlt	r6, #0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bfb7      	itett	lt
 8007a10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007a14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007a18:	1a9d      	sublt	r5, r3, r2
 8007a1a:	2300      	movlt	r3, #0
 8007a1c:	e734      	b.n	8007888 <_dtoa_r+0x720>
 8007a1e:	9e07      	ldr	r6, [sp, #28]
 8007a20:	9d04      	ldr	r5, [sp, #16]
 8007a22:	9f08      	ldr	r7, [sp, #32]
 8007a24:	e73b      	b.n	800789e <_dtoa_r+0x736>
 8007a26:	9a07      	ldr	r2, [sp, #28]
 8007a28:	e767      	b.n	80078fa <_dtoa_r+0x792>
 8007a2a:	9b06      	ldr	r3, [sp, #24]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	dc18      	bgt.n	8007a62 <_dtoa_r+0x8fa>
 8007a30:	f1ba 0f00 	cmp.w	sl, #0
 8007a34:	d115      	bne.n	8007a62 <_dtoa_r+0x8fa>
 8007a36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a3a:	b993      	cbnz	r3, 8007a62 <_dtoa_r+0x8fa>
 8007a3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a40:	0d1b      	lsrs	r3, r3, #20
 8007a42:	051b      	lsls	r3, r3, #20
 8007a44:	b183      	cbz	r3, 8007a68 <_dtoa_r+0x900>
 8007a46:	9b04      	ldr	r3, [sp, #16]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	9b05      	ldr	r3, [sp, #20]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	9305      	str	r3, [sp, #20]
 8007a52:	f04f 0801 	mov.w	r8, #1
 8007a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f47f af6a 	bne.w	8007932 <_dtoa_r+0x7ca>
 8007a5e:	2001      	movs	r0, #1
 8007a60:	e76f      	b.n	8007942 <_dtoa_r+0x7da>
 8007a62:	f04f 0800 	mov.w	r8, #0
 8007a66:	e7f6      	b.n	8007a56 <_dtoa_r+0x8ee>
 8007a68:	4698      	mov	r8, r3
 8007a6a:	e7f4      	b.n	8007a56 <_dtoa_r+0x8ee>
 8007a6c:	f43f af7d 	beq.w	800796a <_dtoa_r+0x802>
 8007a70:	4618      	mov	r0, r3
 8007a72:	301c      	adds	r0, #28
 8007a74:	e772      	b.n	800795c <_dtoa_r+0x7f4>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	dc37      	bgt.n	8007aec <_dtoa_r+0x984>
 8007a7c:	9b06      	ldr	r3, [sp, #24]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	dd34      	ble.n	8007aec <_dtoa_r+0x984>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	9302      	str	r3, [sp, #8]
 8007a86:	9b02      	ldr	r3, [sp, #8]
 8007a88:	b96b      	cbnz	r3, 8007aa6 <_dtoa_r+0x93e>
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	2205      	movs	r2, #5
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 fd56 	bl	8008540 <__multadd>
 8007a94:	4601      	mov	r1, r0
 8007a96:	4606      	mov	r6, r0
 8007a98:	ee18 0a10 	vmov	r0, s16
 8007a9c:	f000 ffba 	bl	8008a14 <__mcmp>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f73f adbb 	bgt.w	800761c <_dtoa_r+0x4b4>
 8007aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa8:	9d01      	ldr	r5, [sp, #4]
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	f04f 0800 	mov.w	r8, #0
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f000 fd21 	bl	80084fc <_Bfree>
 8007aba:	2f00      	cmp	r7, #0
 8007abc:	f43f aea4 	beq.w	8007808 <_dtoa_r+0x6a0>
 8007ac0:	f1b8 0f00 	cmp.w	r8, #0
 8007ac4:	d005      	beq.n	8007ad2 <_dtoa_r+0x96a>
 8007ac6:	45b8      	cmp	r8, r7
 8007ac8:	d003      	beq.n	8007ad2 <_dtoa_r+0x96a>
 8007aca:	4641      	mov	r1, r8
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 fd15 	bl	80084fc <_Bfree>
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 fd11 	bl	80084fc <_Bfree>
 8007ada:	e695      	b.n	8007808 <_dtoa_r+0x6a0>
 8007adc:	2600      	movs	r6, #0
 8007ade:	4637      	mov	r7, r6
 8007ae0:	e7e1      	b.n	8007aa6 <_dtoa_r+0x93e>
 8007ae2:	9700      	str	r7, [sp, #0]
 8007ae4:	4637      	mov	r7, r6
 8007ae6:	e599      	b.n	800761c <_dtoa_r+0x4b4>
 8007ae8:	40240000 	.word	0x40240000
 8007aec:	9b08      	ldr	r3, [sp, #32]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 80ca 	beq.w	8007c88 <_dtoa_r+0xb20>
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	9302      	str	r3, [sp, #8]
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	dd05      	ble.n	8007b08 <_dtoa_r+0x9a0>
 8007afc:	4639      	mov	r1, r7
 8007afe:	462a      	mov	r2, r5
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 ff17 	bl	8008934 <__lshift>
 8007b06:	4607      	mov	r7, r0
 8007b08:	f1b8 0f00 	cmp.w	r8, #0
 8007b0c:	d05b      	beq.n	8007bc6 <_dtoa_r+0xa5e>
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fcb3 	bl	800847c <_Balloc>
 8007b16:	4605      	mov	r5, r0
 8007b18:	b928      	cbnz	r0, 8007b26 <_dtoa_r+0x9be>
 8007b1a:	4b87      	ldr	r3, [pc, #540]	; (8007d38 <_dtoa_r+0xbd0>)
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b22:	f7ff bb3b 	b.w	800719c <_dtoa_r+0x34>
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	3202      	adds	r2, #2
 8007b2a:	0092      	lsls	r2, r2, #2
 8007b2c:	f107 010c 	add.w	r1, r7, #12
 8007b30:	300c      	adds	r0, #12
 8007b32:	f000 fc95 	bl	8008460 <memcpy>
 8007b36:	2201      	movs	r2, #1
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 fefa 	bl	8008934 <__lshift>
 8007b40:	9b01      	ldr	r3, [sp, #4]
 8007b42:	f103 0901 	add.w	r9, r3, #1
 8007b46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	9305      	str	r3, [sp, #20]
 8007b4e:	f00a 0301 	and.w	r3, sl, #1
 8007b52:	46b8      	mov	r8, r7
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	4607      	mov	r7, r0
 8007b58:	4631      	mov	r1, r6
 8007b5a:	ee18 0a10 	vmov	r0, s16
 8007b5e:	f7ff fa77 	bl	8007050 <quorem>
 8007b62:	4641      	mov	r1, r8
 8007b64:	9002      	str	r0, [sp, #8]
 8007b66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b6a:	ee18 0a10 	vmov	r0, s16
 8007b6e:	f000 ff51 	bl	8008a14 <__mcmp>
 8007b72:	463a      	mov	r2, r7
 8007b74:	9003      	str	r0, [sp, #12]
 8007b76:	4631      	mov	r1, r6
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 ff67 	bl	8008a4c <__mdiff>
 8007b7e:	68c2      	ldr	r2, [r0, #12]
 8007b80:	f109 3bff 	add.w	fp, r9, #4294967295
 8007b84:	4605      	mov	r5, r0
 8007b86:	bb02      	cbnz	r2, 8007bca <_dtoa_r+0xa62>
 8007b88:	4601      	mov	r1, r0
 8007b8a:	ee18 0a10 	vmov	r0, s16
 8007b8e:	f000 ff41 	bl	8008a14 <__mcmp>
 8007b92:	4602      	mov	r2, r0
 8007b94:	4629      	mov	r1, r5
 8007b96:	4620      	mov	r0, r4
 8007b98:	9207      	str	r2, [sp, #28]
 8007b9a:	f000 fcaf 	bl	80084fc <_Bfree>
 8007b9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007ba2:	ea43 0102 	orr.w	r1, r3, r2
 8007ba6:	9b04      	ldr	r3, [sp, #16]
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	464d      	mov	r5, r9
 8007bac:	d10f      	bne.n	8007bce <_dtoa_r+0xa66>
 8007bae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bb2:	d02a      	beq.n	8007c0a <_dtoa_r+0xaa2>
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dd02      	ble.n	8007bc0 <_dtoa_r+0xa58>
 8007bba:	9b02      	ldr	r3, [sp, #8]
 8007bbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007bc0:	f88b a000 	strb.w	sl, [fp]
 8007bc4:	e775      	b.n	8007ab2 <_dtoa_r+0x94a>
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	e7ba      	b.n	8007b40 <_dtoa_r+0x9d8>
 8007bca:	2201      	movs	r2, #1
 8007bcc:	e7e2      	b.n	8007b94 <_dtoa_r+0xa2c>
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	db04      	blt.n	8007bde <_dtoa_r+0xa76>
 8007bd4:	9906      	ldr	r1, [sp, #24]
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	9904      	ldr	r1, [sp, #16]
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	d122      	bne.n	8007c24 <_dtoa_r+0xabc>
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	ddee      	ble.n	8007bc0 <_dtoa_r+0xa58>
 8007be2:	ee18 1a10 	vmov	r1, s16
 8007be6:	2201      	movs	r2, #1
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 fea3 	bl	8008934 <__lshift>
 8007bee:	4631      	mov	r1, r6
 8007bf0:	ee08 0a10 	vmov	s16, r0
 8007bf4:	f000 ff0e 	bl	8008a14 <__mcmp>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	dc03      	bgt.n	8007c04 <_dtoa_r+0xa9c>
 8007bfc:	d1e0      	bne.n	8007bc0 <_dtoa_r+0xa58>
 8007bfe:	f01a 0f01 	tst.w	sl, #1
 8007c02:	d0dd      	beq.n	8007bc0 <_dtoa_r+0xa58>
 8007c04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c08:	d1d7      	bne.n	8007bba <_dtoa_r+0xa52>
 8007c0a:	2339      	movs	r3, #57	; 0x39
 8007c0c:	f88b 3000 	strb.w	r3, [fp]
 8007c10:	462b      	mov	r3, r5
 8007c12:	461d      	mov	r5, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c1a:	2a39      	cmp	r2, #57	; 0x39
 8007c1c:	d071      	beq.n	8007d02 <_dtoa_r+0xb9a>
 8007c1e:	3201      	adds	r2, #1
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e746      	b.n	8007ab2 <_dtoa_r+0x94a>
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	dd07      	ble.n	8007c38 <_dtoa_r+0xad0>
 8007c28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c2c:	d0ed      	beq.n	8007c0a <_dtoa_r+0xaa2>
 8007c2e:	f10a 0301 	add.w	r3, sl, #1
 8007c32:	f88b 3000 	strb.w	r3, [fp]
 8007c36:	e73c      	b.n	8007ab2 <_dtoa_r+0x94a>
 8007c38:	9b05      	ldr	r3, [sp, #20]
 8007c3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007c3e:	4599      	cmp	r9, r3
 8007c40:	d047      	beq.n	8007cd2 <_dtoa_r+0xb6a>
 8007c42:	ee18 1a10 	vmov	r1, s16
 8007c46:	2300      	movs	r3, #0
 8007c48:	220a      	movs	r2, #10
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 fc78 	bl	8008540 <__multadd>
 8007c50:	45b8      	cmp	r8, r7
 8007c52:	ee08 0a10 	vmov	s16, r0
 8007c56:	f04f 0300 	mov.w	r3, #0
 8007c5a:	f04f 020a 	mov.w	r2, #10
 8007c5e:	4641      	mov	r1, r8
 8007c60:	4620      	mov	r0, r4
 8007c62:	d106      	bne.n	8007c72 <_dtoa_r+0xb0a>
 8007c64:	f000 fc6c 	bl	8008540 <__multadd>
 8007c68:	4680      	mov	r8, r0
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	f109 0901 	add.w	r9, r9, #1
 8007c70:	e772      	b.n	8007b58 <_dtoa_r+0x9f0>
 8007c72:	f000 fc65 	bl	8008540 <__multadd>
 8007c76:	4639      	mov	r1, r7
 8007c78:	4680      	mov	r8, r0
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	220a      	movs	r2, #10
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 fc5e 	bl	8008540 <__multadd>
 8007c84:	4607      	mov	r7, r0
 8007c86:	e7f1      	b.n	8007c6c <_dtoa_r+0xb04>
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	9302      	str	r3, [sp, #8]
 8007c8c:	9d01      	ldr	r5, [sp, #4]
 8007c8e:	ee18 0a10 	vmov	r0, s16
 8007c92:	4631      	mov	r1, r6
 8007c94:	f7ff f9dc 	bl	8007050 <quorem>
 8007c98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c9c:	9b01      	ldr	r3, [sp, #4]
 8007c9e:	f805 ab01 	strb.w	sl, [r5], #1
 8007ca2:	1aea      	subs	r2, r5, r3
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	dd09      	ble.n	8007cbe <_dtoa_r+0xb56>
 8007caa:	ee18 1a10 	vmov	r1, s16
 8007cae:	2300      	movs	r3, #0
 8007cb0:	220a      	movs	r2, #10
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 fc44 	bl	8008540 <__multadd>
 8007cb8:	ee08 0a10 	vmov	s16, r0
 8007cbc:	e7e7      	b.n	8007c8e <_dtoa_r+0xb26>
 8007cbe:	9b02      	ldr	r3, [sp, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bfc8      	it	gt
 8007cc4:	461d      	movgt	r5, r3
 8007cc6:	9b01      	ldr	r3, [sp, #4]
 8007cc8:	bfd8      	it	le
 8007cca:	2501      	movle	r5, #1
 8007ccc:	441d      	add	r5, r3
 8007cce:	f04f 0800 	mov.w	r8, #0
 8007cd2:	ee18 1a10 	vmov	r1, s16
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fe2b 	bl	8008934 <__lshift>
 8007cde:	4631      	mov	r1, r6
 8007ce0:	ee08 0a10 	vmov	s16, r0
 8007ce4:	f000 fe96 	bl	8008a14 <__mcmp>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	dc91      	bgt.n	8007c10 <_dtoa_r+0xaa8>
 8007cec:	d102      	bne.n	8007cf4 <_dtoa_r+0xb8c>
 8007cee:	f01a 0f01 	tst.w	sl, #1
 8007cf2:	d18d      	bne.n	8007c10 <_dtoa_r+0xaa8>
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	461d      	mov	r5, r3
 8007cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cfc:	2a30      	cmp	r2, #48	; 0x30
 8007cfe:	d0fa      	beq.n	8007cf6 <_dtoa_r+0xb8e>
 8007d00:	e6d7      	b.n	8007ab2 <_dtoa_r+0x94a>
 8007d02:	9a01      	ldr	r2, [sp, #4]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d184      	bne.n	8007c12 <_dtoa_r+0xaaa>
 8007d08:	9b00      	ldr	r3, [sp, #0]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	2331      	movs	r3, #49	; 0x31
 8007d10:	7013      	strb	r3, [r2, #0]
 8007d12:	e6ce      	b.n	8007ab2 <_dtoa_r+0x94a>
 8007d14:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <_dtoa_r+0xbd4>)
 8007d16:	f7ff ba95 	b.w	8007244 <_dtoa_r+0xdc>
 8007d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f47f aa6e 	bne.w	80071fe <_dtoa_r+0x96>
 8007d22:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <_dtoa_r+0xbd8>)
 8007d24:	f7ff ba8e 	b.w	8007244 <_dtoa_r+0xdc>
 8007d28:	9b02      	ldr	r3, [sp, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	dcae      	bgt.n	8007c8c <_dtoa_r+0xb24>
 8007d2e:	9b06      	ldr	r3, [sp, #24]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	f73f aea8 	bgt.w	8007a86 <_dtoa_r+0x91e>
 8007d36:	e7a9      	b.n	8007c8c <_dtoa_r+0xb24>
 8007d38:	0800a140 	.word	0x0800a140
 8007d3c:	08009f40 	.word	0x08009f40
 8007d40:	0800a0c1 	.word	0x0800a0c1

08007d44 <rshift>:
 8007d44:	6903      	ldr	r3, [r0, #16]
 8007d46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d52:	f100 0414 	add.w	r4, r0, #20
 8007d56:	dd45      	ble.n	8007de4 <rshift+0xa0>
 8007d58:	f011 011f 	ands.w	r1, r1, #31
 8007d5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d64:	d10c      	bne.n	8007d80 <rshift+0x3c>
 8007d66:	f100 0710 	add.w	r7, r0, #16
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	42b1      	cmp	r1, r6
 8007d6e:	d334      	bcc.n	8007dda <rshift+0x96>
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	1eea      	subs	r2, r5, #3
 8007d76:	4296      	cmp	r6, r2
 8007d78:	bf38      	it	cc
 8007d7a:	2300      	movcc	r3, #0
 8007d7c:	4423      	add	r3, r4
 8007d7e:	e015      	b.n	8007dac <rshift+0x68>
 8007d80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d84:	f1c1 0820 	rsb	r8, r1, #32
 8007d88:	40cf      	lsrs	r7, r1
 8007d8a:	f105 0e04 	add.w	lr, r5, #4
 8007d8e:	46a1      	mov	r9, r4
 8007d90:	4576      	cmp	r6, lr
 8007d92:	46f4      	mov	ip, lr
 8007d94:	d815      	bhi.n	8007dc2 <rshift+0x7e>
 8007d96:	1a9a      	subs	r2, r3, r2
 8007d98:	0092      	lsls	r2, r2, #2
 8007d9a:	3a04      	subs	r2, #4
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	42ae      	cmp	r6, r5
 8007da0:	bf38      	it	cc
 8007da2:	2200      	movcc	r2, #0
 8007da4:	18a3      	adds	r3, r4, r2
 8007da6:	50a7      	str	r7, [r4, r2]
 8007da8:	b107      	cbz	r7, 8007dac <rshift+0x68>
 8007daa:	3304      	adds	r3, #4
 8007dac:	1b1a      	subs	r2, r3, r4
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007db4:	bf08      	it	eq
 8007db6:	2300      	moveq	r3, #0
 8007db8:	6102      	str	r2, [r0, #16]
 8007dba:	bf08      	it	eq
 8007dbc:	6143      	streq	r3, [r0, #20]
 8007dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dc2:	f8dc c000 	ldr.w	ip, [ip]
 8007dc6:	fa0c fc08 	lsl.w	ip, ip, r8
 8007dca:	ea4c 0707 	orr.w	r7, ip, r7
 8007dce:	f849 7b04 	str.w	r7, [r9], #4
 8007dd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007dd6:	40cf      	lsrs	r7, r1
 8007dd8:	e7da      	b.n	8007d90 <rshift+0x4c>
 8007dda:	f851 cb04 	ldr.w	ip, [r1], #4
 8007dde:	f847 cf04 	str.w	ip, [r7, #4]!
 8007de2:	e7c3      	b.n	8007d6c <rshift+0x28>
 8007de4:	4623      	mov	r3, r4
 8007de6:	e7e1      	b.n	8007dac <rshift+0x68>

08007de8 <__hexdig_fun>:
 8007de8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007dec:	2b09      	cmp	r3, #9
 8007dee:	d802      	bhi.n	8007df6 <__hexdig_fun+0xe>
 8007df0:	3820      	subs	r0, #32
 8007df2:	b2c0      	uxtb	r0, r0
 8007df4:	4770      	bx	lr
 8007df6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007dfa:	2b05      	cmp	r3, #5
 8007dfc:	d801      	bhi.n	8007e02 <__hexdig_fun+0x1a>
 8007dfe:	3847      	subs	r0, #71	; 0x47
 8007e00:	e7f7      	b.n	8007df2 <__hexdig_fun+0xa>
 8007e02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e06:	2b05      	cmp	r3, #5
 8007e08:	d801      	bhi.n	8007e0e <__hexdig_fun+0x26>
 8007e0a:	3827      	subs	r0, #39	; 0x27
 8007e0c:	e7f1      	b.n	8007df2 <__hexdig_fun+0xa>
 8007e0e:	2000      	movs	r0, #0
 8007e10:	4770      	bx	lr
	...

08007e14 <__gethex>:
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	ed2d 8b02 	vpush	{d8}
 8007e1c:	b089      	sub	sp, #36	; 0x24
 8007e1e:	ee08 0a10 	vmov	s16, r0
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	4bb4      	ldr	r3, [pc, #720]	; (80080f8 <__gethex+0x2e4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	468b      	mov	fp, r1
 8007e2e:	4690      	mov	r8, r2
 8007e30:	f7f8 f9d6 	bl	80001e0 <strlen>
 8007e34:	9b01      	ldr	r3, [sp, #4]
 8007e36:	f8db 2000 	ldr.w	r2, [fp]
 8007e3a:	4403      	add	r3, r0
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007e42:	9305      	str	r3, [sp, #20]
 8007e44:	1c93      	adds	r3, r2, #2
 8007e46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007e4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007e4e:	32fe      	adds	r2, #254	; 0xfe
 8007e50:	18d1      	adds	r1, r2, r3
 8007e52:	461f      	mov	r7, r3
 8007e54:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e58:	9100      	str	r1, [sp, #0]
 8007e5a:	2830      	cmp	r0, #48	; 0x30
 8007e5c:	d0f8      	beq.n	8007e50 <__gethex+0x3c>
 8007e5e:	f7ff ffc3 	bl	8007de8 <__hexdig_fun>
 8007e62:	4604      	mov	r4, r0
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d13a      	bne.n	8007ede <__gethex+0xca>
 8007e68:	9901      	ldr	r1, [sp, #4]
 8007e6a:	4652      	mov	r2, sl
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f001 fa33 	bl	80092d8 <strncmp>
 8007e72:	4605      	mov	r5, r0
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d168      	bne.n	8007f4a <__gethex+0x136>
 8007e78:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007e7c:	eb07 060a 	add.w	r6, r7, sl
 8007e80:	f7ff ffb2 	bl	8007de8 <__hexdig_fun>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d062      	beq.n	8007f4e <__gethex+0x13a>
 8007e88:	4633      	mov	r3, r6
 8007e8a:	7818      	ldrb	r0, [r3, #0]
 8007e8c:	2830      	cmp	r0, #48	; 0x30
 8007e8e:	461f      	mov	r7, r3
 8007e90:	f103 0301 	add.w	r3, r3, #1
 8007e94:	d0f9      	beq.n	8007e8a <__gethex+0x76>
 8007e96:	f7ff ffa7 	bl	8007de8 <__hexdig_fun>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	fab0 f480 	clz	r4, r0
 8007ea0:	0964      	lsrs	r4, r4, #5
 8007ea2:	4635      	mov	r5, r6
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	463a      	mov	r2, r7
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	3201      	adds	r2, #1
 8007eac:	7830      	ldrb	r0, [r6, #0]
 8007eae:	f7ff ff9b 	bl	8007de8 <__hexdig_fun>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d1f8      	bne.n	8007ea8 <__gethex+0x94>
 8007eb6:	9901      	ldr	r1, [sp, #4]
 8007eb8:	4652      	mov	r2, sl
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f001 fa0c 	bl	80092d8 <strncmp>
 8007ec0:	b980      	cbnz	r0, 8007ee4 <__gethex+0xd0>
 8007ec2:	b94d      	cbnz	r5, 8007ed8 <__gethex+0xc4>
 8007ec4:	eb06 050a 	add.w	r5, r6, sl
 8007ec8:	462a      	mov	r2, r5
 8007eca:	4616      	mov	r6, r2
 8007ecc:	3201      	adds	r2, #1
 8007ece:	7830      	ldrb	r0, [r6, #0]
 8007ed0:	f7ff ff8a 	bl	8007de8 <__hexdig_fun>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d1f8      	bne.n	8007eca <__gethex+0xb6>
 8007ed8:	1bad      	subs	r5, r5, r6
 8007eda:	00ad      	lsls	r5, r5, #2
 8007edc:	e004      	b.n	8007ee8 <__gethex+0xd4>
 8007ede:	2400      	movs	r4, #0
 8007ee0:	4625      	mov	r5, r4
 8007ee2:	e7e0      	b.n	8007ea6 <__gethex+0x92>
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	d1f7      	bne.n	8007ed8 <__gethex+0xc4>
 8007ee8:	7833      	ldrb	r3, [r6, #0]
 8007eea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007eee:	2b50      	cmp	r3, #80	; 0x50
 8007ef0:	d13b      	bne.n	8007f6a <__gethex+0x156>
 8007ef2:	7873      	ldrb	r3, [r6, #1]
 8007ef4:	2b2b      	cmp	r3, #43	; 0x2b
 8007ef6:	d02c      	beq.n	8007f52 <__gethex+0x13e>
 8007ef8:	2b2d      	cmp	r3, #45	; 0x2d
 8007efa:	d02e      	beq.n	8007f5a <__gethex+0x146>
 8007efc:	1c71      	adds	r1, r6, #1
 8007efe:	f04f 0900 	mov.w	r9, #0
 8007f02:	7808      	ldrb	r0, [r1, #0]
 8007f04:	f7ff ff70 	bl	8007de8 <__hexdig_fun>
 8007f08:	1e43      	subs	r3, r0, #1
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b18      	cmp	r3, #24
 8007f0e:	d82c      	bhi.n	8007f6a <__gethex+0x156>
 8007f10:	f1a0 0210 	sub.w	r2, r0, #16
 8007f14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f18:	f7ff ff66 	bl	8007de8 <__hexdig_fun>
 8007f1c:	1e43      	subs	r3, r0, #1
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b18      	cmp	r3, #24
 8007f22:	d91d      	bls.n	8007f60 <__gethex+0x14c>
 8007f24:	f1b9 0f00 	cmp.w	r9, #0
 8007f28:	d000      	beq.n	8007f2c <__gethex+0x118>
 8007f2a:	4252      	negs	r2, r2
 8007f2c:	4415      	add	r5, r2
 8007f2e:	f8cb 1000 	str.w	r1, [fp]
 8007f32:	b1e4      	cbz	r4, 8007f6e <__gethex+0x15a>
 8007f34:	9b00      	ldr	r3, [sp, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bf14      	ite	ne
 8007f3a:	2700      	movne	r7, #0
 8007f3c:	2706      	moveq	r7, #6
 8007f3e:	4638      	mov	r0, r7
 8007f40:	b009      	add	sp, #36	; 0x24
 8007f42:	ecbd 8b02 	vpop	{d8}
 8007f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4a:	463e      	mov	r6, r7
 8007f4c:	4625      	mov	r5, r4
 8007f4e:	2401      	movs	r4, #1
 8007f50:	e7ca      	b.n	8007ee8 <__gethex+0xd4>
 8007f52:	f04f 0900 	mov.w	r9, #0
 8007f56:	1cb1      	adds	r1, r6, #2
 8007f58:	e7d3      	b.n	8007f02 <__gethex+0xee>
 8007f5a:	f04f 0901 	mov.w	r9, #1
 8007f5e:	e7fa      	b.n	8007f56 <__gethex+0x142>
 8007f60:	230a      	movs	r3, #10
 8007f62:	fb03 0202 	mla	r2, r3, r2, r0
 8007f66:	3a10      	subs	r2, #16
 8007f68:	e7d4      	b.n	8007f14 <__gethex+0x100>
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	e7df      	b.n	8007f2e <__gethex+0x11a>
 8007f6e:	1bf3      	subs	r3, r6, r7
 8007f70:	3b01      	subs	r3, #1
 8007f72:	4621      	mov	r1, r4
 8007f74:	2b07      	cmp	r3, #7
 8007f76:	dc0b      	bgt.n	8007f90 <__gethex+0x17c>
 8007f78:	ee18 0a10 	vmov	r0, s16
 8007f7c:	f000 fa7e 	bl	800847c <_Balloc>
 8007f80:	4604      	mov	r4, r0
 8007f82:	b940      	cbnz	r0, 8007f96 <__gethex+0x182>
 8007f84:	4b5d      	ldr	r3, [pc, #372]	; (80080fc <__gethex+0x2e8>)
 8007f86:	4602      	mov	r2, r0
 8007f88:	21de      	movs	r1, #222	; 0xde
 8007f8a:	485d      	ldr	r0, [pc, #372]	; (8008100 <__gethex+0x2ec>)
 8007f8c:	f001 f9c6 	bl	800931c <__assert_func>
 8007f90:	3101      	adds	r1, #1
 8007f92:	105b      	asrs	r3, r3, #1
 8007f94:	e7ee      	b.n	8007f74 <__gethex+0x160>
 8007f96:	f100 0914 	add.w	r9, r0, #20
 8007f9a:	f04f 0b00 	mov.w	fp, #0
 8007f9e:	f1ca 0301 	rsb	r3, sl, #1
 8007fa2:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fa6:	f8cd b000 	str.w	fp, [sp]
 8007faa:	9306      	str	r3, [sp, #24]
 8007fac:	42b7      	cmp	r7, r6
 8007fae:	d340      	bcc.n	8008032 <__gethex+0x21e>
 8007fb0:	9802      	ldr	r0, [sp, #8]
 8007fb2:	9b00      	ldr	r3, [sp, #0]
 8007fb4:	f840 3b04 	str.w	r3, [r0], #4
 8007fb8:	eba0 0009 	sub.w	r0, r0, r9
 8007fbc:	1080      	asrs	r0, r0, #2
 8007fbe:	0146      	lsls	r6, r0, #5
 8007fc0:	6120      	str	r0, [r4, #16]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fb4c 	bl	8008660 <__hi0bits>
 8007fc8:	1a30      	subs	r0, r6, r0
 8007fca:	f8d8 6000 	ldr.w	r6, [r8]
 8007fce:	42b0      	cmp	r0, r6
 8007fd0:	dd63      	ble.n	800809a <__gethex+0x286>
 8007fd2:	1b87      	subs	r7, r0, r6
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 fef0 	bl	8008dbc <__any_on>
 8007fdc:	4682      	mov	sl, r0
 8007fde:	b1a8      	cbz	r0, 800800c <__gethex+0x1f8>
 8007fe0:	1e7b      	subs	r3, r7, #1
 8007fe2:	1159      	asrs	r1, r3, #5
 8007fe4:	f003 021f 	and.w	r2, r3, #31
 8007fe8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007fec:	f04f 0a01 	mov.w	sl, #1
 8007ff0:	fa0a f202 	lsl.w	r2, sl, r2
 8007ff4:	420a      	tst	r2, r1
 8007ff6:	d009      	beq.n	800800c <__gethex+0x1f8>
 8007ff8:	4553      	cmp	r3, sl
 8007ffa:	dd05      	ble.n	8008008 <__gethex+0x1f4>
 8007ffc:	1eb9      	subs	r1, r7, #2
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 fedc 	bl	8008dbc <__any_on>
 8008004:	2800      	cmp	r0, #0
 8008006:	d145      	bne.n	8008094 <__gethex+0x280>
 8008008:	f04f 0a02 	mov.w	sl, #2
 800800c:	4639      	mov	r1, r7
 800800e:	4620      	mov	r0, r4
 8008010:	f7ff fe98 	bl	8007d44 <rshift>
 8008014:	443d      	add	r5, r7
 8008016:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800801a:	42ab      	cmp	r3, r5
 800801c:	da4c      	bge.n	80080b8 <__gethex+0x2a4>
 800801e:	ee18 0a10 	vmov	r0, s16
 8008022:	4621      	mov	r1, r4
 8008024:	f000 fa6a 	bl	80084fc <_Bfree>
 8008028:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800802a:	2300      	movs	r3, #0
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	27a3      	movs	r7, #163	; 0xa3
 8008030:	e785      	b.n	8007f3e <__gethex+0x12a>
 8008032:	1e73      	subs	r3, r6, #1
 8008034:	9a05      	ldr	r2, [sp, #20]
 8008036:	9303      	str	r3, [sp, #12]
 8008038:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800803c:	4293      	cmp	r3, r2
 800803e:	d019      	beq.n	8008074 <__gethex+0x260>
 8008040:	f1bb 0f20 	cmp.w	fp, #32
 8008044:	d107      	bne.n	8008056 <__gethex+0x242>
 8008046:	9b02      	ldr	r3, [sp, #8]
 8008048:	9a00      	ldr	r2, [sp, #0]
 800804a:	f843 2b04 	str.w	r2, [r3], #4
 800804e:	9302      	str	r3, [sp, #8]
 8008050:	2300      	movs	r3, #0
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	469b      	mov	fp, r3
 8008056:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800805a:	f7ff fec5 	bl	8007de8 <__hexdig_fun>
 800805e:	9b00      	ldr	r3, [sp, #0]
 8008060:	f000 000f 	and.w	r0, r0, #15
 8008064:	fa00 f00b 	lsl.w	r0, r0, fp
 8008068:	4303      	orrs	r3, r0
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	f10b 0b04 	add.w	fp, fp, #4
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	e00d      	b.n	8008090 <__gethex+0x27c>
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	9a06      	ldr	r2, [sp, #24]
 8008078:	4413      	add	r3, r2
 800807a:	42bb      	cmp	r3, r7
 800807c:	d3e0      	bcc.n	8008040 <__gethex+0x22c>
 800807e:	4618      	mov	r0, r3
 8008080:	9901      	ldr	r1, [sp, #4]
 8008082:	9307      	str	r3, [sp, #28]
 8008084:	4652      	mov	r2, sl
 8008086:	f001 f927 	bl	80092d8 <strncmp>
 800808a:	9b07      	ldr	r3, [sp, #28]
 800808c:	2800      	cmp	r0, #0
 800808e:	d1d7      	bne.n	8008040 <__gethex+0x22c>
 8008090:	461e      	mov	r6, r3
 8008092:	e78b      	b.n	8007fac <__gethex+0x198>
 8008094:	f04f 0a03 	mov.w	sl, #3
 8008098:	e7b8      	b.n	800800c <__gethex+0x1f8>
 800809a:	da0a      	bge.n	80080b2 <__gethex+0x29e>
 800809c:	1a37      	subs	r7, r6, r0
 800809e:	4621      	mov	r1, r4
 80080a0:	ee18 0a10 	vmov	r0, s16
 80080a4:	463a      	mov	r2, r7
 80080a6:	f000 fc45 	bl	8008934 <__lshift>
 80080aa:	1bed      	subs	r5, r5, r7
 80080ac:	4604      	mov	r4, r0
 80080ae:	f100 0914 	add.w	r9, r0, #20
 80080b2:	f04f 0a00 	mov.w	sl, #0
 80080b6:	e7ae      	b.n	8008016 <__gethex+0x202>
 80080b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80080bc:	42a8      	cmp	r0, r5
 80080be:	dd72      	ble.n	80081a6 <__gethex+0x392>
 80080c0:	1b45      	subs	r5, r0, r5
 80080c2:	42ae      	cmp	r6, r5
 80080c4:	dc36      	bgt.n	8008134 <__gethex+0x320>
 80080c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d02a      	beq.n	8008124 <__gethex+0x310>
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d02c      	beq.n	800812c <__gethex+0x318>
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d11c      	bne.n	8008110 <__gethex+0x2fc>
 80080d6:	42ae      	cmp	r6, r5
 80080d8:	d11a      	bne.n	8008110 <__gethex+0x2fc>
 80080da:	2e01      	cmp	r6, #1
 80080dc:	d112      	bne.n	8008104 <__gethex+0x2f0>
 80080de:	9a04      	ldr	r2, [sp, #16]
 80080e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	2301      	movs	r3, #1
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	f8c9 3000 	str.w	r3, [r9]
 80080ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080f0:	2762      	movs	r7, #98	; 0x62
 80080f2:	601c      	str	r4, [r3, #0]
 80080f4:	e723      	b.n	8007f3e <__gethex+0x12a>
 80080f6:	bf00      	nop
 80080f8:	0800a1b8 	.word	0x0800a1b8
 80080fc:	0800a140 	.word	0x0800a140
 8008100:	0800a151 	.word	0x0800a151
 8008104:	1e71      	subs	r1, r6, #1
 8008106:	4620      	mov	r0, r4
 8008108:	f000 fe58 	bl	8008dbc <__any_on>
 800810c:	2800      	cmp	r0, #0
 800810e:	d1e6      	bne.n	80080de <__gethex+0x2ca>
 8008110:	ee18 0a10 	vmov	r0, s16
 8008114:	4621      	mov	r1, r4
 8008116:	f000 f9f1 	bl	80084fc <_Bfree>
 800811a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800811c:	2300      	movs	r3, #0
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	2750      	movs	r7, #80	; 0x50
 8008122:	e70c      	b.n	8007f3e <__gethex+0x12a>
 8008124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f2      	bne.n	8008110 <__gethex+0x2fc>
 800812a:	e7d8      	b.n	80080de <__gethex+0x2ca>
 800812c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1d5      	bne.n	80080de <__gethex+0x2ca>
 8008132:	e7ed      	b.n	8008110 <__gethex+0x2fc>
 8008134:	1e6f      	subs	r7, r5, #1
 8008136:	f1ba 0f00 	cmp.w	sl, #0
 800813a:	d131      	bne.n	80081a0 <__gethex+0x38c>
 800813c:	b127      	cbz	r7, 8008148 <__gethex+0x334>
 800813e:	4639      	mov	r1, r7
 8008140:	4620      	mov	r0, r4
 8008142:	f000 fe3b 	bl	8008dbc <__any_on>
 8008146:	4682      	mov	sl, r0
 8008148:	117b      	asrs	r3, r7, #5
 800814a:	2101      	movs	r1, #1
 800814c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008150:	f007 071f 	and.w	r7, r7, #31
 8008154:	fa01 f707 	lsl.w	r7, r1, r7
 8008158:	421f      	tst	r7, r3
 800815a:	4629      	mov	r1, r5
 800815c:	4620      	mov	r0, r4
 800815e:	bf18      	it	ne
 8008160:	f04a 0a02 	orrne.w	sl, sl, #2
 8008164:	1b76      	subs	r6, r6, r5
 8008166:	f7ff fded 	bl	8007d44 <rshift>
 800816a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800816e:	2702      	movs	r7, #2
 8008170:	f1ba 0f00 	cmp.w	sl, #0
 8008174:	d048      	beq.n	8008208 <__gethex+0x3f4>
 8008176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d015      	beq.n	80081aa <__gethex+0x396>
 800817e:	2b03      	cmp	r3, #3
 8008180:	d017      	beq.n	80081b2 <__gethex+0x39e>
 8008182:	2b01      	cmp	r3, #1
 8008184:	d109      	bne.n	800819a <__gethex+0x386>
 8008186:	f01a 0f02 	tst.w	sl, #2
 800818a:	d006      	beq.n	800819a <__gethex+0x386>
 800818c:	f8d9 0000 	ldr.w	r0, [r9]
 8008190:	ea4a 0a00 	orr.w	sl, sl, r0
 8008194:	f01a 0f01 	tst.w	sl, #1
 8008198:	d10e      	bne.n	80081b8 <__gethex+0x3a4>
 800819a:	f047 0710 	orr.w	r7, r7, #16
 800819e:	e033      	b.n	8008208 <__gethex+0x3f4>
 80081a0:	f04f 0a01 	mov.w	sl, #1
 80081a4:	e7d0      	b.n	8008148 <__gethex+0x334>
 80081a6:	2701      	movs	r7, #1
 80081a8:	e7e2      	b.n	8008170 <__gethex+0x35c>
 80081aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ac:	f1c3 0301 	rsb	r3, r3, #1
 80081b0:	9315      	str	r3, [sp, #84]	; 0x54
 80081b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0f0      	beq.n	800819a <__gethex+0x386>
 80081b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80081bc:	f104 0314 	add.w	r3, r4, #20
 80081c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80081c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80081c8:	f04f 0c00 	mov.w	ip, #0
 80081cc:	4618      	mov	r0, r3
 80081ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80081d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80081d6:	d01c      	beq.n	8008212 <__gethex+0x3fe>
 80081d8:	3201      	adds	r2, #1
 80081da:	6002      	str	r2, [r0, #0]
 80081dc:	2f02      	cmp	r7, #2
 80081de:	f104 0314 	add.w	r3, r4, #20
 80081e2:	d13f      	bne.n	8008264 <__gethex+0x450>
 80081e4:	f8d8 2000 	ldr.w	r2, [r8]
 80081e8:	3a01      	subs	r2, #1
 80081ea:	42b2      	cmp	r2, r6
 80081ec:	d10a      	bne.n	8008204 <__gethex+0x3f0>
 80081ee:	1171      	asrs	r1, r6, #5
 80081f0:	2201      	movs	r2, #1
 80081f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081f6:	f006 061f 	and.w	r6, r6, #31
 80081fa:	fa02 f606 	lsl.w	r6, r2, r6
 80081fe:	421e      	tst	r6, r3
 8008200:	bf18      	it	ne
 8008202:	4617      	movne	r7, r2
 8008204:	f047 0720 	orr.w	r7, r7, #32
 8008208:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800820a:	601c      	str	r4, [r3, #0]
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	601d      	str	r5, [r3, #0]
 8008210:	e695      	b.n	8007f3e <__gethex+0x12a>
 8008212:	4299      	cmp	r1, r3
 8008214:	f843 cc04 	str.w	ip, [r3, #-4]
 8008218:	d8d8      	bhi.n	80081cc <__gethex+0x3b8>
 800821a:	68a3      	ldr	r3, [r4, #8]
 800821c:	459b      	cmp	fp, r3
 800821e:	db19      	blt.n	8008254 <__gethex+0x440>
 8008220:	6861      	ldr	r1, [r4, #4]
 8008222:	ee18 0a10 	vmov	r0, s16
 8008226:	3101      	adds	r1, #1
 8008228:	f000 f928 	bl	800847c <_Balloc>
 800822c:	4681      	mov	r9, r0
 800822e:	b918      	cbnz	r0, 8008238 <__gethex+0x424>
 8008230:	4b1a      	ldr	r3, [pc, #104]	; (800829c <__gethex+0x488>)
 8008232:	4602      	mov	r2, r0
 8008234:	2184      	movs	r1, #132	; 0x84
 8008236:	e6a8      	b.n	8007f8a <__gethex+0x176>
 8008238:	6922      	ldr	r2, [r4, #16]
 800823a:	3202      	adds	r2, #2
 800823c:	f104 010c 	add.w	r1, r4, #12
 8008240:	0092      	lsls	r2, r2, #2
 8008242:	300c      	adds	r0, #12
 8008244:	f000 f90c 	bl	8008460 <memcpy>
 8008248:	4621      	mov	r1, r4
 800824a:	ee18 0a10 	vmov	r0, s16
 800824e:	f000 f955 	bl	80084fc <_Bfree>
 8008252:	464c      	mov	r4, r9
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800825c:	6122      	str	r2, [r4, #16]
 800825e:	2201      	movs	r2, #1
 8008260:	615a      	str	r2, [r3, #20]
 8008262:	e7bb      	b.n	80081dc <__gethex+0x3c8>
 8008264:	6922      	ldr	r2, [r4, #16]
 8008266:	455a      	cmp	r2, fp
 8008268:	dd0b      	ble.n	8008282 <__gethex+0x46e>
 800826a:	2101      	movs	r1, #1
 800826c:	4620      	mov	r0, r4
 800826e:	f7ff fd69 	bl	8007d44 <rshift>
 8008272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008276:	3501      	adds	r5, #1
 8008278:	42ab      	cmp	r3, r5
 800827a:	f6ff aed0 	blt.w	800801e <__gethex+0x20a>
 800827e:	2701      	movs	r7, #1
 8008280:	e7c0      	b.n	8008204 <__gethex+0x3f0>
 8008282:	f016 061f 	ands.w	r6, r6, #31
 8008286:	d0fa      	beq.n	800827e <__gethex+0x46a>
 8008288:	4453      	add	r3, sl
 800828a:	f1c6 0620 	rsb	r6, r6, #32
 800828e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008292:	f000 f9e5 	bl	8008660 <__hi0bits>
 8008296:	42b0      	cmp	r0, r6
 8008298:	dbe7      	blt.n	800826a <__gethex+0x456>
 800829a:	e7f0      	b.n	800827e <__gethex+0x46a>
 800829c:	0800a140 	.word	0x0800a140

080082a0 <L_shift>:
 80082a0:	f1c2 0208 	rsb	r2, r2, #8
 80082a4:	0092      	lsls	r2, r2, #2
 80082a6:	b570      	push	{r4, r5, r6, lr}
 80082a8:	f1c2 0620 	rsb	r6, r2, #32
 80082ac:	6843      	ldr	r3, [r0, #4]
 80082ae:	6804      	ldr	r4, [r0, #0]
 80082b0:	fa03 f506 	lsl.w	r5, r3, r6
 80082b4:	432c      	orrs	r4, r5
 80082b6:	40d3      	lsrs	r3, r2
 80082b8:	6004      	str	r4, [r0, #0]
 80082ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80082be:	4288      	cmp	r0, r1
 80082c0:	d3f4      	bcc.n	80082ac <L_shift+0xc>
 80082c2:	bd70      	pop	{r4, r5, r6, pc}

080082c4 <__match>:
 80082c4:	b530      	push	{r4, r5, lr}
 80082c6:	6803      	ldr	r3, [r0, #0]
 80082c8:	3301      	adds	r3, #1
 80082ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ce:	b914      	cbnz	r4, 80082d6 <__match+0x12>
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	2001      	movs	r0, #1
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80082de:	2d19      	cmp	r5, #25
 80082e0:	bf98      	it	ls
 80082e2:	3220      	addls	r2, #32
 80082e4:	42a2      	cmp	r2, r4
 80082e6:	d0f0      	beq.n	80082ca <__match+0x6>
 80082e8:	2000      	movs	r0, #0
 80082ea:	e7f3      	b.n	80082d4 <__match+0x10>

080082ec <__hexnan>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	680b      	ldr	r3, [r1, #0]
 80082f2:	115e      	asrs	r6, r3, #5
 80082f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082f8:	f013 031f 	ands.w	r3, r3, #31
 80082fc:	b087      	sub	sp, #28
 80082fe:	bf18      	it	ne
 8008300:	3604      	addne	r6, #4
 8008302:	2500      	movs	r5, #0
 8008304:	1f37      	subs	r7, r6, #4
 8008306:	4690      	mov	r8, r2
 8008308:	6802      	ldr	r2, [r0, #0]
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	4682      	mov	sl, r0
 800830e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008312:	46b9      	mov	r9, r7
 8008314:	463c      	mov	r4, r7
 8008316:	9502      	str	r5, [sp, #8]
 8008318:	46ab      	mov	fp, r5
 800831a:	7851      	ldrb	r1, [r2, #1]
 800831c:	1c53      	adds	r3, r2, #1
 800831e:	9303      	str	r3, [sp, #12]
 8008320:	b341      	cbz	r1, 8008374 <__hexnan+0x88>
 8008322:	4608      	mov	r0, r1
 8008324:	9205      	str	r2, [sp, #20]
 8008326:	9104      	str	r1, [sp, #16]
 8008328:	f7ff fd5e 	bl	8007de8 <__hexdig_fun>
 800832c:	2800      	cmp	r0, #0
 800832e:	d14f      	bne.n	80083d0 <__hexnan+0xe4>
 8008330:	9904      	ldr	r1, [sp, #16]
 8008332:	9a05      	ldr	r2, [sp, #20]
 8008334:	2920      	cmp	r1, #32
 8008336:	d818      	bhi.n	800836a <__hexnan+0x7e>
 8008338:	9b02      	ldr	r3, [sp, #8]
 800833a:	459b      	cmp	fp, r3
 800833c:	dd13      	ble.n	8008366 <__hexnan+0x7a>
 800833e:	454c      	cmp	r4, r9
 8008340:	d206      	bcs.n	8008350 <__hexnan+0x64>
 8008342:	2d07      	cmp	r5, #7
 8008344:	dc04      	bgt.n	8008350 <__hexnan+0x64>
 8008346:	462a      	mov	r2, r5
 8008348:	4649      	mov	r1, r9
 800834a:	4620      	mov	r0, r4
 800834c:	f7ff ffa8 	bl	80082a0 <L_shift>
 8008350:	4544      	cmp	r4, r8
 8008352:	d950      	bls.n	80083f6 <__hexnan+0x10a>
 8008354:	2300      	movs	r3, #0
 8008356:	f1a4 0904 	sub.w	r9, r4, #4
 800835a:	f844 3c04 	str.w	r3, [r4, #-4]
 800835e:	f8cd b008 	str.w	fp, [sp, #8]
 8008362:	464c      	mov	r4, r9
 8008364:	461d      	mov	r5, r3
 8008366:	9a03      	ldr	r2, [sp, #12]
 8008368:	e7d7      	b.n	800831a <__hexnan+0x2e>
 800836a:	2929      	cmp	r1, #41	; 0x29
 800836c:	d156      	bne.n	800841c <__hexnan+0x130>
 800836e:	3202      	adds	r2, #2
 8008370:	f8ca 2000 	str.w	r2, [sl]
 8008374:	f1bb 0f00 	cmp.w	fp, #0
 8008378:	d050      	beq.n	800841c <__hexnan+0x130>
 800837a:	454c      	cmp	r4, r9
 800837c:	d206      	bcs.n	800838c <__hexnan+0xa0>
 800837e:	2d07      	cmp	r5, #7
 8008380:	dc04      	bgt.n	800838c <__hexnan+0xa0>
 8008382:	462a      	mov	r2, r5
 8008384:	4649      	mov	r1, r9
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff ff8a 	bl	80082a0 <L_shift>
 800838c:	4544      	cmp	r4, r8
 800838e:	d934      	bls.n	80083fa <__hexnan+0x10e>
 8008390:	f1a8 0204 	sub.w	r2, r8, #4
 8008394:	4623      	mov	r3, r4
 8008396:	f853 1b04 	ldr.w	r1, [r3], #4
 800839a:	f842 1f04 	str.w	r1, [r2, #4]!
 800839e:	429f      	cmp	r7, r3
 80083a0:	d2f9      	bcs.n	8008396 <__hexnan+0xaa>
 80083a2:	1b3b      	subs	r3, r7, r4
 80083a4:	f023 0303 	bic.w	r3, r3, #3
 80083a8:	3304      	adds	r3, #4
 80083aa:	3401      	adds	r4, #1
 80083ac:	3e03      	subs	r6, #3
 80083ae:	42b4      	cmp	r4, r6
 80083b0:	bf88      	it	hi
 80083b2:	2304      	movhi	r3, #4
 80083b4:	4443      	add	r3, r8
 80083b6:	2200      	movs	r2, #0
 80083b8:	f843 2b04 	str.w	r2, [r3], #4
 80083bc:	429f      	cmp	r7, r3
 80083be:	d2fb      	bcs.n	80083b8 <__hexnan+0xcc>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	b91b      	cbnz	r3, 80083cc <__hexnan+0xe0>
 80083c4:	4547      	cmp	r7, r8
 80083c6:	d127      	bne.n	8008418 <__hexnan+0x12c>
 80083c8:	2301      	movs	r3, #1
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	2005      	movs	r0, #5
 80083ce:	e026      	b.n	800841e <__hexnan+0x132>
 80083d0:	3501      	adds	r5, #1
 80083d2:	2d08      	cmp	r5, #8
 80083d4:	f10b 0b01 	add.w	fp, fp, #1
 80083d8:	dd06      	ble.n	80083e8 <__hexnan+0xfc>
 80083da:	4544      	cmp	r4, r8
 80083dc:	d9c3      	bls.n	8008366 <__hexnan+0x7a>
 80083de:	2300      	movs	r3, #0
 80083e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80083e4:	2501      	movs	r5, #1
 80083e6:	3c04      	subs	r4, #4
 80083e8:	6822      	ldr	r2, [r4, #0]
 80083ea:	f000 000f 	and.w	r0, r0, #15
 80083ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80083f2:	6022      	str	r2, [r4, #0]
 80083f4:	e7b7      	b.n	8008366 <__hexnan+0x7a>
 80083f6:	2508      	movs	r5, #8
 80083f8:	e7b5      	b.n	8008366 <__hexnan+0x7a>
 80083fa:	9b01      	ldr	r3, [sp, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0df      	beq.n	80083c0 <__hexnan+0xd4>
 8008400:	f04f 32ff 	mov.w	r2, #4294967295
 8008404:	f1c3 0320 	rsb	r3, r3, #32
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
 800840c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008410:	401a      	ands	r2, r3
 8008412:	f846 2c04 	str.w	r2, [r6, #-4]
 8008416:	e7d3      	b.n	80083c0 <__hexnan+0xd4>
 8008418:	3f04      	subs	r7, #4
 800841a:	e7d1      	b.n	80083c0 <__hexnan+0xd4>
 800841c:	2004      	movs	r0, #4
 800841e:	b007      	add	sp, #28
 8008420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008424 <_localeconv_r>:
 8008424:	4800      	ldr	r0, [pc, #0]	; (8008428 <_localeconv_r+0x4>)
 8008426:	4770      	bx	lr
 8008428:	20000174 	.word	0x20000174

0800842c <malloc>:
 800842c:	4b02      	ldr	r3, [pc, #8]	; (8008438 <malloc+0xc>)
 800842e:	4601      	mov	r1, r0
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	f000 bd67 	b.w	8008f04 <_malloc_r>
 8008436:	bf00      	nop
 8008438:	2000001c 	.word	0x2000001c

0800843c <__ascii_mbtowc>:
 800843c:	b082      	sub	sp, #8
 800843e:	b901      	cbnz	r1, 8008442 <__ascii_mbtowc+0x6>
 8008440:	a901      	add	r1, sp, #4
 8008442:	b142      	cbz	r2, 8008456 <__ascii_mbtowc+0x1a>
 8008444:	b14b      	cbz	r3, 800845a <__ascii_mbtowc+0x1e>
 8008446:	7813      	ldrb	r3, [r2, #0]
 8008448:	600b      	str	r3, [r1, #0]
 800844a:	7812      	ldrb	r2, [r2, #0]
 800844c:	1e10      	subs	r0, r2, #0
 800844e:	bf18      	it	ne
 8008450:	2001      	movne	r0, #1
 8008452:	b002      	add	sp, #8
 8008454:	4770      	bx	lr
 8008456:	4610      	mov	r0, r2
 8008458:	e7fb      	b.n	8008452 <__ascii_mbtowc+0x16>
 800845a:	f06f 0001 	mvn.w	r0, #1
 800845e:	e7f8      	b.n	8008452 <__ascii_mbtowc+0x16>

08008460 <memcpy>:
 8008460:	440a      	add	r2, r1
 8008462:	4291      	cmp	r1, r2
 8008464:	f100 33ff 	add.w	r3, r0, #4294967295
 8008468:	d100      	bne.n	800846c <memcpy+0xc>
 800846a:	4770      	bx	lr
 800846c:	b510      	push	{r4, lr}
 800846e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008472:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008476:	4291      	cmp	r1, r2
 8008478:	d1f9      	bne.n	800846e <memcpy+0xe>
 800847a:	bd10      	pop	{r4, pc}

0800847c <_Balloc>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008480:	4604      	mov	r4, r0
 8008482:	460d      	mov	r5, r1
 8008484:	b976      	cbnz	r6, 80084a4 <_Balloc+0x28>
 8008486:	2010      	movs	r0, #16
 8008488:	f7ff ffd0 	bl	800842c <malloc>
 800848c:	4602      	mov	r2, r0
 800848e:	6260      	str	r0, [r4, #36]	; 0x24
 8008490:	b920      	cbnz	r0, 800849c <_Balloc+0x20>
 8008492:	4b18      	ldr	r3, [pc, #96]	; (80084f4 <_Balloc+0x78>)
 8008494:	4818      	ldr	r0, [pc, #96]	; (80084f8 <_Balloc+0x7c>)
 8008496:	2166      	movs	r1, #102	; 0x66
 8008498:	f000 ff40 	bl	800931c <__assert_func>
 800849c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084a0:	6006      	str	r6, [r0, #0]
 80084a2:	60c6      	str	r6, [r0, #12]
 80084a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084a6:	68f3      	ldr	r3, [r6, #12]
 80084a8:	b183      	cbz	r3, 80084cc <_Balloc+0x50>
 80084aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084b2:	b9b8      	cbnz	r0, 80084e4 <_Balloc+0x68>
 80084b4:	2101      	movs	r1, #1
 80084b6:	fa01 f605 	lsl.w	r6, r1, r5
 80084ba:	1d72      	adds	r2, r6, #5
 80084bc:	0092      	lsls	r2, r2, #2
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 fc9d 	bl	8008dfe <_calloc_r>
 80084c4:	b160      	cbz	r0, 80084e0 <_Balloc+0x64>
 80084c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084ca:	e00e      	b.n	80084ea <_Balloc+0x6e>
 80084cc:	2221      	movs	r2, #33	; 0x21
 80084ce:	2104      	movs	r1, #4
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 fc94 	bl	8008dfe <_calloc_r>
 80084d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084d8:	60f0      	str	r0, [r6, #12]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e4      	bne.n	80084aa <_Balloc+0x2e>
 80084e0:	2000      	movs	r0, #0
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	6802      	ldr	r2, [r0, #0]
 80084e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084ea:	2300      	movs	r3, #0
 80084ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084f0:	e7f7      	b.n	80084e2 <_Balloc+0x66>
 80084f2:	bf00      	nop
 80084f4:	0800a0ce 	.word	0x0800a0ce
 80084f8:	0800a1cc 	.word	0x0800a1cc

080084fc <_Bfree>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008500:	4605      	mov	r5, r0
 8008502:	460c      	mov	r4, r1
 8008504:	b976      	cbnz	r6, 8008524 <_Bfree+0x28>
 8008506:	2010      	movs	r0, #16
 8008508:	f7ff ff90 	bl	800842c <malloc>
 800850c:	4602      	mov	r2, r0
 800850e:	6268      	str	r0, [r5, #36]	; 0x24
 8008510:	b920      	cbnz	r0, 800851c <_Bfree+0x20>
 8008512:	4b09      	ldr	r3, [pc, #36]	; (8008538 <_Bfree+0x3c>)
 8008514:	4809      	ldr	r0, [pc, #36]	; (800853c <_Bfree+0x40>)
 8008516:	218a      	movs	r1, #138	; 0x8a
 8008518:	f000 ff00 	bl	800931c <__assert_func>
 800851c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008520:	6006      	str	r6, [r0, #0]
 8008522:	60c6      	str	r6, [r0, #12]
 8008524:	b13c      	cbz	r4, 8008536 <_Bfree+0x3a>
 8008526:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008528:	6862      	ldr	r2, [r4, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008530:	6021      	str	r1, [r4, #0]
 8008532:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	0800a0ce 	.word	0x0800a0ce
 800853c:	0800a1cc 	.word	0x0800a1cc

08008540 <__multadd>:
 8008540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008544:	690d      	ldr	r5, [r1, #16]
 8008546:	4607      	mov	r7, r0
 8008548:	460c      	mov	r4, r1
 800854a:	461e      	mov	r6, r3
 800854c:	f101 0c14 	add.w	ip, r1, #20
 8008550:	2000      	movs	r0, #0
 8008552:	f8dc 3000 	ldr.w	r3, [ip]
 8008556:	b299      	uxth	r1, r3
 8008558:	fb02 6101 	mla	r1, r2, r1, r6
 800855c:	0c1e      	lsrs	r6, r3, #16
 800855e:	0c0b      	lsrs	r3, r1, #16
 8008560:	fb02 3306 	mla	r3, r2, r6, r3
 8008564:	b289      	uxth	r1, r1
 8008566:	3001      	adds	r0, #1
 8008568:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800856c:	4285      	cmp	r5, r0
 800856e:	f84c 1b04 	str.w	r1, [ip], #4
 8008572:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008576:	dcec      	bgt.n	8008552 <__multadd+0x12>
 8008578:	b30e      	cbz	r6, 80085be <__multadd+0x7e>
 800857a:	68a3      	ldr	r3, [r4, #8]
 800857c:	42ab      	cmp	r3, r5
 800857e:	dc19      	bgt.n	80085b4 <__multadd+0x74>
 8008580:	6861      	ldr	r1, [r4, #4]
 8008582:	4638      	mov	r0, r7
 8008584:	3101      	adds	r1, #1
 8008586:	f7ff ff79 	bl	800847c <_Balloc>
 800858a:	4680      	mov	r8, r0
 800858c:	b928      	cbnz	r0, 800859a <__multadd+0x5a>
 800858e:	4602      	mov	r2, r0
 8008590:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <__multadd+0x84>)
 8008592:	480d      	ldr	r0, [pc, #52]	; (80085c8 <__multadd+0x88>)
 8008594:	21b5      	movs	r1, #181	; 0xb5
 8008596:	f000 fec1 	bl	800931c <__assert_func>
 800859a:	6922      	ldr	r2, [r4, #16]
 800859c:	3202      	adds	r2, #2
 800859e:	f104 010c 	add.w	r1, r4, #12
 80085a2:	0092      	lsls	r2, r2, #2
 80085a4:	300c      	adds	r0, #12
 80085a6:	f7ff ff5b 	bl	8008460 <memcpy>
 80085aa:	4621      	mov	r1, r4
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff ffa5 	bl	80084fc <_Bfree>
 80085b2:	4644      	mov	r4, r8
 80085b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085b8:	3501      	adds	r5, #1
 80085ba:	615e      	str	r6, [r3, #20]
 80085bc:	6125      	str	r5, [r4, #16]
 80085be:	4620      	mov	r0, r4
 80085c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c4:	0800a140 	.word	0x0800a140
 80085c8:	0800a1cc 	.word	0x0800a1cc

080085cc <__s2b>:
 80085cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d0:	460c      	mov	r4, r1
 80085d2:	4615      	mov	r5, r2
 80085d4:	461f      	mov	r7, r3
 80085d6:	2209      	movs	r2, #9
 80085d8:	3308      	adds	r3, #8
 80085da:	4606      	mov	r6, r0
 80085dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80085e0:	2100      	movs	r1, #0
 80085e2:	2201      	movs	r2, #1
 80085e4:	429a      	cmp	r2, r3
 80085e6:	db09      	blt.n	80085fc <__s2b+0x30>
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff ff47 	bl	800847c <_Balloc>
 80085ee:	b940      	cbnz	r0, 8008602 <__s2b+0x36>
 80085f0:	4602      	mov	r2, r0
 80085f2:	4b19      	ldr	r3, [pc, #100]	; (8008658 <__s2b+0x8c>)
 80085f4:	4819      	ldr	r0, [pc, #100]	; (800865c <__s2b+0x90>)
 80085f6:	21ce      	movs	r1, #206	; 0xce
 80085f8:	f000 fe90 	bl	800931c <__assert_func>
 80085fc:	0052      	lsls	r2, r2, #1
 80085fe:	3101      	adds	r1, #1
 8008600:	e7f0      	b.n	80085e4 <__s2b+0x18>
 8008602:	9b08      	ldr	r3, [sp, #32]
 8008604:	6143      	str	r3, [r0, #20]
 8008606:	2d09      	cmp	r5, #9
 8008608:	f04f 0301 	mov.w	r3, #1
 800860c:	6103      	str	r3, [r0, #16]
 800860e:	dd16      	ble.n	800863e <__s2b+0x72>
 8008610:	f104 0909 	add.w	r9, r4, #9
 8008614:	46c8      	mov	r8, r9
 8008616:	442c      	add	r4, r5
 8008618:	f818 3b01 	ldrb.w	r3, [r8], #1
 800861c:	4601      	mov	r1, r0
 800861e:	3b30      	subs	r3, #48	; 0x30
 8008620:	220a      	movs	r2, #10
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff ff8c 	bl	8008540 <__multadd>
 8008628:	45a0      	cmp	r8, r4
 800862a:	d1f5      	bne.n	8008618 <__s2b+0x4c>
 800862c:	f1a5 0408 	sub.w	r4, r5, #8
 8008630:	444c      	add	r4, r9
 8008632:	1b2d      	subs	r5, r5, r4
 8008634:	1963      	adds	r3, r4, r5
 8008636:	42bb      	cmp	r3, r7
 8008638:	db04      	blt.n	8008644 <__s2b+0x78>
 800863a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800863e:	340a      	adds	r4, #10
 8008640:	2509      	movs	r5, #9
 8008642:	e7f6      	b.n	8008632 <__s2b+0x66>
 8008644:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008648:	4601      	mov	r1, r0
 800864a:	3b30      	subs	r3, #48	; 0x30
 800864c:	220a      	movs	r2, #10
 800864e:	4630      	mov	r0, r6
 8008650:	f7ff ff76 	bl	8008540 <__multadd>
 8008654:	e7ee      	b.n	8008634 <__s2b+0x68>
 8008656:	bf00      	nop
 8008658:	0800a140 	.word	0x0800a140
 800865c:	0800a1cc 	.word	0x0800a1cc

08008660 <__hi0bits>:
 8008660:	0c03      	lsrs	r3, r0, #16
 8008662:	041b      	lsls	r3, r3, #16
 8008664:	b9d3      	cbnz	r3, 800869c <__hi0bits+0x3c>
 8008666:	0400      	lsls	r0, r0, #16
 8008668:	2310      	movs	r3, #16
 800866a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800866e:	bf04      	itt	eq
 8008670:	0200      	lsleq	r0, r0, #8
 8008672:	3308      	addeq	r3, #8
 8008674:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008678:	bf04      	itt	eq
 800867a:	0100      	lsleq	r0, r0, #4
 800867c:	3304      	addeq	r3, #4
 800867e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008682:	bf04      	itt	eq
 8008684:	0080      	lsleq	r0, r0, #2
 8008686:	3302      	addeq	r3, #2
 8008688:	2800      	cmp	r0, #0
 800868a:	db05      	blt.n	8008698 <__hi0bits+0x38>
 800868c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008690:	f103 0301 	add.w	r3, r3, #1
 8008694:	bf08      	it	eq
 8008696:	2320      	moveq	r3, #32
 8008698:	4618      	mov	r0, r3
 800869a:	4770      	bx	lr
 800869c:	2300      	movs	r3, #0
 800869e:	e7e4      	b.n	800866a <__hi0bits+0xa>

080086a0 <__lo0bits>:
 80086a0:	6803      	ldr	r3, [r0, #0]
 80086a2:	f013 0207 	ands.w	r2, r3, #7
 80086a6:	4601      	mov	r1, r0
 80086a8:	d00b      	beq.n	80086c2 <__lo0bits+0x22>
 80086aa:	07da      	lsls	r2, r3, #31
 80086ac:	d423      	bmi.n	80086f6 <__lo0bits+0x56>
 80086ae:	0798      	lsls	r0, r3, #30
 80086b0:	bf49      	itett	mi
 80086b2:	085b      	lsrmi	r3, r3, #1
 80086b4:	089b      	lsrpl	r3, r3, #2
 80086b6:	2001      	movmi	r0, #1
 80086b8:	600b      	strmi	r3, [r1, #0]
 80086ba:	bf5c      	itt	pl
 80086bc:	600b      	strpl	r3, [r1, #0]
 80086be:	2002      	movpl	r0, #2
 80086c0:	4770      	bx	lr
 80086c2:	b298      	uxth	r0, r3
 80086c4:	b9a8      	cbnz	r0, 80086f2 <__lo0bits+0x52>
 80086c6:	0c1b      	lsrs	r3, r3, #16
 80086c8:	2010      	movs	r0, #16
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	b90a      	cbnz	r2, 80086d2 <__lo0bits+0x32>
 80086ce:	3008      	adds	r0, #8
 80086d0:	0a1b      	lsrs	r3, r3, #8
 80086d2:	071a      	lsls	r2, r3, #28
 80086d4:	bf04      	itt	eq
 80086d6:	091b      	lsreq	r3, r3, #4
 80086d8:	3004      	addeq	r0, #4
 80086da:	079a      	lsls	r2, r3, #30
 80086dc:	bf04      	itt	eq
 80086de:	089b      	lsreq	r3, r3, #2
 80086e0:	3002      	addeq	r0, #2
 80086e2:	07da      	lsls	r2, r3, #31
 80086e4:	d403      	bmi.n	80086ee <__lo0bits+0x4e>
 80086e6:	085b      	lsrs	r3, r3, #1
 80086e8:	f100 0001 	add.w	r0, r0, #1
 80086ec:	d005      	beq.n	80086fa <__lo0bits+0x5a>
 80086ee:	600b      	str	r3, [r1, #0]
 80086f0:	4770      	bx	lr
 80086f2:	4610      	mov	r0, r2
 80086f4:	e7e9      	b.n	80086ca <__lo0bits+0x2a>
 80086f6:	2000      	movs	r0, #0
 80086f8:	4770      	bx	lr
 80086fa:	2020      	movs	r0, #32
 80086fc:	4770      	bx	lr
	...

08008700 <__i2b>:
 8008700:	b510      	push	{r4, lr}
 8008702:	460c      	mov	r4, r1
 8008704:	2101      	movs	r1, #1
 8008706:	f7ff feb9 	bl	800847c <_Balloc>
 800870a:	4602      	mov	r2, r0
 800870c:	b928      	cbnz	r0, 800871a <__i2b+0x1a>
 800870e:	4b05      	ldr	r3, [pc, #20]	; (8008724 <__i2b+0x24>)
 8008710:	4805      	ldr	r0, [pc, #20]	; (8008728 <__i2b+0x28>)
 8008712:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008716:	f000 fe01 	bl	800931c <__assert_func>
 800871a:	2301      	movs	r3, #1
 800871c:	6144      	str	r4, [r0, #20]
 800871e:	6103      	str	r3, [r0, #16]
 8008720:	bd10      	pop	{r4, pc}
 8008722:	bf00      	nop
 8008724:	0800a140 	.word	0x0800a140
 8008728:	0800a1cc 	.word	0x0800a1cc

0800872c <__multiply>:
 800872c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008730:	4691      	mov	r9, r2
 8008732:	690a      	ldr	r2, [r1, #16]
 8008734:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008738:	429a      	cmp	r2, r3
 800873a:	bfb8      	it	lt
 800873c:	460b      	movlt	r3, r1
 800873e:	460c      	mov	r4, r1
 8008740:	bfbc      	itt	lt
 8008742:	464c      	movlt	r4, r9
 8008744:	4699      	movlt	r9, r3
 8008746:	6927      	ldr	r7, [r4, #16]
 8008748:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800874c:	68a3      	ldr	r3, [r4, #8]
 800874e:	6861      	ldr	r1, [r4, #4]
 8008750:	eb07 060a 	add.w	r6, r7, sl
 8008754:	42b3      	cmp	r3, r6
 8008756:	b085      	sub	sp, #20
 8008758:	bfb8      	it	lt
 800875a:	3101      	addlt	r1, #1
 800875c:	f7ff fe8e 	bl	800847c <_Balloc>
 8008760:	b930      	cbnz	r0, 8008770 <__multiply+0x44>
 8008762:	4602      	mov	r2, r0
 8008764:	4b44      	ldr	r3, [pc, #272]	; (8008878 <__multiply+0x14c>)
 8008766:	4845      	ldr	r0, [pc, #276]	; (800887c <__multiply+0x150>)
 8008768:	f240 115d 	movw	r1, #349	; 0x15d
 800876c:	f000 fdd6 	bl	800931c <__assert_func>
 8008770:	f100 0514 	add.w	r5, r0, #20
 8008774:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008778:	462b      	mov	r3, r5
 800877a:	2200      	movs	r2, #0
 800877c:	4543      	cmp	r3, r8
 800877e:	d321      	bcc.n	80087c4 <__multiply+0x98>
 8008780:	f104 0314 	add.w	r3, r4, #20
 8008784:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008788:	f109 0314 	add.w	r3, r9, #20
 800878c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008790:	9202      	str	r2, [sp, #8]
 8008792:	1b3a      	subs	r2, r7, r4
 8008794:	3a15      	subs	r2, #21
 8008796:	f022 0203 	bic.w	r2, r2, #3
 800879a:	3204      	adds	r2, #4
 800879c:	f104 0115 	add.w	r1, r4, #21
 80087a0:	428f      	cmp	r7, r1
 80087a2:	bf38      	it	cc
 80087a4:	2204      	movcc	r2, #4
 80087a6:	9201      	str	r2, [sp, #4]
 80087a8:	9a02      	ldr	r2, [sp, #8]
 80087aa:	9303      	str	r3, [sp, #12]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d80c      	bhi.n	80087ca <__multiply+0x9e>
 80087b0:	2e00      	cmp	r6, #0
 80087b2:	dd03      	ble.n	80087bc <__multiply+0x90>
 80087b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d05a      	beq.n	8008872 <__multiply+0x146>
 80087bc:	6106      	str	r6, [r0, #16]
 80087be:	b005      	add	sp, #20
 80087c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c4:	f843 2b04 	str.w	r2, [r3], #4
 80087c8:	e7d8      	b.n	800877c <__multiply+0x50>
 80087ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80087ce:	f1ba 0f00 	cmp.w	sl, #0
 80087d2:	d024      	beq.n	800881e <__multiply+0xf2>
 80087d4:	f104 0e14 	add.w	lr, r4, #20
 80087d8:	46a9      	mov	r9, r5
 80087da:	f04f 0c00 	mov.w	ip, #0
 80087de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087e2:	f8d9 1000 	ldr.w	r1, [r9]
 80087e6:	fa1f fb82 	uxth.w	fp, r2
 80087ea:	b289      	uxth	r1, r1
 80087ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80087f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087f4:	f8d9 2000 	ldr.w	r2, [r9]
 80087f8:	4461      	add	r1, ip
 80087fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008802:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008806:	b289      	uxth	r1, r1
 8008808:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800880c:	4577      	cmp	r7, lr
 800880e:	f849 1b04 	str.w	r1, [r9], #4
 8008812:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008816:	d8e2      	bhi.n	80087de <__multiply+0xb2>
 8008818:	9a01      	ldr	r2, [sp, #4]
 800881a:	f845 c002 	str.w	ip, [r5, r2]
 800881e:	9a03      	ldr	r2, [sp, #12]
 8008820:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008824:	3304      	adds	r3, #4
 8008826:	f1b9 0f00 	cmp.w	r9, #0
 800882a:	d020      	beq.n	800886e <__multiply+0x142>
 800882c:	6829      	ldr	r1, [r5, #0]
 800882e:	f104 0c14 	add.w	ip, r4, #20
 8008832:	46ae      	mov	lr, r5
 8008834:	f04f 0a00 	mov.w	sl, #0
 8008838:	f8bc b000 	ldrh.w	fp, [ip]
 800883c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008840:	fb09 220b 	mla	r2, r9, fp, r2
 8008844:	4492      	add	sl, r2
 8008846:	b289      	uxth	r1, r1
 8008848:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800884c:	f84e 1b04 	str.w	r1, [lr], #4
 8008850:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008854:	f8be 1000 	ldrh.w	r1, [lr]
 8008858:	0c12      	lsrs	r2, r2, #16
 800885a:	fb09 1102 	mla	r1, r9, r2, r1
 800885e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008862:	4567      	cmp	r7, ip
 8008864:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008868:	d8e6      	bhi.n	8008838 <__multiply+0x10c>
 800886a:	9a01      	ldr	r2, [sp, #4]
 800886c:	50a9      	str	r1, [r5, r2]
 800886e:	3504      	adds	r5, #4
 8008870:	e79a      	b.n	80087a8 <__multiply+0x7c>
 8008872:	3e01      	subs	r6, #1
 8008874:	e79c      	b.n	80087b0 <__multiply+0x84>
 8008876:	bf00      	nop
 8008878:	0800a140 	.word	0x0800a140
 800887c:	0800a1cc 	.word	0x0800a1cc

08008880 <__pow5mult>:
 8008880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008884:	4615      	mov	r5, r2
 8008886:	f012 0203 	ands.w	r2, r2, #3
 800888a:	4606      	mov	r6, r0
 800888c:	460f      	mov	r7, r1
 800888e:	d007      	beq.n	80088a0 <__pow5mult+0x20>
 8008890:	4c25      	ldr	r4, [pc, #148]	; (8008928 <__pow5mult+0xa8>)
 8008892:	3a01      	subs	r2, #1
 8008894:	2300      	movs	r3, #0
 8008896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800889a:	f7ff fe51 	bl	8008540 <__multadd>
 800889e:	4607      	mov	r7, r0
 80088a0:	10ad      	asrs	r5, r5, #2
 80088a2:	d03d      	beq.n	8008920 <__pow5mult+0xa0>
 80088a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088a6:	b97c      	cbnz	r4, 80088c8 <__pow5mult+0x48>
 80088a8:	2010      	movs	r0, #16
 80088aa:	f7ff fdbf 	bl	800842c <malloc>
 80088ae:	4602      	mov	r2, r0
 80088b0:	6270      	str	r0, [r6, #36]	; 0x24
 80088b2:	b928      	cbnz	r0, 80088c0 <__pow5mult+0x40>
 80088b4:	4b1d      	ldr	r3, [pc, #116]	; (800892c <__pow5mult+0xac>)
 80088b6:	481e      	ldr	r0, [pc, #120]	; (8008930 <__pow5mult+0xb0>)
 80088b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088bc:	f000 fd2e 	bl	800931c <__assert_func>
 80088c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088c4:	6004      	str	r4, [r0, #0]
 80088c6:	60c4      	str	r4, [r0, #12]
 80088c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088d0:	b94c      	cbnz	r4, 80088e6 <__pow5mult+0x66>
 80088d2:	f240 2171 	movw	r1, #625	; 0x271
 80088d6:	4630      	mov	r0, r6
 80088d8:	f7ff ff12 	bl	8008700 <__i2b>
 80088dc:	2300      	movs	r3, #0
 80088de:	f8c8 0008 	str.w	r0, [r8, #8]
 80088e2:	4604      	mov	r4, r0
 80088e4:	6003      	str	r3, [r0, #0]
 80088e6:	f04f 0900 	mov.w	r9, #0
 80088ea:	07eb      	lsls	r3, r5, #31
 80088ec:	d50a      	bpl.n	8008904 <__pow5mult+0x84>
 80088ee:	4639      	mov	r1, r7
 80088f0:	4622      	mov	r2, r4
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7ff ff1a 	bl	800872c <__multiply>
 80088f8:	4639      	mov	r1, r7
 80088fa:	4680      	mov	r8, r0
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7ff fdfd 	bl	80084fc <_Bfree>
 8008902:	4647      	mov	r7, r8
 8008904:	106d      	asrs	r5, r5, #1
 8008906:	d00b      	beq.n	8008920 <__pow5mult+0xa0>
 8008908:	6820      	ldr	r0, [r4, #0]
 800890a:	b938      	cbnz	r0, 800891c <__pow5mult+0x9c>
 800890c:	4622      	mov	r2, r4
 800890e:	4621      	mov	r1, r4
 8008910:	4630      	mov	r0, r6
 8008912:	f7ff ff0b 	bl	800872c <__multiply>
 8008916:	6020      	str	r0, [r4, #0]
 8008918:	f8c0 9000 	str.w	r9, [r0]
 800891c:	4604      	mov	r4, r0
 800891e:	e7e4      	b.n	80088ea <__pow5mult+0x6a>
 8008920:	4638      	mov	r0, r7
 8008922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008926:	bf00      	nop
 8008928:	0800a318 	.word	0x0800a318
 800892c:	0800a0ce 	.word	0x0800a0ce
 8008930:	0800a1cc 	.word	0x0800a1cc

08008934 <__lshift>:
 8008934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008938:	460c      	mov	r4, r1
 800893a:	6849      	ldr	r1, [r1, #4]
 800893c:	6923      	ldr	r3, [r4, #16]
 800893e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008942:	68a3      	ldr	r3, [r4, #8]
 8008944:	4607      	mov	r7, r0
 8008946:	4691      	mov	r9, r2
 8008948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800894c:	f108 0601 	add.w	r6, r8, #1
 8008950:	42b3      	cmp	r3, r6
 8008952:	db0b      	blt.n	800896c <__lshift+0x38>
 8008954:	4638      	mov	r0, r7
 8008956:	f7ff fd91 	bl	800847c <_Balloc>
 800895a:	4605      	mov	r5, r0
 800895c:	b948      	cbnz	r0, 8008972 <__lshift+0x3e>
 800895e:	4602      	mov	r2, r0
 8008960:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <__lshift+0xd8>)
 8008962:	482b      	ldr	r0, [pc, #172]	; (8008a10 <__lshift+0xdc>)
 8008964:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008968:	f000 fcd8 	bl	800931c <__assert_func>
 800896c:	3101      	adds	r1, #1
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	e7ee      	b.n	8008950 <__lshift+0x1c>
 8008972:	2300      	movs	r3, #0
 8008974:	f100 0114 	add.w	r1, r0, #20
 8008978:	f100 0210 	add.w	r2, r0, #16
 800897c:	4618      	mov	r0, r3
 800897e:	4553      	cmp	r3, sl
 8008980:	db37      	blt.n	80089f2 <__lshift+0xbe>
 8008982:	6920      	ldr	r0, [r4, #16]
 8008984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008988:	f104 0314 	add.w	r3, r4, #20
 800898c:	f019 091f 	ands.w	r9, r9, #31
 8008990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008994:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008998:	d02f      	beq.n	80089fa <__lshift+0xc6>
 800899a:	f1c9 0e20 	rsb	lr, r9, #32
 800899e:	468a      	mov	sl, r1
 80089a0:	f04f 0c00 	mov.w	ip, #0
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	fa02 f209 	lsl.w	r2, r2, r9
 80089aa:	ea42 020c 	orr.w	r2, r2, ip
 80089ae:	f84a 2b04 	str.w	r2, [sl], #4
 80089b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b6:	4298      	cmp	r0, r3
 80089b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80089bc:	d8f2      	bhi.n	80089a4 <__lshift+0x70>
 80089be:	1b03      	subs	r3, r0, r4
 80089c0:	3b15      	subs	r3, #21
 80089c2:	f023 0303 	bic.w	r3, r3, #3
 80089c6:	3304      	adds	r3, #4
 80089c8:	f104 0215 	add.w	r2, r4, #21
 80089cc:	4290      	cmp	r0, r2
 80089ce:	bf38      	it	cc
 80089d0:	2304      	movcc	r3, #4
 80089d2:	f841 c003 	str.w	ip, [r1, r3]
 80089d6:	f1bc 0f00 	cmp.w	ip, #0
 80089da:	d001      	beq.n	80089e0 <__lshift+0xac>
 80089dc:	f108 0602 	add.w	r6, r8, #2
 80089e0:	3e01      	subs	r6, #1
 80089e2:	4638      	mov	r0, r7
 80089e4:	612e      	str	r6, [r5, #16]
 80089e6:	4621      	mov	r1, r4
 80089e8:	f7ff fd88 	bl	80084fc <_Bfree>
 80089ec:	4628      	mov	r0, r5
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80089f6:	3301      	adds	r3, #1
 80089f8:	e7c1      	b.n	800897e <__lshift+0x4a>
 80089fa:	3904      	subs	r1, #4
 80089fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a00:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a04:	4298      	cmp	r0, r3
 8008a06:	d8f9      	bhi.n	80089fc <__lshift+0xc8>
 8008a08:	e7ea      	b.n	80089e0 <__lshift+0xac>
 8008a0a:	bf00      	nop
 8008a0c:	0800a140 	.word	0x0800a140
 8008a10:	0800a1cc 	.word	0x0800a1cc

08008a14 <__mcmp>:
 8008a14:	b530      	push	{r4, r5, lr}
 8008a16:	6902      	ldr	r2, [r0, #16]
 8008a18:	690c      	ldr	r4, [r1, #16]
 8008a1a:	1b12      	subs	r2, r2, r4
 8008a1c:	d10e      	bne.n	8008a3c <__mcmp+0x28>
 8008a1e:	f100 0314 	add.w	r3, r0, #20
 8008a22:	3114      	adds	r1, #20
 8008a24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a34:	42a5      	cmp	r5, r4
 8008a36:	d003      	beq.n	8008a40 <__mcmp+0x2c>
 8008a38:	d305      	bcc.n	8008a46 <__mcmp+0x32>
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	bd30      	pop	{r4, r5, pc}
 8008a40:	4283      	cmp	r3, r0
 8008a42:	d3f3      	bcc.n	8008a2c <__mcmp+0x18>
 8008a44:	e7fa      	b.n	8008a3c <__mcmp+0x28>
 8008a46:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4a:	e7f7      	b.n	8008a3c <__mcmp+0x28>

08008a4c <__mdiff>:
 8008a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	460c      	mov	r4, r1
 8008a52:	4606      	mov	r6, r0
 8008a54:	4611      	mov	r1, r2
 8008a56:	4620      	mov	r0, r4
 8008a58:	4690      	mov	r8, r2
 8008a5a:	f7ff ffdb 	bl	8008a14 <__mcmp>
 8008a5e:	1e05      	subs	r5, r0, #0
 8008a60:	d110      	bne.n	8008a84 <__mdiff+0x38>
 8008a62:	4629      	mov	r1, r5
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff fd09 	bl	800847c <_Balloc>
 8008a6a:	b930      	cbnz	r0, 8008a7a <__mdiff+0x2e>
 8008a6c:	4b3a      	ldr	r3, [pc, #232]	; (8008b58 <__mdiff+0x10c>)
 8008a6e:	4602      	mov	r2, r0
 8008a70:	f240 2132 	movw	r1, #562	; 0x232
 8008a74:	4839      	ldr	r0, [pc, #228]	; (8008b5c <__mdiff+0x110>)
 8008a76:	f000 fc51 	bl	800931c <__assert_func>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a84:	bfa4      	itt	ge
 8008a86:	4643      	movge	r3, r8
 8008a88:	46a0      	movge	r8, r4
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a90:	bfa6      	itte	ge
 8008a92:	461c      	movge	r4, r3
 8008a94:	2500      	movge	r5, #0
 8008a96:	2501      	movlt	r5, #1
 8008a98:	f7ff fcf0 	bl	800847c <_Balloc>
 8008a9c:	b920      	cbnz	r0, 8008aa8 <__mdiff+0x5c>
 8008a9e:	4b2e      	ldr	r3, [pc, #184]	; (8008b58 <__mdiff+0x10c>)
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008aa6:	e7e5      	b.n	8008a74 <__mdiff+0x28>
 8008aa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008aac:	6926      	ldr	r6, [r4, #16]
 8008aae:	60c5      	str	r5, [r0, #12]
 8008ab0:	f104 0914 	add.w	r9, r4, #20
 8008ab4:	f108 0514 	add.w	r5, r8, #20
 8008ab8:	f100 0e14 	add.w	lr, r0, #20
 8008abc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ac0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ac4:	f108 0210 	add.w	r2, r8, #16
 8008ac8:	46f2      	mov	sl, lr
 8008aca:	2100      	movs	r1, #0
 8008acc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ad0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ad4:	fa1f f883 	uxth.w	r8, r3
 8008ad8:	fa11 f18b 	uxtah	r1, r1, fp
 8008adc:	0c1b      	lsrs	r3, r3, #16
 8008ade:	eba1 0808 	sub.w	r8, r1, r8
 8008ae2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ae6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008aea:	fa1f f888 	uxth.w	r8, r8
 8008aee:	1419      	asrs	r1, r3, #16
 8008af0:	454e      	cmp	r6, r9
 8008af2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008af6:	f84a 3b04 	str.w	r3, [sl], #4
 8008afa:	d8e7      	bhi.n	8008acc <__mdiff+0x80>
 8008afc:	1b33      	subs	r3, r6, r4
 8008afe:	3b15      	subs	r3, #21
 8008b00:	f023 0303 	bic.w	r3, r3, #3
 8008b04:	3304      	adds	r3, #4
 8008b06:	3415      	adds	r4, #21
 8008b08:	42a6      	cmp	r6, r4
 8008b0a:	bf38      	it	cc
 8008b0c:	2304      	movcc	r3, #4
 8008b0e:	441d      	add	r5, r3
 8008b10:	4473      	add	r3, lr
 8008b12:	469e      	mov	lr, r3
 8008b14:	462e      	mov	r6, r5
 8008b16:	4566      	cmp	r6, ip
 8008b18:	d30e      	bcc.n	8008b38 <__mdiff+0xec>
 8008b1a:	f10c 0203 	add.w	r2, ip, #3
 8008b1e:	1b52      	subs	r2, r2, r5
 8008b20:	f022 0203 	bic.w	r2, r2, #3
 8008b24:	3d03      	subs	r5, #3
 8008b26:	45ac      	cmp	ip, r5
 8008b28:	bf38      	it	cc
 8008b2a:	2200      	movcc	r2, #0
 8008b2c:	441a      	add	r2, r3
 8008b2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b32:	b17b      	cbz	r3, 8008b54 <__mdiff+0x108>
 8008b34:	6107      	str	r7, [r0, #16]
 8008b36:	e7a3      	b.n	8008a80 <__mdiff+0x34>
 8008b38:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b3c:	fa11 f288 	uxtah	r2, r1, r8
 8008b40:	1414      	asrs	r4, r2, #16
 8008b42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b46:	b292      	uxth	r2, r2
 8008b48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b4c:	f84e 2b04 	str.w	r2, [lr], #4
 8008b50:	1421      	asrs	r1, r4, #16
 8008b52:	e7e0      	b.n	8008b16 <__mdiff+0xca>
 8008b54:	3f01      	subs	r7, #1
 8008b56:	e7ea      	b.n	8008b2e <__mdiff+0xe2>
 8008b58:	0800a140 	.word	0x0800a140
 8008b5c:	0800a1cc 	.word	0x0800a1cc

08008b60 <__ulp>:
 8008b60:	b082      	sub	sp, #8
 8008b62:	ed8d 0b00 	vstr	d0, [sp]
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	4912      	ldr	r1, [pc, #72]	; (8008bb4 <__ulp+0x54>)
 8008b6a:	4019      	ands	r1, r3
 8008b6c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008b70:	2900      	cmp	r1, #0
 8008b72:	dd05      	ble.n	8008b80 <__ulp+0x20>
 8008b74:	2200      	movs	r2, #0
 8008b76:	460b      	mov	r3, r1
 8008b78:	ec43 2b10 	vmov	d0, r2, r3
 8008b7c:	b002      	add	sp, #8
 8008b7e:	4770      	bx	lr
 8008b80:	4249      	negs	r1, r1
 8008b82:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008b86:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008b8a:	f04f 0200 	mov.w	r2, #0
 8008b8e:	f04f 0300 	mov.w	r3, #0
 8008b92:	da04      	bge.n	8008b9e <__ulp+0x3e>
 8008b94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008b98:	fa41 f300 	asr.w	r3, r1, r0
 8008b9c:	e7ec      	b.n	8008b78 <__ulp+0x18>
 8008b9e:	f1a0 0114 	sub.w	r1, r0, #20
 8008ba2:	291e      	cmp	r1, #30
 8008ba4:	bfda      	itte	le
 8008ba6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008baa:	fa20 f101 	lsrle.w	r1, r0, r1
 8008bae:	2101      	movgt	r1, #1
 8008bb0:	460a      	mov	r2, r1
 8008bb2:	e7e1      	b.n	8008b78 <__ulp+0x18>
 8008bb4:	7ff00000 	.word	0x7ff00000

08008bb8 <__b2d>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	6905      	ldr	r5, [r0, #16]
 8008bbc:	f100 0714 	add.w	r7, r0, #20
 8008bc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008bc4:	1f2e      	subs	r6, r5, #4
 8008bc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7ff fd48 	bl	8008660 <__hi0bits>
 8008bd0:	f1c0 0320 	rsb	r3, r0, #32
 8008bd4:	280a      	cmp	r0, #10
 8008bd6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008c54 <__b2d+0x9c>
 8008bda:	600b      	str	r3, [r1, #0]
 8008bdc:	dc14      	bgt.n	8008c08 <__b2d+0x50>
 8008bde:	f1c0 0e0b 	rsb	lr, r0, #11
 8008be2:	fa24 f10e 	lsr.w	r1, r4, lr
 8008be6:	42b7      	cmp	r7, r6
 8008be8:	ea41 030c 	orr.w	r3, r1, ip
 8008bec:	bf34      	ite	cc
 8008bee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008bf2:	2100      	movcs	r1, #0
 8008bf4:	3015      	adds	r0, #21
 8008bf6:	fa04 f000 	lsl.w	r0, r4, r0
 8008bfa:	fa21 f10e 	lsr.w	r1, r1, lr
 8008bfe:	ea40 0201 	orr.w	r2, r0, r1
 8008c02:	ec43 2b10 	vmov	d0, r2, r3
 8008c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c08:	42b7      	cmp	r7, r6
 8008c0a:	bf3a      	itte	cc
 8008c0c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c10:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c14:	2100      	movcs	r1, #0
 8008c16:	380b      	subs	r0, #11
 8008c18:	d017      	beq.n	8008c4a <__b2d+0x92>
 8008c1a:	f1c0 0c20 	rsb	ip, r0, #32
 8008c1e:	fa04 f500 	lsl.w	r5, r4, r0
 8008c22:	42be      	cmp	r6, r7
 8008c24:	fa21 f40c 	lsr.w	r4, r1, ip
 8008c28:	ea45 0504 	orr.w	r5, r5, r4
 8008c2c:	bf8c      	ite	hi
 8008c2e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c32:	2400      	movls	r4, #0
 8008c34:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008c38:	fa01 f000 	lsl.w	r0, r1, r0
 8008c3c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008c40:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c44:	ea40 0204 	orr.w	r2, r0, r4
 8008c48:	e7db      	b.n	8008c02 <__b2d+0x4a>
 8008c4a:	ea44 030c 	orr.w	r3, r4, ip
 8008c4e:	460a      	mov	r2, r1
 8008c50:	e7d7      	b.n	8008c02 <__b2d+0x4a>
 8008c52:	bf00      	nop
 8008c54:	3ff00000 	.word	0x3ff00000

08008c58 <__d2b>:
 8008c58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	4689      	mov	r9, r1
 8008c5e:	2101      	movs	r1, #1
 8008c60:	ec57 6b10 	vmov	r6, r7, d0
 8008c64:	4690      	mov	r8, r2
 8008c66:	f7ff fc09 	bl	800847c <_Balloc>
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	b930      	cbnz	r0, 8008c7c <__d2b+0x24>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b25      	ldr	r3, [pc, #148]	; (8008d08 <__d2b+0xb0>)
 8008c72:	4826      	ldr	r0, [pc, #152]	; (8008d0c <__d2b+0xb4>)
 8008c74:	f240 310a 	movw	r1, #778	; 0x30a
 8008c78:	f000 fb50 	bl	800931c <__assert_func>
 8008c7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c84:	bb35      	cbnz	r5, 8008cd4 <__d2b+0x7c>
 8008c86:	2e00      	cmp	r6, #0
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	d028      	beq.n	8008cde <__d2b+0x86>
 8008c8c:	4668      	mov	r0, sp
 8008c8e:	9600      	str	r6, [sp, #0]
 8008c90:	f7ff fd06 	bl	80086a0 <__lo0bits>
 8008c94:	9900      	ldr	r1, [sp, #0]
 8008c96:	b300      	cbz	r0, 8008cda <__d2b+0x82>
 8008c98:	9a01      	ldr	r2, [sp, #4]
 8008c9a:	f1c0 0320 	rsb	r3, r0, #32
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	40c2      	lsrs	r2, r0
 8008ca6:	6163      	str	r3, [r4, #20]
 8008ca8:	9201      	str	r2, [sp, #4]
 8008caa:	9b01      	ldr	r3, [sp, #4]
 8008cac:	61a3      	str	r3, [r4, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bf14      	ite	ne
 8008cb2:	2202      	movne	r2, #2
 8008cb4:	2201      	moveq	r2, #1
 8008cb6:	6122      	str	r2, [r4, #16]
 8008cb8:	b1d5      	cbz	r5, 8008cf0 <__d2b+0x98>
 8008cba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cbe:	4405      	add	r5, r0
 8008cc0:	f8c9 5000 	str.w	r5, [r9]
 8008cc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cc8:	f8c8 0000 	str.w	r0, [r8]
 8008ccc:	4620      	mov	r0, r4
 8008cce:	b003      	add	sp, #12
 8008cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cd8:	e7d5      	b.n	8008c86 <__d2b+0x2e>
 8008cda:	6161      	str	r1, [r4, #20]
 8008cdc:	e7e5      	b.n	8008caa <__d2b+0x52>
 8008cde:	a801      	add	r0, sp, #4
 8008ce0:	f7ff fcde 	bl	80086a0 <__lo0bits>
 8008ce4:	9b01      	ldr	r3, [sp, #4]
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	6122      	str	r2, [r4, #16]
 8008cec:	3020      	adds	r0, #32
 8008cee:	e7e3      	b.n	8008cb8 <__d2b+0x60>
 8008cf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cf8:	f8c9 0000 	str.w	r0, [r9]
 8008cfc:	6918      	ldr	r0, [r3, #16]
 8008cfe:	f7ff fcaf 	bl	8008660 <__hi0bits>
 8008d02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d06:	e7df      	b.n	8008cc8 <__d2b+0x70>
 8008d08:	0800a140 	.word	0x0800a140
 8008d0c:	0800a1cc 	.word	0x0800a1cc

08008d10 <__ratio>:
 8008d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	4688      	mov	r8, r1
 8008d16:	4669      	mov	r1, sp
 8008d18:	4681      	mov	r9, r0
 8008d1a:	f7ff ff4d 	bl	8008bb8 <__b2d>
 8008d1e:	a901      	add	r1, sp, #4
 8008d20:	4640      	mov	r0, r8
 8008d22:	ec55 4b10 	vmov	r4, r5, d0
 8008d26:	f7ff ff47 	bl	8008bb8 <__b2d>
 8008d2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d32:	eba3 0c02 	sub.w	ip, r3, r2
 8008d36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d40:	ec51 0b10 	vmov	r0, r1, d0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfd6      	itet	le
 8008d48:	460a      	movle	r2, r1
 8008d4a:	462a      	movgt	r2, r5
 8008d4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d50:	468b      	mov	fp, r1
 8008d52:	462f      	mov	r7, r5
 8008d54:	bfd4      	ite	le
 8008d56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008d5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d5e:	4620      	mov	r0, r4
 8008d60:	ee10 2a10 	vmov	r2, s0
 8008d64:	465b      	mov	r3, fp
 8008d66:	4639      	mov	r1, r7
 8008d68:	f7f7 fd78 	bl	800085c <__aeabi_ddiv>
 8008d6c:	ec41 0b10 	vmov	d0, r0, r1
 8008d70:	b003      	add	sp, #12
 8008d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d76 <__copybits>:
 8008d76:	3901      	subs	r1, #1
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	1149      	asrs	r1, r1, #5
 8008d7c:	6914      	ldr	r4, [r2, #16]
 8008d7e:	3101      	adds	r1, #1
 8008d80:	f102 0314 	add.w	r3, r2, #20
 8008d84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d8c:	1f05      	subs	r5, r0, #4
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	d30c      	bcc.n	8008dac <__copybits+0x36>
 8008d92:	1aa3      	subs	r3, r4, r2
 8008d94:	3b11      	subs	r3, #17
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	3211      	adds	r2, #17
 8008d9c:	42a2      	cmp	r2, r4
 8008d9e:	bf88      	it	hi
 8008da0:	2300      	movhi	r3, #0
 8008da2:	4418      	add	r0, r3
 8008da4:	2300      	movs	r3, #0
 8008da6:	4288      	cmp	r0, r1
 8008da8:	d305      	bcc.n	8008db6 <__copybits+0x40>
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	f853 6b04 	ldr.w	r6, [r3], #4
 8008db0:	f845 6f04 	str.w	r6, [r5, #4]!
 8008db4:	e7eb      	b.n	8008d8e <__copybits+0x18>
 8008db6:	f840 3b04 	str.w	r3, [r0], #4
 8008dba:	e7f4      	b.n	8008da6 <__copybits+0x30>

08008dbc <__any_on>:
 8008dbc:	f100 0214 	add.w	r2, r0, #20
 8008dc0:	6900      	ldr	r0, [r0, #16]
 8008dc2:	114b      	asrs	r3, r1, #5
 8008dc4:	4298      	cmp	r0, r3
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	db11      	blt.n	8008dee <__any_on+0x32>
 8008dca:	dd0a      	ble.n	8008de2 <__any_on+0x26>
 8008dcc:	f011 011f 	ands.w	r1, r1, #31
 8008dd0:	d007      	beq.n	8008de2 <__any_on+0x26>
 8008dd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008dd6:	fa24 f001 	lsr.w	r0, r4, r1
 8008dda:	fa00 f101 	lsl.w	r1, r0, r1
 8008dde:	428c      	cmp	r4, r1
 8008de0:	d10b      	bne.n	8008dfa <__any_on+0x3e>
 8008de2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d803      	bhi.n	8008df2 <__any_on+0x36>
 8008dea:	2000      	movs	r0, #0
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	4603      	mov	r3, r0
 8008df0:	e7f7      	b.n	8008de2 <__any_on+0x26>
 8008df2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008df6:	2900      	cmp	r1, #0
 8008df8:	d0f5      	beq.n	8008de6 <__any_on+0x2a>
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	e7f6      	b.n	8008dec <__any_on+0x30>

08008dfe <_calloc_r>:
 8008dfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e00:	fba1 2402 	umull	r2, r4, r1, r2
 8008e04:	b94c      	cbnz	r4, 8008e1a <_calloc_r+0x1c>
 8008e06:	4611      	mov	r1, r2
 8008e08:	9201      	str	r2, [sp, #4]
 8008e0a:	f000 f87b 	bl	8008f04 <_malloc_r>
 8008e0e:	9a01      	ldr	r2, [sp, #4]
 8008e10:	4605      	mov	r5, r0
 8008e12:	b930      	cbnz	r0, 8008e22 <_calloc_r+0x24>
 8008e14:	4628      	mov	r0, r5
 8008e16:	b003      	add	sp, #12
 8008e18:	bd30      	pop	{r4, r5, pc}
 8008e1a:	220c      	movs	r2, #12
 8008e1c:	6002      	str	r2, [r0, #0]
 8008e1e:	2500      	movs	r5, #0
 8008e20:	e7f8      	b.n	8008e14 <_calloc_r+0x16>
 8008e22:	4621      	mov	r1, r4
 8008e24:	f7fc fbc0 	bl	80055a8 <memset>
 8008e28:	e7f4      	b.n	8008e14 <_calloc_r+0x16>
	...

08008e2c <_free_r>:
 8008e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	d044      	beq.n	8008ebc <_free_r+0x90>
 8008e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e36:	9001      	str	r0, [sp, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e3e:	bfb8      	it	lt
 8008e40:	18e4      	addlt	r4, r4, r3
 8008e42:	f000 fab5 	bl	80093b0 <__malloc_lock>
 8008e46:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <_free_r+0x94>)
 8008e48:	9801      	ldr	r0, [sp, #4]
 8008e4a:	6813      	ldr	r3, [r2, #0]
 8008e4c:	b933      	cbnz	r3, 8008e5c <_free_r+0x30>
 8008e4e:	6063      	str	r3, [r4, #4]
 8008e50:	6014      	str	r4, [r2, #0]
 8008e52:	b003      	add	sp, #12
 8008e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e58:	f000 bab0 	b.w	80093bc <__malloc_unlock>
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	d908      	bls.n	8008e72 <_free_r+0x46>
 8008e60:	6825      	ldr	r5, [r4, #0]
 8008e62:	1961      	adds	r1, r4, r5
 8008e64:	428b      	cmp	r3, r1
 8008e66:	bf01      	itttt	eq
 8008e68:	6819      	ldreq	r1, [r3, #0]
 8008e6a:	685b      	ldreq	r3, [r3, #4]
 8008e6c:	1949      	addeq	r1, r1, r5
 8008e6e:	6021      	streq	r1, [r4, #0]
 8008e70:	e7ed      	b.n	8008e4e <_free_r+0x22>
 8008e72:	461a      	mov	r2, r3
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	b10b      	cbz	r3, 8008e7c <_free_r+0x50>
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	d9fa      	bls.n	8008e72 <_free_r+0x46>
 8008e7c:	6811      	ldr	r1, [r2, #0]
 8008e7e:	1855      	adds	r5, r2, r1
 8008e80:	42a5      	cmp	r5, r4
 8008e82:	d10b      	bne.n	8008e9c <_free_r+0x70>
 8008e84:	6824      	ldr	r4, [r4, #0]
 8008e86:	4421      	add	r1, r4
 8008e88:	1854      	adds	r4, r2, r1
 8008e8a:	42a3      	cmp	r3, r4
 8008e8c:	6011      	str	r1, [r2, #0]
 8008e8e:	d1e0      	bne.n	8008e52 <_free_r+0x26>
 8008e90:	681c      	ldr	r4, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	6053      	str	r3, [r2, #4]
 8008e96:	4421      	add	r1, r4
 8008e98:	6011      	str	r1, [r2, #0]
 8008e9a:	e7da      	b.n	8008e52 <_free_r+0x26>
 8008e9c:	d902      	bls.n	8008ea4 <_free_r+0x78>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	6003      	str	r3, [r0, #0]
 8008ea2:	e7d6      	b.n	8008e52 <_free_r+0x26>
 8008ea4:	6825      	ldr	r5, [r4, #0]
 8008ea6:	1961      	adds	r1, r4, r5
 8008ea8:	428b      	cmp	r3, r1
 8008eaa:	bf04      	itt	eq
 8008eac:	6819      	ldreq	r1, [r3, #0]
 8008eae:	685b      	ldreq	r3, [r3, #4]
 8008eb0:	6063      	str	r3, [r4, #4]
 8008eb2:	bf04      	itt	eq
 8008eb4:	1949      	addeq	r1, r1, r5
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	6054      	str	r4, [r2, #4]
 8008eba:	e7ca      	b.n	8008e52 <_free_r+0x26>
 8008ebc:	b003      	add	sp, #12
 8008ebe:	bd30      	pop	{r4, r5, pc}
 8008ec0:	2000051c 	.word	0x2000051c

08008ec4 <sbrk_aligned>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4e0e      	ldr	r6, [pc, #56]	; (8008f00 <sbrk_aligned+0x3c>)
 8008ec8:	460c      	mov	r4, r1
 8008eca:	6831      	ldr	r1, [r6, #0]
 8008ecc:	4605      	mov	r5, r0
 8008ece:	b911      	cbnz	r1, 8008ed6 <sbrk_aligned+0x12>
 8008ed0:	f000 f9f2 	bl	80092b8 <_sbrk_r>
 8008ed4:	6030      	str	r0, [r6, #0]
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f000 f9ed 	bl	80092b8 <_sbrk_r>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d00a      	beq.n	8008ef8 <sbrk_aligned+0x34>
 8008ee2:	1cc4      	adds	r4, r0, #3
 8008ee4:	f024 0403 	bic.w	r4, r4, #3
 8008ee8:	42a0      	cmp	r0, r4
 8008eea:	d007      	beq.n	8008efc <sbrk_aligned+0x38>
 8008eec:	1a21      	subs	r1, r4, r0
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f9e2 	bl	80092b8 <_sbrk_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d101      	bne.n	8008efc <sbrk_aligned+0x38>
 8008ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8008efc:	4620      	mov	r0, r4
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	20000520 	.word	0x20000520

08008f04 <_malloc_r>:
 8008f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	1ccd      	adds	r5, r1, #3
 8008f0a:	f025 0503 	bic.w	r5, r5, #3
 8008f0e:	3508      	adds	r5, #8
 8008f10:	2d0c      	cmp	r5, #12
 8008f12:	bf38      	it	cc
 8008f14:	250c      	movcc	r5, #12
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	4607      	mov	r7, r0
 8008f1a:	db01      	blt.n	8008f20 <_malloc_r+0x1c>
 8008f1c:	42a9      	cmp	r1, r5
 8008f1e:	d905      	bls.n	8008f2c <_malloc_r+0x28>
 8008f20:	230c      	movs	r3, #12
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	2600      	movs	r6, #0
 8008f26:	4630      	mov	r0, r6
 8008f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2c:	4e2e      	ldr	r6, [pc, #184]	; (8008fe8 <_malloc_r+0xe4>)
 8008f2e:	f000 fa3f 	bl	80093b0 <__malloc_lock>
 8008f32:	6833      	ldr	r3, [r6, #0]
 8008f34:	461c      	mov	r4, r3
 8008f36:	bb34      	cbnz	r4, 8008f86 <_malloc_r+0x82>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	f7ff ffc2 	bl	8008ec4 <sbrk_aligned>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	4604      	mov	r4, r0
 8008f44:	d14d      	bne.n	8008fe2 <_malloc_r+0xde>
 8008f46:	6834      	ldr	r4, [r6, #0]
 8008f48:	4626      	mov	r6, r4
 8008f4a:	2e00      	cmp	r6, #0
 8008f4c:	d140      	bne.n	8008fd0 <_malloc_r+0xcc>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	4631      	mov	r1, r6
 8008f52:	4638      	mov	r0, r7
 8008f54:	eb04 0803 	add.w	r8, r4, r3
 8008f58:	f000 f9ae 	bl	80092b8 <_sbrk_r>
 8008f5c:	4580      	cmp	r8, r0
 8008f5e:	d13a      	bne.n	8008fd6 <_malloc_r+0xd2>
 8008f60:	6821      	ldr	r1, [r4, #0]
 8008f62:	3503      	adds	r5, #3
 8008f64:	1a6d      	subs	r5, r5, r1
 8008f66:	f025 0503 	bic.w	r5, r5, #3
 8008f6a:	3508      	adds	r5, #8
 8008f6c:	2d0c      	cmp	r5, #12
 8008f6e:	bf38      	it	cc
 8008f70:	250c      	movcc	r5, #12
 8008f72:	4629      	mov	r1, r5
 8008f74:	4638      	mov	r0, r7
 8008f76:	f7ff ffa5 	bl	8008ec4 <sbrk_aligned>
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d02b      	beq.n	8008fd6 <_malloc_r+0xd2>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	442b      	add	r3, r5
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	e00e      	b.n	8008fa4 <_malloc_r+0xa0>
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	1b52      	subs	r2, r2, r5
 8008f8a:	d41e      	bmi.n	8008fca <_malloc_r+0xc6>
 8008f8c:	2a0b      	cmp	r2, #11
 8008f8e:	d916      	bls.n	8008fbe <_malloc_r+0xba>
 8008f90:	1961      	adds	r1, r4, r5
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	6025      	str	r5, [r4, #0]
 8008f96:	bf18      	it	ne
 8008f98:	6059      	strne	r1, [r3, #4]
 8008f9a:	6863      	ldr	r3, [r4, #4]
 8008f9c:	bf08      	it	eq
 8008f9e:	6031      	streq	r1, [r6, #0]
 8008fa0:	5162      	str	r2, [r4, r5]
 8008fa2:	604b      	str	r3, [r1, #4]
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	f104 060b 	add.w	r6, r4, #11
 8008faa:	f000 fa07 	bl	80093bc <__malloc_unlock>
 8008fae:	f026 0607 	bic.w	r6, r6, #7
 8008fb2:	1d23      	adds	r3, r4, #4
 8008fb4:	1af2      	subs	r2, r6, r3
 8008fb6:	d0b6      	beq.n	8008f26 <_malloc_r+0x22>
 8008fb8:	1b9b      	subs	r3, r3, r6
 8008fba:	50a3      	str	r3, [r4, r2]
 8008fbc:	e7b3      	b.n	8008f26 <_malloc_r+0x22>
 8008fbe:	6862      	ldr	r2, [r4, #4]
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	bf0c      	ite	eq
 8008fc4:	6032      	streq	r2, [r6, #0]
 8008fc6:	605a      	strne	r2, [r3, #4]
 8008fc8:	e7ec      	b.n	8008fa4 <_malloc_r+0xa0>
 8008fca:	4623      	mov	r3, r4
 8008fcc:	6864      	ldr	r4, [r4, #4]
 8008fce:	e7b2      	b.n	8008f36 <_malloc_r+0x32>
 8008fd0:	4634      	mov	r4, r6
 8008fd2:	6876      	ldr	r6, [r6, #4]
 8008fd4:	e7b9      	b.n	8008f4a <_malloc_r+0x46>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	603b      	str	r3, [r7, #0]
 8008fda:	4638      	mov	r0, r7
 8008fdc:	f000 f9ee 	bl	80093bc <__malloc_unlock>
 8008fe0:	e7a1      	b.n	8008f26 <_malloc_r+0x22>
 8008fe2:	6025      	str	r5, [r4, #0]
 8008fe4:	e7de      	b.n	8008fa4 <_malloc_r+0xa0>
 8008fe6:	bf00      	nop
 8008fe8:	2000051c 	.word	0x2000051c

08008fec <__ssputs_r>:
 8008fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff0:	688e      	ldr	r6, [r1, #8]
 8008ff2:	429e      	cmp	r6, r3
 8008ff4:	4682      	mov	sl, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4690      	mov	r8, r2
 8008ffa:	461f      	mov	r7, r3
 8008ffc:	d838      	bhi.n	8009070 <__ssputs_r+0x84>
 8008ffe:	898a      	ldrh	r2, [r1, #12]
 8009000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009004:	d032      	beq.n	800906c <__ssputs_r+0x80>
 8009006:	6825      	ldr	r5, [r4, #0]
 8009008:	6909      	ldr	r1, [r1, #16]
 800900a:	eba5 0901 	sub.w	r9, r5, r1
 800900e:	6965      	ldr	r5, [r4, #20]
 8009010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009018:	3301      	adds	r3, #1
 800901a:	444b      	add	r3, r9
 800901c:	106d      	asrs	r5, r5, #1
 800901e:	429d      	cmp	r5, r3
 8009020:	bf38      	it	cc
 8009022:	461d      	movcc	r5, r3
 8009024:	0553      	lsls	r3, r2, #21
 8009026:	d531      	bpl.n	800908c <__ssputs_r+0xa0>
 8009028:	4629      	mov	r1, r5
 800902a:	f7ff ff6b 	bl	8008f04 <_malloc_r>
 800902e:	4606      	mov	r6, r0
 8009030:	b950      	cbnz	r0, 8009048 <__ssputs_r+0x5c>
 8009032:	230c      	movs	r3, #12
 8009034:	f8ca 3000 	str.w	r3, [sl]
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009048:	6921      	ldr	r1, [r4, #16]
 800904a:	464a      	mov	r2, r9
 800904c:	f7ff fa08 	bl	8008460 <memcpy>
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905a:	81a3      	strh	r3, [r4, #12]
 800905c:	6126      	str	r6, [r4, #16]
 800905e:	6165      	str	r5, [r4, #20]
 8009060:	444e      	add	r6, r9
 8009062:	eba5 0509 	sub.w	r5, r5, r9
 8009066:	6026      	str	r6, [r4, #0]
 8009068:	60a5      	str	r5, [r4, #8]
 800906a:	463e      	mov	r6, r7
 800906c:	42be      	cmp	r6, r7
 800906e:	d900      	bls.n	8009072 <__ssputs_r+0x86>
 8009070:	463e      	mov	r6, r7
 8009072:	6820      	ldr	r0, [r4, #0]
 8009074:	4632      	mov	r2, r6
 8009076:	4641      	mov	r1, r8
 8009078:	f000 f980 	bl	800937c <memmove>
 800907c:	68a3      	ldr	r3, [r4, #8]
 800907e:	1b9b      	subs	r3, r3, r6
 8009080:	60a3      	str	r3, [r4, #8]
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	4433      	add	r3, r6
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	2000      	movs	r0, #0
 800908a:	e7db      	b.n	8009044 <__ssputs_r+0x58>
 800908c:	462a      	mov	r2, r5
 800908e:	f000 f99b 	bl	80093c8 <_realloc_r>
 8009092:	4606      	mov	r6, r0
 8009094:	2800      	cmp	r0, #0
 8009096:	d1e1      	bne.n	800905c <__ssputs_r+0x70>
 8009098:	6921      	ldr	r1, [r4, #16]
 800909a:	4650      	mov	r0, sl
 800909c:	f7ff fec6 	bl	8008e2c <_free_r>
 80090a0:	e7c7      	b.n	8009032 <__ssputs_r+0x46>
	...

080090a4 <_svfiprintf_r>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	4698      	mov	r8, r3
 80090aa:	898b      	ldrh	r3, [r1, #12]
 80090ac:	061b      	lsls	r3, r3, #24
 80090ae:	b09d      	sub	sp, #116	; 0x74
 80090b0:	4607      	mov	r7, r0
 80090b2:	460d      	mov	r5, r1
 80090b4:	4614      	mov	r4, r2
 80090b6:	d50e      	bpl.n	80090d6 <_svfiprintf_r+0x32>
 80090b8:	690b      	ldr	r3, [r1, #16]
 80090ba:	b963      	cbnz	r3, 80090d6 <_svfiprintf_r+0x32>
 80090bc:	2140      	movs	r1, #64	; 0x40
 80090be:	f7ff ff21 	bl	8008f04 <_malloc_r>
 80090c2:	6028      	str	r0, [r5, #0]
 80090c4:	6128      	str	r0, [r5, #16]
 80090c6:	b920      	cbnz	r0, 80090d2 <_svfiprintf_r+0x2e>
 80090c8:	230c      	movs	r3, #12
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295
 80090d0:	e0d1      	b.n	8009276 <_svfiprintf_r+0x1d2>
 80090d2:	2340      	movs	r3, #64	; 0x40
 80090d4:	616b      	str	r3, [r5, #20]
 80090d6:	2300      	movs	r3, #0
 80090d8:	9309      	str	r3, [sp, #36]	; 0x24
 80090da:	2320      	movs	r3, #32
 80090dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090e4:	2330      	movs	r3, #48	; 0x30
 80090e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009290 <_svfiprintf_r+0x1ec>
 80090ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090ee:	f04f 0901 	mov.w	r9, #1
 80090f2:	4623      	mov	r3, r4
 80090f4:	469a      	mov	sl, r3
 80090f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090fa:	b10a      	cbz	r2, 8009100 <_svfiprintf_r+0x5c>
 80090fc:	2a25      	cmp	r2, #37	; 0x25
 80090fe:	d1f9      	bne.n	80090f4 <_svfiprintf_r+0x50>
 8009100:	ebba 0b04 	subs.w	fp, sl, r4
 8009104:	d00b      	beq.n	800911e <_svfiprintf_r+0x7a>
 8009106:	465b      	mov	r3, fp
 8009108:	4622      	mov	r2, r4
 800910a:	4629      	mov	r1, r5
 800910c:	4638      	mov	r0, r7
 800910e:	f7ff ff6d 	bl	8008fec <__ssputs_r>
 8009112:	3001      	adds	r0, #1
 8009114:	f000 80aa 	beq.w	800926c <_svfiprintf_r+0x1c8>
 8009118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800911a:	445a      	add	r2, fp
 800911c:	9209      	str	r2, [sp, #36]	; 0x24
 800911e:	f89a 3000 	ldrb.w	r3, [sl]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80a2 	beq.w	800926c <_svfiprintf_r+0x1c8>
 8009128:	2300      	movs	r3, #0
 800912a:	f04f 32ff 	mov.w	r2, #4294967295
 800912e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009132:	f10a 0a01 	add.w	sl, sl, #1
 8009136:	9304      	str	r3, [sp, #16]
 8009138:	9307      	str	r3, [sp, #28]
 800913a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800913e:	931a      	str	r3, [sp, #104]	; 0x68
 8009140:	4654      	mov	r4, sl
 8009142:	2205      	movs	r2, #5
 8009144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009148:	4851      	ldr	r0, [pc, #324]	; (8009290 <_svfiprintf_r+0x1ec>)
 800914a:	f7f7 f851 	bl	80001f0 <memchr>
 800914e:	9a04      	ldr	r2, [sp, #16]
 8009150:	b9d8      	cbnz	r0, 800918a <_svfiprintf_r+0xe6>
 8009152:	06d0      	lsls	r0, r2, #27
 8009154:	bf44      	itt	mi
 8009156:	2320      	movmi	r3, #32
 8009158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800915c:	0711      	lsls	r1, r2, #28
 800915e:	bf44      	itt	mi
 8009160:	232b      	movmi	r3, #43	; 0x2b
 8009162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009166:	f89a 3000 	ldrb.w	r3, [sl]
 800916a:	2b2a      	cmp	r3, #42	; 0x2a
 800916c:	d015      	beq.n	800919a <_svfiprintf_r+0xf6>
 800916e:	9a07      	ldr	r2, [sp, #28]
 8009170:	4654      	mov	r4, sl
 8009172:	2000      	movs	r0, #0
 8009174:	f04f 0c0a 	mov.w	ip, #10
 8009178:	4621      	mov	r1, r4
 800917a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800917e:	3b30      	subs	r3, #48	; 0x30
 8009180:	2b09      	cmp	r3, #9
 8009182:	d94e      	bls.n	8009222 <_svfiprintf_r+0x17e>
 8009184:	b1b0      	cbz	r0, 80091b4 <_svfiprintf_r+0x110>
 8009186:	9207      	str	r2, [sp, #28]
 8009188:	e014      	b.n	80091b4 <_svfiprintf_r+0x110>
 800918a:	eba0 0308 	sub.w	r3, r0, r8
 800918e:	fa09 f303 	lsl.w	r3, r9, r3
 8009192:	4313      	orrs	r3, r2
 8009194:	9304      	str	r3, [sp, #16]
 8009196:	46a2      	mov	sl, r4
 8009198:	e7d2      	b.n	8009140 <_svfiprintf_r+0x9c>
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	1d19      	adds	r1, r3, #4
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	9103      	str	r1, [sp, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfbb      	ittet	lt
 80091a6:	425b      	neglt	r3, r3
 80091a8:	f042 0202 	orrlt.w	r2, r2, #2
 80091ac:	9307      	strge	r3, [sp, #28]
 80091ae:	9307      	strlt	r3, [sp, #28]
 80091b0:	bfb8      	it	lt
 80091b2:	9204      	strlt	r2, [sp, #16]
 80091b4:	7823      	ldrb	r3, [r4, #0]
 80091b6:	2b2e      	cmp	r3, #46	; 0x2e
 80091b8:	d10c      	bne.n	80091d4 <_svfiprintf_r+0x130>
 80091ba:	7863      	ldrb	r3, [r4, #1]
 80091bc:	2b2a      	cmp	r3, #42	; 0x2a
 80091be:	d135      	bne.n	800922c <_svfiprintf_r+0x188>
 80091c0:	9b03      	ldr	r3, [sp, #12]
 80091c2:	1d1a      	adds	r2, r3, #4
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	9203      	str	r2, [sp, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bfb8      	it	lt
 80091cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80091d0:	3402      	adds	r4, #2
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092a0 <_svfiprintf_r+0x1fc>
 80091d8:	7821      	ldrb	r1, [r4, #0]
 80091da:	2203      	movs	r2, #3
 80091dc:	4650      	mov	r0, sl
 80091de:	f7f7 f807 	bl	80001f0 <memchr>
 80091e2:	b140      	cbz	r0, 80091f6 <_svfiprintf_r+0x152>
 80091e4:	2340      	movs	r3, #64	; 0x40
 80091e6:	eba0 000a 	sub.w	r0, r0, sl
 80091ea:	fa03 f000 	lsl.w	r0, r3, r0
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	4303      	orrs	r3, r0
 80091f2:	3401      	adds	r4, #1
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fa:	4826      	ldr	r0, [pc, #152]	; (8009294 <_svfiprintf_r+0x1f0>)
 80091fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009200:	2206      	movs	r2, #6
 8009202:	f7f6 fff5 	bl	80001f0 <memchr>
 8009206:	2800      	cmp	r0, #0
 8009208:	d038      	beq.n	800927c <_svfiprintf_r+0x1d8>
 800920a:	4b23      	ldr	r3, [pc, #140]	; (8009298 <_svfiprintf_r+0x1f4>)
 800920c:	bb1b      	cbnz	r3, 8009256 <_svfiprintf_r+0x1b2>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	3307      	adds	r3, #7
 8009212:	f023 0307 	bic.w	r3, r3, #7
 8009216:	3308      	adds	r3, #8
 8009218:	9303      	str	r3, [sp, #12]
 800921a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921c:	4433      	add	r3, r6
 800921e:	9309      	str	r3, [sp, #36]	; 0x24
 8009220:	e767      	b.n	80090f2 <_svfiprintf_r+0x4e>
 8009222:	fb0c 3202 	mla	r2, ip, r2, r3
 8009226:	460c      	mov	r4, r1
 8009228:	2001      	movs	r0, #1
 800922a:	e7a5      	b.n	8009178 <_svfiprintf_r+0xd4>
 800922c:	2300      	movs	r3, #0
 800922e:	3401      	adds	r4, #1
 8009230:	9305      	str	r3, [sp, #20]
 8009232:	4619      	mov	r1, r3
 8009234:	f04f 0c0a 	mov.w	ip, #10
 8009238:	4620      	mov	r0, r4
 800923a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800923e:	3a30      	subs	r2, #48	; 0x30
 8009240:	2a09      	cmp	r2, #9
 8009242:	d903      	bls.n	800924c <_svfiprintf_r+0x1a8>
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0c5      	beq.n	80091d4 <_svfiprintf_r+0x130>
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	e7c3      	b.n	80091d4 <_svfiprintf_r+0x130>
 800924c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009250:	4604      	mov	r4, r0
 8009252:	2301      	movs	r3, #1
 8009254:	e7f0      	b.n	8009238 <_svfiprintf_r+0x194>
 8009256:	ab03      	add	r3, sp, #12
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	462a      	mov	r2, r5
 800925c:	4b0f      	ldr	r3, [pc, #60]	; (800929c <_svfiprintf_r+0x1f8>)
 800925e:	a904      	add	r1, sp, #16
 8009260:	4638      	mov	r0, r7
 8009262:	f7fc fa49 	bl	80056f8 <_printf_float>
 8009266:	1c42      	adds	r2, r0, #1
 8009268:	4606      	mov	r6, r0
 800926a:	d1d6      	bne.n	800921a <_svfiprintf_r+0x176>
 800926c:	89ab      	ldrh	r3, [r5, #12]
 800926e:	065b      	lsls	r3, r3, #25
 8009270:	f53f af2c 	bmi.w	80090cc <_svfiprintf_r+0x28>
 8009274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009276:	b01d      	add	sp, #116	; 0x74
 8009278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927c:	ab03      	add	r3, sp, #12
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	462a      	mov	r2, r5
 8009282:	4b06      	ldr	r3, [pc, #24]	; (800929c <_svfiprintf_r+0x1f8>)
 8009284:	a904      	add	r1, sp, #16
 8009286:	4638      	mov	r0, r7
 8009288:	f7fc fcda 	bl	8005c40 <_printf_i>
 800928c:	e7eb      	b.n	8009266 <_svfiprintf_r+0x1c2>
 800928e:	bf00      	nop
 8009290:	0800a324 	.word	0x0800a324
 8009294:	0800a32e 	.word	0x0800a32e
 8009298:	080056f9 	.word	0x080056f9
 800929c:	08008fed 	.word	0x08008fed
 80092a0:	0800a32a 	.word	0x0800a32a
 80092a4:	00000000 	.word	0x00000000

080092a8 <nan>:
 80092a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80092b0 <nan+0x8>
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	00000000 	.word	0x00000000
 80092b4:	7ff80000 	.word	0x7ff80000

080092b8 <_sbrk_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d06      	ldr	r5, [pc, #24]	; (80092d4 <_sbrk_r+0x1c>)
 80092bc:	2300      	movs	r3, #0
 80092be:	4604      	mov	r4, r0
 80092c0:	4608      	mov	r0, r1
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	f7f8 ffb6 	bl	8002234 <_sbrk>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d102      	bne.n	80092d2 <_sbrk_r+0x1a>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	b103      	cbz	r3, 80092d2 <_sbrk_r+0x1a>
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	20000524 	.word	0x20000524

080092d8 <strncmp>:
 80092d8:	b510      	push	{r4, lr}
 80092da:	b17a      	cbz	r2, 80092fc <strncmp+0x24>
 80092dc:	4603      	mov	r3, r0
 80092de:	3901      	subs	r1, #1
 80092e0:	1884      	adds	r4, r0, r2
 80092e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80092ea:	4290      	cmp	r0, r2
 80092ec:	d101      	bne.n	80092f2 <strncmp+0x1a>
 80092ee:	42a3      	cmp	r3, r4
 80092f0:	d101      	bne.n	80092f6 <strncmp+0x1e>
 80092f2:	1a80      	subs	r0, r0, r2
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d1f3      	bne.n	80092e2 <strncmp+0xa>
 80092fa:	e7fa      	b.n	80092f2 <strncmp+0x1a>
 80092fc:	4610      	mov	r0, r2
 80092fe:	e7f9      	b.n	80092f4 <strncmp+0x1c>

08009300 <__ascii_wctomb>:
 8009300:	b149      	cbz	r1, 8009316 <__ascii_wctomb+0x16>
 8009302:	2aff      	cmp	r2, #255	; 0xff
 8009304:	bf85      	ittet	hi
 8009306:	238a      	movhi	r3, #138	; 0x8a
 8009308:	6003      	strhi	r3, [r0, #0]
 800930a:	700a      	strbls	r2, [r1, #0]
 800930c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009310:	bf98      	it	ls
 8009312:	2001      	movls	r0, #1
 8009314:	4770      	bx	lr
 8009316:	4608      	mov	r0, r1
 8009318:	4770      	bx	lr
	...

0800931c <__assert_func>:
 800931c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800931e:	4614      	mov	r4, r2
 8009320:	461a      	mov	r2, r3
 8009322:	4b09      	ldr	r3, [pc, #36]	; (8009348 <__assert_func+0x2c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4605      	mov	r5, r0
 8009328:	68d8      	ldr	r0, [r3, #12]
 800932a:	b14c      	cbz	r4, 8009340 <__assert_func+0x24>
 800932c:	4b07      	ldr	r3, [pc, #28]	; (800934c <__assert_func+0x30>)
 800932e:	9100      	str	r1, [sp, #0]
 8009330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009334:	4906      	ldr	r1, [pc, #24]	; (8009350 <__assert_func+0x34>)
 8009336:	462b      	mov	r3, r5
 8009338:	f000 f80e 	bl	8009358 <fiprintf>
 800933c:	f000 fa8c 	bl	8009858 <abort>
 8009340:	4b04      	ldr	r3, [pc, #16]	; (8009354 <__assert_func+0x38>)
 8009342:	461c      	mov	r4, r3
 8009344:	e7f3      	b.n	800932e <__assert_func+0x12>
 8009346:	bf00      	nop
 8009348:	2000001c 	.word	0x2000001c
 800934c:	0800a335 	.word	0x0800a335
 8009350:	0800a342 	.word	0x0800a342
 8009354:	0800a370 	.word	0x0800a370

08009358 <fiprintf>:
 8009358:	b40e      	push	{r1, r2, r3}
 800935a:	b503      	push	{r0, r1, lr}
 800935c:	4601      	mov	r1, r0
 800935e:	ab03      	add	r3, sp, #12
 8009360:	4805      	ldr	r0, [pc, #20]	; (8009378 <fiprintf+0x20>)
 8009362:	f853 2b04 	ldr.w	r2, [r3], #4
 8009366:	6800      	ldr	r0, [r0, #0]
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	f000 f885 	bl	8009478 <_vfiprintf_r>
 800936e:	b002      	add	sp, #8
 8009370:	f85d eb04 	ldr.w	lr, [sp], #4
 8009374:	b003      	add	sp, #12
 8009376:	4770      	bx	lr
 8009378:	2000001c 	.word	0x2000001c

0800937c <memmove>:
 800937c:	4288      	cmp	r0, r1
 800937e:	b510      	push	{r4, lr}
 8009380:	eb01 0402 	add.w	r4, r1, r2
 8009384:	d902      	bls.n	800938c <memmove+0x10>
 8009386:	4284      	cmp	r4, r0
 8009388:	4623      	mov	r3, r4
 800938a:	d807      	bhi.n	800939c <memmove+0x20>
 800938c:	1e43      	subs	r3, r0, #1
 800938e:	42a1      	cmp	r1, r4
 8009390:	d008      	beq.n	80093a4 <memmove+0x28>
 8009392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800939a:	e7f8      	b.n	800938e <memmove+0x12>
 800939c:	4402      	add	r2, r0
 800939e:	4601      	mov	r1, r0
 80093a0:	428a      	cmp	r2, r1
 80093a2:	d100      	bne.n	80093a6 <memmove+0x2a>
 80093a4:	bd10      	pop	{r4, pc}
 80093a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093ae:	e7f7      	b.n	80093a0 <memmove+0x24>

080093b0 <__malloc_lock>:
 80093b0:	4801      	ldr	r0, [pc, #4]	; (80093b8 <__malloc_lock+0x8>)
 80093b2:	f000 bc11 	b.w	8009bd8 <__retarget_lock_acquire_recursive>
 80093b6:	bf00      	nop
 80093b8:	20000528 	.word	0x20000528

080093bc <__malloc_unlock>:
 80093bc:	4801      	ldr	r0, [pc, #4]	; (80093c4 <__malloc_unlock+0x8>)
 80093be:	f000 bc0c 	b.w	8009bda <__retarget_lock_release_recursive>
 80093c2:	bf00      	nop
 80093c4:	20000528 	.word	0x20000528

080093c8 <_realloc_r>:
 80093c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093cc:	4680      	mov	r8, r0
 80093ce:	4614      	mov	r4, r2
 80093d0:	460e      	mov	r6, r1
 80093d2:	b921      	cbnz	r1, 80093de <_realloc_r+0x16>
 80093d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093d8:	4611      	mov	r1, r2
 80093da:	f7ff bd93 	b.w	8008f04 <_malloc_r>
 80093de:	b92a      	cbnz	r2, 80093ec <_realloc_r+0x24>
 80093e0:	f7ff fd24 	bl	8008e2c <_free_r>
 80093e4:	4625      	mov	r5, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ec:	f000 fc5c 	bl	8009ca8 <_malloc_usable_size_r>
 80093f0:	4284      	cmp	r4, r0
 80093f2:	4607      	mov	r7, r0
 80093f4:	d802      	bhi.n	80093fc <_realloc_r+0x34>
 80093f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093fa:	d812      	bhi.n	8009422 <_realloc_r+0x5a>
 80093fc:	4621      	mov	r1, r4
 80093fe:	4640      	mov	r0, r8
 8009400:	f7ff fd80 	bl	8008f04 <_malloc_r>
 8009404:	4605      	mov	r5, r0
 8009406:	2800      	cmp	r0, #0
 8009408:	d0ed      	beq.n	80093e6 <_realloc_r+0x1e>
 800940a:	42bc      	cmp	r4, r7
 800940c:	4622      	mov	r2, r4
 800940e:	4631      	mov	r1, r6
 8009410:	bf28      	it	cs
 8009412:	463a      	movcs	r2, r7
 8009414:	f7ff f824 	bl	8008460 <memcpy>
 8009418:	4631      	mov	r1, r6
 800941a:	4640      	mov	r0, r8
 800941c:	f7ff fd06 	bl	8008e2c <_free_r>
 8009420:	e7e1      	b.n	80093e6 <_realloc_r+0x1e>
 8009422:	4635      	mov	r5, r6
 8009424:	e7df      	b.n	80093e6 <_realloc_r+0x1e>

08009426 <__sfputc_r>:
 8009426:	6893      	ldr	r3, [r2, #8]
 8009428:	3b01      	subs	r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	b410      	push	{r4}
 800942e:	6093      	str	r3, [r2, #8]
 8009430:	da08      	bge.n	8009444 <__sfputc_r+0x1e>
 8009432:	6994      	ldr	r4, [r2, #24]
 8009434:	42a3      	cmp	r3, r4
 8009436:	db01      	blt.n	800943c <__sfputc_r+0x16>
 8009438:	290a      	cmp	r1, #10
 800943a:	d103      	bne.n	8009444 <__sfputc_r+0x1e>
 800943c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009440:	f000 b94a 	b.w	80096d8 <__swbuf_r>
 8009444:	6813      	ldr	r3, [r2, #0]
 8009446:	1c58      	adds	r0, r3, #1
 8009448:	6010      	str	r0, [r2, #0]
 800944a:	7019      	strb	r1, [r3, #0]
 800944c:	4608      	mov	r0, r1
 800944e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009452:	4770      	bx	lr

08009454 <__sfputs_r>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	4614      	mov	r4, r2
 800945c:	18d5      	adds	r5, r2, r3
 800945e:	42ac      	cmp	r4, r5
 8009460:	d101      	bne.n	8009466 <__sfputs_r+0x12>
 8009462:	2000      	movs	r0, #0
 8009464:	e007      	b.n	8009476 <__sfputs_r+0x22>
 8009466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946a:	463a      	mov	r2, r7
 800946c:	4630      	mov	r0, r6
 800946e:	f7ff ffda 	bl	8009426 <__sfputc_r>
 8009472:	1c43      	adds	r3, r0, #1
 8009474:	d1f3      	bne.n	800945e <__sfputs_r+0xa>
 8009476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009478 <_vfiprintf_r>:
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	460d      	mov	r5, r1
 800947e:	b09d      	sub	sp, #116	; 0x74
 8009480:	4614      	mov	r4, r2
 8009482:	4698      	mov	r8, r3
 8009484:	4606      	mov	r6, r0
 8009486:	b118      	cbz	r0, 8009490 <_vfiprintf_r+0x18>
 8009488:	6983      	ldr	r3, [r0, #24]
 800948a:	b90b      	cbnz	r3, 8009490 <_vfiprintf_r+0x18>
 800948c:	f000 fb06 	bl	8009a9c <__sinit>
 8009490:	4b89      	ldr	r3, [pc, #548]	; (80096b8 <_vfiprintf_r+0x240>)
 8009492:	429d      	cmp	r5, r3
 8009494:	d11b      	bne.n	80094ce <_vfiprintf_r+0x56>
 8009496:	6875      	ldr	r5, [r6, #4]
 8009498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800949a:	07d9      	lsls	r1, r3, #31
 800949c:	d405      	bmi.n	80094aa <_vfiprintf_r+0x32>
 800949e:	89ab      	ldrh	r3, [r5, #12]
 80094a0:	059a      	lsls	r2, r3, #22
 80094a2:	d402      	bmi.n	80094aa <_vfiprintf_r+0x32>
 80094a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094a6:	f000 fb97 	bl	8009bd8 <__retarget_lock_acquire_recursive>
 80094aa:	89ab      	ldrh	r3, [r5, #12]
 80094ac:	071b      	lsls	r3, r3, #28
 80094ae:	d501      	bpl.n	80094b4 <_vfiprintf_r+0x3c>
 80094b0:	692b      	ldr	r3, [r5, #16]
 80094b2:	b9eb      	cbnz	r3, 80094f0 <_vfiprintf_r+0x78>
 80094b4:	4629      	mov	r1, r5
 80094b6:	4630      	mov	r0, r6
 80094b8:	f000 f960 	bl	800977c <__swsetup_r>
 80094bc:	b1c0      	cbz	r0, 80094f0 <_vfiprintf_r+0x78>
 80094be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094c0:	07dc      	lsls	r4, r3, #31
 80094c2:	d50e      	bpl.n	80094e2 <_vfiprintf_r+0x6a>
 80094c4:	f04f 30ff 	mov.w	r0, #4294967295
 80094c8:	b01d      	add	sp, #116	; 0x74
 80094ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ce:	4b7b      	ldr	r3, [pc, #492]	; (80096bc <_vfiprintf_r+0x244>)
 80094d0:	429d      	cmp	r5, r3
 80094d2:	d101      	bne.n	80094d8 <_vfiprintf_r+0x60>
 80094d4:	68b5      	ldr	r5, [r6, #8]
 80094d6:	e7df      	b.n	8009498 <_vfiprintf_r+0x20>
 80094d8:	4b79      	ldr	r3, [pc, #484]	; (80096c0 <_vfiprintf_r+0x248>)
 80094da:	429d      	cmp	r5, r3
 80094dc:	bf08      	it	eq
 80094de:	68f5      	ldreq	r5, [r6, #12]
 80094e0:	e7da      	b.n	8009498 <_vfiprintf_r+0x20>
 80094e2:	89ab      	ldrh	r3, [r5, #12]
 80094e4:	0598      	lsls	r0, r3, #22
 80094e6:	d4ed      	bmi.n	80094c4 <_vfiprintf_r+0x4c>
 80094e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ea:	f000 fb76 	bl	8009bda <__retarget_lock_release_recursive>
 80094ee:	e7e9      	b.n	80094c4 <_vfiprintf_r+0x4c>
 80094f0:	2300      	movs	r3, #0
 80094f2:	9309      	str	r3, [sp, #36]	; 0x24
 80094f4:	2320      	movs	r3, #32
 80094f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80094fe:	2330      	movs	r3, #48	; 0x30
 8009500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096c4 <_vfiprintf_r+0x24c>
 8009504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009508:	f04f 0901 	mov.w	r9, #1
 800950c:	4623      	mov	r3, r4
 800950e:	469a      	mov	sl, r3
 8009510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009514:	b10a      	cbz	r2, 800951a <_vfiprintf_r+0xa2>
 8009516:	2a25      	cmp	r2, #37	; 0x25
 8009518:	d1f9      	bne.n	800950e <_vfiprintf_r+0x96>
 800951a:	ebba 0b04 	subs.w	fp, sl, r4
 800951e:	d00b      	beq.n	8009538 <_vfiprintf_r+0xc0>
 8009520:	465b      	mov	r3, fp
 8009522:	4622      	mov	r2, r4
 8009524:	4629      	mov	r1, r5
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff ff94 	bl	8009454 <__sfputs_r>
 800952c:	3001      	adds	r0, #1
 800952e:	f000 80aa 	beq.w	8009686 <_vfiprintf_r+0x20e>
 8009532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009534:	445a      	add	r2, fp
 8009536:	9209      	str	r2, [sp, #36]	; 0x24
 8009538:	f89a 3000 	ldrb.w	r3, [sl]
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80a2 	beq.w	8009686 <_vfiprintf_r+0x20e>
 8009542:	2300      	movs	r3, #0
 8009544:	f04f 32ff 	mov.w	r2, #4294967295
 8009548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800954c:	f10a 0a01 	add.w	sl, sl, #1
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	9307      	str	r3, [sp, #28]
 8009554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009558:	931a      	str	r3, [sp, #104]	; 0x68
 800955a:	4654      	mov	r4, sl
 800955c:	2205      	movs	r2, #5
 800955e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009562:	4858      	ldr	r0, [pc, #352]	; (80096c4 <_vfiprintf_r+0x24c>)
 8009564:	f7f6 fe44 	bl	80001f0 <memchr>
 8009568:	9a04      	ldr	r2, [sp, #16]
 800956a:	b9d8      	cbnz	r0, 80095a4 <_vfiprintf_r+0x12c>
 800956c:	06d1      	lsls	r1, r2, #27
 800956e:	bf44      	itt	mi
 8009570:	2320      	movmi	r3, #32
 8009572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009576:	0713      	lsls	r3, r2, #28
 8009578:	bf44      	itt	mi
 800957a:	232b      	movmi	r3, #43	; 0x2b
 800957c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009580:	f89a 3000 	ldrb.w	r3, [sl]
 8009584:	2b2a      	cmp	r3, #42	; 0x2a
 8009586:	d015      	beq.n	80095b4 <_vfiprintf_r+0x13c>
 8009588:	9a07      	ldr	r2, [sp, #28]
 800958a:	4654      	mov	r4, sl
 800958c:	2000      	movs	r0, #0
 800958e:	f04f 0c0a 	mov.w	ip, #10
 8009592:	4621      	mov	r1, r4
 8009594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009598:	3b30      	subs	r3, #48	; 0x30
 800959a:	2b09      	cmp	r3, #9
 800959c:	d94e      	bls.n	800963c <_vfiprintf_r+0x1c4>
 800959e:	b1b0      	cbz	r0, 80095ce <_vfiprintf_r+0x156>
 80095a0:	9207      	str	r2, [sp, #28]
 80095a2:	e014      	b.n	80095ce <_vfiprintf_r+0x156>
 80095a4:	eba0 0308 	sub.w	r3, r0, r8
 80095a8:	fa09 f303 	lsl.w	r3, r9, r3
 80095ac:	4313      	orrs	r3, r2
 80095ae:	9304      	str	r3, [sp, #16]
 80095b0:	46a2      	mov	sl, r4
 80095b2:	e7d2      	b.n	800955a <_vfiprintf_r+0xe2>
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	1d19      	adds	r1, r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	9103      	str	r1, [sp, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfbb      	ittet	lt
 80095c0:	425b      	neglt	r3, r3
 80095c2:	f042 0202 	orrlt.w	r2, r2, #2
 80095c6:	9307      	strge	r3, [sp, #28]
 80095c8:	9307      	strlt	r3, [sp, #28]
 80095ca:	bfb8      	it	lt
 80095cc:	9204      	strlt	r2, [sp, #16]
 80095ce:	7823      	ldrb	r3, [r4, #0]
 80095d0:	2b2e      	cmp	r3, #46	; 0x2e
 80095d2:	d10c      	bne.n	80095ee <_vfiprintf_r+0x176>
 80095d4:	7863      	ldrb	r3, [r4, #1]
 80095d6:	2b2a      	cmp	r3, #42	; 0x2a
 80095d8:	d135      	bne.n	8009646 <_vfiprintf_r+0x1ce>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	1d1a      	adds	r2, r3, #4
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	9203      	str	r2, [sp, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	bfb8      	it	lt
 80095e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80095ea:	3402      	adds	r4, #2
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096d4 <_vfiprintf_r+0x25c>
 80095f2:	7821      	ldrb	r1, [r4, #0]
 80095f4:	2203      	movs	r2, #3
 80095f6:	4650      	mov	r0, sl
 80095f8:	f7f6 fdfa 	bl	80001f0 <memchr>
 80095fc:	b140      	cbz	r0, 8009610 <_vfiprintf_r+0x198>
 80095fe:	2340      	movs	r3, #64	; 0x40
 8009600:	eba0 000a 	sub.w	r0, r0, sl
 8009604:	fa03 f000 	lsl.w	r0, r3, r0
 8009608:	9b04      	ldr	r3, [sp, #16]
 800960a:	4303      	orrs	r3, r0
 800960c:	3401      	adds	r4, #1
 800960e:	9304      	str	r3, [sp, #16]
 8009610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009614:	482c      	ldr	r0, [pc, #176]	; (80096c8 <_vfiprintf_r+0x250>)
 8009616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800961a:	2206      	movs	r2, #6
 800961c:	f7f6 fde8 	bl	80001f0 <memchr>
 8009620:	2800      	cmp	r0, #0
 8009622:	d03f      	beq.n	80096a4 <_vfiprintf_r+0x22c>
 8009624:	4b29      	ldr	r3, [pc, #164]	; (80096cc <_vfiprintf_r+0x254>)
 8009626:	bb1b      	cbnz	r3, 8009670 <_vfiprintf_r+0x1f8>
 8009628:	9b03      	ldr	r3, [sp, #12]
 800962a:	3307      	adds	r3, #7
 800962c:	f023 0307 	bic.w	r3, r3, #7
 8009630:	3308      	adds	r3, #8
 8009632:	9303      	str	r3, [sp, #12]
 8009634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009636:	443b      	add	r3, r7
 8009638:	9309      	str	r3, [sp, #36]	; 0x24
 800963a:	e767      	b.n	800950c <_vfiprintf_r+0x94>
 800963c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009640:	460c      	mov	r4, r1
 8009642:	2001      	movs	r0, #1
 8009644:	e7a5      	b.n	8009592 <_vfiprintf_r+0x11a>
 8009646:	2300      	movs	r3, #0
 8009648:	3401      	adds	r4, #1
 800964a:	9305      	str	r3, [sp, #20]
 800964c:	4619      	mov	r1, r3
 800964e:	f04f 0c0a 	mov.w	ip, #10
 8009652:	4620      	mov	r0, r4
 8009654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009658:	3a30      	subs	r2, #48	; 0x30
 800965a:	2a09      	cmp	r2, #9
 800965c:	d903      	bls.n	8009666 <_vfiprintf_r+0x1ee>
 800965e:	2b00      	cmp	r3, #0
 8009660:	d0c5      	beq.n	80095ee <_vfiprintf_r+0x176>
 8009662:	9105      	str	r1, [sp, #20]
 8009664:	e7c3      	b.n	80095ee <_vfiprintf_r+0x176>
 8009666:	fb0c 2101 	mla	r1, ip, r1, r2
 800966a:	4604      	mov	r4, r0
 800966c:	2301      	movs	r3, #1
 800966e:	e7f0      	b.n	8009652 <_vfiprintf_r+0x1da>
 8009670:	ab03      	add	r3, sp, #12
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	462a      	mov	r2, r5
 8009676:	4b16      	ldr	r3, [pc, #88]	; (80096d0 <_vfiprintf_r+0x258>)
 8009678:	a904      	add	r1, sp, #16
 800967a:	4630      	mov	r0, r6
 800967c:	f7fc f83c 	bl	80056f8 <_printf_float>
 8009680:	4607      	mov	r7, r0
 8009682:	1c78      	adds	r0, r7, #1
 8009684:	d1d6      	bne.n	8009634 <_vfiprintf_r+0x1bc>
 8009686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009688:	07d9      	lsls	r1, r3, #31
 800968a:	d405      	bmi.n	8009698 <_vfiprintf_r+0x220>
 800968c:	89ab      	ldrh	r3, [r5, #12]
 800968e:	059a      	lsls	r2, r3, #22
 8009690:	d402      	bmi.n	8009698 <_vfiprintf_r+0x220>
 8009692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009694:	f000 faa1 	bl	8009bda <__retarget_lock_release_recursive>
 8009698:	89ab      	ldrh	r3, [r5, #12]
 800969a:	065b      	lsls	r3, r3, #25
 800969c:	f53f af12 	bmi.w	80094c4 <_vfiprintf_r+0x4c>
 80096a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a2:	e711      	b.n	80094c8 <_vfiprintf_r+0x50>
 80096a4:	ab03      	add	r3, sp, #12
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	462a      	mov	r2, r5
 80096aa:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <_vfiprintf_r+0x258>)
 80096ac:	a904      	add	r1, sp, #16
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7fc fac6 	bl	8005c40 <_printf_i>
 80096b4:	e7e4      	b.n	8009680 <_vfiprintf_r+0x208>
 80096b6:	bf00      	nop
 80096b8:	0800a394 	.word	0x0800a394
 80096bc:	0800a3b4 	.word	0x0800a3b4
 80096c0:	0800a374 	.word	0x0800a374
 80096c4:	0800a324 	.word	0x0800a324
 80096c8:	0800a32e 	.word	0x0800a32e
 80096cc:	080056f9 	.word	0x080056f9
 80096d0:	08009455 	.word	0x08009455
 80096d4:	0800a32a 	.word	0x0800a32a

080096d8 <__swbuf_r>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	460e      	mov	r6, r1
 80096dc:	4614      	mov	r4, r2
 80096de:	4605      	mov	r5, r0
 80096e0:	b118      	cbz	r0, 80096ea <__swbuf_r+0x12>
 80096e2:	6983      	ldr	r3, [r0, #24]
 80096e4:	b90b      	cbnz	r3, 80096ea <__swbuf_r+0x12>
 80096e6:	f000 f9d9 	bl	8009a9c <__sinit>
 80096ea:	4b21      	ldr	r3, [pc, #132]	; (8009770 <__swbuf_r+0x98>)
 80096ec:	429c      	cmp	r4, r3
 80096ee:	d12b      	bne.n	8009748 <__swbuf_r+0x70>
 80096f0:	686c      	ldr	r4, [r5, #4]
 80096f2:	69a3      	ldr	r3, [r4, #24]
 80096f4:	60a3      	str	r3, [r4, #8]
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	071a      	lsls	r2, r3, #28
 80096fa:	d52f      	bpl.n	800975c <__swbuf_r+0x84>
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	b36b      	cbz	r3, 800975c <__swbuf_r+0x84>
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	6820      	ldr	r0, [r4, #0]
 8009704:	1ac0      	subs	r0, r0, r3
 8009706:	6963      	ldr	r3, [r4, #20]
 8009708:	b2f6      	uxtb	r6, r6
 800970a:	4283      	cmp	r3, r0
 800970c:	4637      	mov	r7, r6
 800970e:	dc04      	bgt.n	800971a <__swbuf_r+0x42>
 8009710:	4621      	mov	r1, r4
 8009712:	4628      	mov	r0, r5
 8009714:	f000 f92e 	bl	8009974 <_fflush_r>
 8009718:	bb30      	cbnz	r0, 8009768 <__swbuf_r+0x90>
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	3b01      	subs	r3, #1
 800971e:	60a3      	str	r3, [r4, #8]
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	6022      	str	r2, [r4, #0]
 8009726:	701e      	strb	r6, [r3, #0]
 8009728:	6963      	ldr	r3, [r4, #20]
 800972a:	3001      	adds	r0, #1
 800972c:	4283      	cmp	r3, r0
 800972e:	d004      	beq.n	800973a <__swbuf_r+0x62>
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	07db      	lsls	r3, r3, #31
 8009734:	d506      	bpl.n	8009744 <__swbuf_r+0x6c>
 8009736:	2e0a      	cmp	r6, #10
 8009738:	d104      	bne.n	8009744 <__swbuf_r+0x6c>
 800973a:	4621      	mov	r1, r4
 800973c:	4628      	mov	r0, r5
 800973e:	f000 f919 	bl	8009974 <_fflush_r>
 8009742:	b988      	cbnz	r0, 8009768 <__swbuf_r+0x90>
 8009744:	4638      	mov	r0, r7
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009748:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <__swbuf_r+0x9c>)
 800974a:	429c      	cmp	r4, r3
 800974c:	d101      	bne.n	8009752 <__swbuf_r+0x7a>
 800974e:	68ac      	ldr	r4, [r5, #8]
 8009750:	e7cf      	b.n	80096f2 <__swbuf_r+0x1a>
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <__swbuf_r+0xa0>)
 8009754:	429c      	cmp	r4, r3
 8009756:	bf08      	it	eq
 8009758:	68ec      	ldreq	r4, [r5, #12]
 800975a:	e7ca      	b.n	80096f2 <__swbuf_r+0x1a>
 800975c:	4621      	mov	r1, r4
 800975e:	4628      	mov	r0, r5
 8009760:	f000 f80c 	bl	800977c <__swsetup_r>
 8009764:	2800      	cmp	r0, #0
 8009766:	d0cb      	beq.n	8009700 <__swbuf_r+0x28>
 8009768:	f04f 37ff 	mov.w	r7, #4294967295
 800976c:	e7ea      	b.n	8009744 <__swbuf_r+0x6c>
 800976e:	bf00      	nop
 8009770:	0800a394 	.word	0x0800a394
 8009774:	0800a3b4 	.word	0x0800a3b4
 8009778:	0800a374 	.word	0x0800a374

0800977c <__swsetup_r>:
 800977c:	4b32      	ldr	r3, [pc, #200]	; (8009848 <__swsetup_r+0xcc>)
 800977e:	b570      	push	{r4, r5, r6, lr}
 8009780:	681d      	ldr	r5, [r3, #0]
 8009782:	4606      	mov	r6, r0
 8009784:	460c      	mov	r4, r1
 8009786:	b125      	cbz	r5, 8009792 <__swsetup_r+0x16>
 8009788:	69ab      	ldr	r3, [r5, #24]
 800978a:	b913      	cbnz	r3, 8009792 <__swsetup_r+0x16>
 800978c:	4628      	mov	r0, r5
 800978e:	f000 f985 	bl	8009a9c <__sinit>
 8009792:	4b2e      	ldr	r3, [pc, #184]	; (800984c <__swsetup_r+0xd0>)
 8009794:	429c      	cmp	r4, r3
 8009796:	d10f      	bne.n	80097b8 <__swsetup_r+0x3c>
 8009798:	686c      	ldr	r4, [r5, #4]
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a0:	0719      	lsls	r1, r3, #28
 80097a2:	d42c      	bmi.n	80097fe <__swsetup_r+0x82>
 80097a4:	06dd      	lsls	r5, r3, #27
 80097a6:	d411      	bmi.n	80097cc <__swsetup_r+0x50>
 80097a8:	2309      	movs	r3, #9
 80097aa:	6033      	str	r3, [r6, #0]
 80097ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295
 80097b6:	e03e      	b.n	8009836 <__swsetup_r+0xba>
 80097b8:	4b25      	ldr	r3, [pc, #148]	; (8009850 <__swsetup_r+0xd4>)
 80097ba:	429c      	cmp	r4, r3
 80097bc:	d101      	bne.n	80097c2 <__swsetup_r+0x46>
 80097be:	68ac      	ldr	r4, [r5, #8]
 80097c0:	e7eb      	b.n	800979a <__swsetup_r+0x1e>
 80097c2:	4b24      	ldr	r3, [pc, #144]	; (8009854 <__swsetup_r+0xd8>)
 80097c4:	429c      	cmp	r4, r3
 80097c6:	bf08      	it	eq
 80097c8:	68ec      	ldreq	r4, [r5, #12]
 80097ca:	e7e6      	b.n	800979a <__swsetup_r+0x1e>
 80097cc:	0758      	lsls	r0, r3, #29
 80097ce:	d512      	bpl.n	80097f6 <__swsetup_r+0x7a>
 80097d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097d2:	b141      	cbz	r1, 80097e6 <__swsetup_r+0x6a>
 80097d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097d8:	4299      	cmp	r1, r3
 80097da:	d002      	beq.n	80097e2 <__swsetup_r+0x66>
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff fb25 	bl	8008e2c <_free_r>
 80097e2:	2300      	movs	r3, #0
 80097e4:	6363      	str	r3, [r4, #52]	; 0x34
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	2300      	movs	r3, #0
 80097f0:	6063      	str	r3, [r4, #4]
 80097f2:	6923      	ldr	r3, [r4, #16]
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	f043 0308 	orr.w	r3, r3, #8
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	b94b      	cbnz	r3, 8009816 <__swsetup_r+0x9a>
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800980c:	d003      	beq.n	8009816 <__swsetup_r+0x9a>
 800980e:	4621      	mov	r1, r4
 8009810:	4630      	mov	r0, r6
 8009812:	f000 fa09 	bl	8009c28 <__smakebuf_r>
 8009816:	89a0      	ldrh	r0, [r4, #12]
 8009818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800981c:	f010 0301 	ands.w	r3, r0, #1
 8009820:	d00a      	beq.n	8009838 <__swsetup_r+0xbc>
 8009822:	2300      	movs	r3, #0
 8009824:	60a3      	str	r3, [r4, #8]
 8009826:	6963      	ldr	r3, [r4, #20]
 8009828:	425b      	negs	r3, r3
 800982a:	61a3      	str	r3, [r4, #24]
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	b943      	cbnz	r3, 8009842 <__swsetup_r+0xc6>
 8009830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009834:	d1ba      	bne.n	80097ac <__swsetup_r+0x30>
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	0781      	lsls	r1, r0, #30
 800983a:	bf58      	it	pl
 800983c:	6963      	ldrpl	r3, [r4, #20]
 800983e:	60a3      	str	r3, [r4, #8]
 8009840:	e7f4      	b.n	800982c <__swsetup_r+0xb0>
 8009842:	2000      	movs	r0, #0
 8009844:	e7f7      	b.n	8009836 <__swsetup_r+0xba>
 8009846:	bf00      	nop
 8009848:	2000001c 	.word	0x2000001c
 800984c:	0800a394 	.word	0x0800a394
 8009850:	0800a3b4 	.word	0x0800a3b4
 8009854:	0800a374 	.word	0x0800a374

08009858 <abort>:
 8009858:	b508      	push	{r3, lr}
 800985a:	2006      	movs	r0, #6
 800985c:	f000 fa54 	bl	8009d08 <raise>
 8009860:	2001      	movs	r0, #1
 8009862:	f7f8 fc6f 	bl	8002144 <_exit>
	...

08009868 <__sflush_r>:
 8009868:	898a      	ldrh	r2, [r1, #12]
 800986a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986e:	4605      	mov	r5, r0
 8009870:	0710      	lsls	r0, r2, #28
 8009872:	460c      	mov	r4, r1
 8009874:	d458      	bmi.n	8009928 <__sflush_r+0xc0>
 8009876:	684b      	ldr	r3, [r1, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	dc05      	bgt.n	8009888 <__sflush_r+0x20>
 800987c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	dc02      	bgt.n	8009888 <__sflush_r+0x20>
 8009882:	2000      	movs	r0, #0
 8009884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800988a:	2e00      	cmp	r6, #0
 800988c:	d0f9      	beq.n	8009882 <__sflush_r+0x1a>
 800988e:	2300      	movs	r3, #0
 8009890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009894:	682f      	ldr	r7, [r5, #0]
 8009896:	602b      	str	r3, [r5, #0]
 8009898:	d032      	beq.n	8009900 <__sflush_r+0x98>
 800989a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	075a      	lsls	r2, r3, #29
 80098a0:	d505      	bpl.n	80098ae <__sflush_r+0x46>
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	1ac0      	subs	r0, r0, r3
 80098a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098a8:	b10b      	cbz	r3, 80098ae <__sflush_r+0x46>
 80098aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ac:	1ac0      	subs	r0, r0, r3
 80098ae:	2300      	movs	r3, #0
 80098b0:	4602      	mov	r2, r0
 80098b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098b4:	6a21      	ldr	r1, [r4, #32]
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b0      	blx	r6
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	d106      	bne.n	80098ce <__sflush_r+0x66>
 80098c0:	6829      	ldr	r1, [r5, #0]
 80098c2:	291d      	cmp	r1, #29
 80098c4:	d82c      	bhi.n	8009920 <__sflush_r+0xb8>
 80098c6:	4a2a      	ldr	r2, [pc, #168]	; (8009970 <__sflush_r+0x108>)
 80098c8:	40ca      	lsrs	r2, r1
 80098ca:	07d6      	lsls	r6, r2, #31
 80098cc:	d528      	bpl.n	8009920 <__sflush_r+0xb8>
 80098ce:	2200      	movs	r2, #0
 80098d0:	6062      	str	r2, [r4, #4]
 80098d2:	04d9      	lsls	r1, r3, #19
 80098d4:	6922      	ldr	r2, [r4, #16]
 80098d6:	6022      	str	r2, [r4, #0]
 80098d8:	d504      	bpl.n	80098e4 <__sflush_r+0x7c>
 80098da:	1c42      	adds	r2, r0, #1
 80098dc:	d101      	bne.n	80098e2 <__sflush_r+0x7a>
 80098de:	682b      	ldr	r3, [r5, #0]
 80098e0:	b903      	cbnz	r3, 80098e4 <__sflush_r+0x7c>
 80098e2:	6560      	str	r0, [r4, #84]	; 0x54
 80098e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098e6:	602f      	str	r7, [r5, #0]
 80098e8:	2900      	cmp	r1, #0
 80098ea:	d0ca      	beq.n	8009882 <__sflush_r+0x1a>
 80098ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f0:	4299      	cmp	r1, r3
 80098f2:	d002      	beq.n	80098fa <__sflush_r+0x92>
 80098f4:	4628      	mov	r0, r5
 80098f6:	f7ff fa99 	bl	8008e2c <_free_r>
 80098fa:	2000      	movs	r0, #0
 80098fc:	6360      	str	r0, [r4, #52]	; 0x34
 80098fe:	e7c1      	b.n	8009884 <__sflush_r+0x1c>
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	2301      	movs	r3, #1
 8009904:	4628      	mov	r0, r5
 8009906:	47b0      	blx	r6
 8009908:	1c41      	adds	r1, r0, #1
 800990a:	d1c7      	bne.n	800989c <__sflush_r+0x34>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0c4      	beq.n	800989c <__sflush_r+0x34>
 8009912:	2b1d      	cmp	r3, #29
 8009914:	d001      	beq.n	800991a <__sflush_r+0xb2>
 8009916:	2b16      	cmp	r3, #22
 8009918:	d101      	bne.n	800991e <__sflush_r+0xb6>
 800991a:	602f      	str	r7, [r5, #0]
 800991c:	e7b1      	b.n	8009882 <__sflush_r+0x1a>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	e7ad      	b.n	8009884 <__sflush_r+0x1c>
 8009928:	690f      	ldr	r7, [r1, #16]
 800992a:	2f00      	cmp	r7, #0
 800992c:	d0a9      	beq.n	8009882 <__sflush_r+0x1a>
 800992e:	0793      	lsls	r3, r2, #30
 8009930:	680e      	ldr	r6, [r1, #0]
 8009932:	bf08      	it	eq
 8009934:	694b      	ldreq	r3, [r1, #20]
 8009936:	600f      	str	r7, [r1, #0]
 8009938:	bf18      	it	ne
 800993a:	2300      	movne	r3, #0
 800993c:	eba6 0807 	sub.w	r8, r6, r7
 8009940:	608b      	str	r3, [r1, #8]
 8009942:	f1b8 0f00 	cmp.w	r8, #0
 8009946:	dd9c      	ble.n	8009882 <__sflush_r+0x1a>
 8009948:	6a21      	ldr	r1, [r4, #32]
 800994a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800994c:	4643      	mov	r3, r8
 800994e:	463a      	mov	r2, r7
 8009950:	4628      	mov	r0, r5
 8009952:	47b0      	blx	r6
 8009954:	2800      	cmp	r0, #0
 8009956:	dc06      	bgt.n	8009966 <__sflush_r+0xfe>
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	f04f 30ff 	mov.w	r0, #4294967295
 8009964:	e78e      	b.n	8009884 <__sflush_r+0x1c>
 8009966:	4407      	add	r7, r0
 8009968:	eba8 0800 	sub.w	r8, r8, r0
 800996c:	e7e9      	b.n	8009942 <__sflush_r+0xda>
 800996e:	bf00      	nop
 8009970:	20400001 	.word	0x20400001

08009974 <_fflush_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	690b      	ldr	r3, [r1, #16]
 8009978:	4605      	mov	r5, r0
 800997a:	460c      	mov	r4, r1
 800997c:	b913      	cbnz	r3, 8009984 <_fflush_r+0x10>
 800997e:	2500      	movs	r5, #0
 8009980:	4628      	mov	r0, r5
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	b118      	cbz	r0, 800998e <_fflush_r+0x1a>
 8009986:	6983      	ldr	r3, [r0, #24]
 8009988:	b90b      	cbnz	r3, 800998e <_fflush_r+0x1a>
 800998a:	f000 f887 	bl	8009a9c <__sinit>
 800998e:	4b14      	ldr	r3, [pc, #80]	; (80099e0 <_fflush_r+0x6c>)
 8009990:	429c      	cmp	r4, r3
 8009992:	d11b      	bne.n	80099cc <_fflush_r+0x58>
 8009994:	686c      	ldr	r4, [r5, #4]
 8009996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0ef      	beq.n	800997e <_fflush_r+0xa>
 800999e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099a0:	07d0      	lsls	r0, r2, #31
 80099a2:	d404      	bmi.n	80099ae <_fflush_r+0x3a>
 80099a4:	0599      	lsls	r1, r3, #22
 80099a6:	d402      	bmi.n	80099ae <_fflush_r+0x3a>
 80099a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099aa:	f000 f915 	bl	8009bd8 <__retarget_lock_acquire_recursive>
 80099ae:	4628      	mov	r0, r5
 80099b0:	4621      	mov	r1, r4
 80099b2:	f7ff ff59 	bl	8009868 <__sflush_r>
 80099b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099b8:	07da      	lsls	r2, r3, #31
 80099ba:	4605      	mov	r5, r0
 80099bc:	d4e0      	bmi.n	8009980 <_fflush_r+0xc>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	059b      	lsls	r3, r3, #22
 80099c2:	d4dd      	bmi.n	8009980 <_fflush_r+0xc>
 80099c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c6:	f000 f908 	bl	8009bda <__retarget_lock_release_recursive>
 80099ca:	e7d9      	b.n	8009980 <_fflush_r+0xc>
 80099cc:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <_fflush_r+0x70>)
 80099ce:	429c      	cmp	r4, r3
 80099d0:	d101      	bne.n	80099d6 <_fflush_r+0x62>
 80099d2:	68ac      	ldr	r4, [r5, #8]
 80099d4:	e7df      	b.n	8009996 <_fflush_r+0x22>
 80099d6:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <_fflush_r+0x74>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	bf08      	it	eq
 80099dc:	68ec      	ldreq	r4, [r5, #12]
 80099de:	e7da      	b.n	8009996 <_fflush_r+0x22>
 80099e0:	0800a394 	.word	0x0800a394
 80099e4:	0800a3b4 	.word	0x0800a3b4
 80099e8:	0800a374 	.word	0x0800a374

080099ec <std>:
 80099ec:	2300      	movs	r3, #0
 80099ee:	b510      	push	{r4, lr}
 80099f0:	4604      	mov	r4, r0
 80099f2:	e9c0 3300 	strd	r3, r3, [r0]
 80099f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099fa:	6083      	str	r3, [r0, #8]
 80099fc:	8181      	strh	r1, [r0, #12]
 80099fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009a00:	81c2      	strh	r2, [r0, #14]
 8009a02:	6183      	str	r3, [r0, #24]
 8009a04:	4619      	mov	r1, r3
 8009a06:	2208      	movs	r2, #8
 8009a08:	305c      	adds	r0, #92	; 0x5c
 8009a0a:	f7fb fdcd 	bl	80055a8 <memset>
 8009a0e:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <std+0x38>)
 8009a10:	6263      	str	r3, [r4, #36]	; 0x24
 8009a12:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <std+0x3c>)
 8009a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a16:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <std+0x40>)
 8009a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a1a:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <std+0x44>)
 8009a1c:	6224      	str	r4, [r4, #32]
 8009a1e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	bf00      	nop
 8009a24:	08009d41 	.word	0x08009d41
 8009a28:	08009d63 	.word	0x08009d63
 8009a2c:	08009d9b 	.word	0x08009d9b
 8009a30:	08009dbf 	.word	0x08009dbf

08009a34 <_cleanup_r>:
 8009a34:	4901      	ldr	r1, [pc, #4]	; (8009a3c <_cleanup_r+0x8>)
 8009a36:	f000 b8af 	b.w	8009b98 <_fwalk_reent>
 8009a3a:	bf00      	nop
 8009a3c:	08009975 	.word	0x08009975

08009a40 <__sfmoreglue>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	2268      	movs	r2, #104	; 0x68
 8009a44:	1e4d      	subs	r5, r1, #1
 8009a46:	4355      	muls	r5, r2
 8009a48:	460e      	mov	r6, r1
 8009a4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a4e:	f7ff fa59 	bl	8008f04 <_malloc_r>
 8009a52:	4604      	mov	r4, r0
 8009a54:	b140      	cbz	r0, 8009a68 <__sfmoreglue+0x28>
 8009a56:	2100      	movs	r1, #0
 8009a58:	e9c0 1600 	strd	r1, r6, [r0]
 8009a5c:	300c      	adds	r0, #12
 8009a5e:	60a0      	str	r0, [r4, #8]
 8009a60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a64:	f7fb fda0 	bl	80055a8 <memset>
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}

08009a6c <__sfp_lock_acquire>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	; (8009a74 <__sfp_lock_acquire+0x8>)
 8009a6e:	f000 b8b3 	b.w	8009bd8 <__retarget_lock_acquire_recursive>
 8009a72:	bf00      	nop
 8009a74:	20000529 	.word	0x20000529

08009a78 <__sfp_lock_release>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__sfp_lock_release+0x8>)
 8009a7a:	f000 b8ae 	b.w	8009bda <__retarget_lock_release_recursive>
 8009a7e:	bf00      	nop
 8009a80:	20000529 	.word	0x20000529

08009a84 <__sinit_lock_acquire>:
 8009a84:	4801      	ldr	r0, [pc, #4]	; (8009a8c <__sinit_lock_acquire+0x8>)
 8009a86:	f000 b8a7 	b.w	8009bd8 <__retarget_lock_acquire_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	2000052a 	.word	0x2000052a

08009a90 <__sinit_lock_release>:
 8009a90:	4801      	ldr	r0, [pc, #4]	; (8009a98 <__sinit_lock_release+0x8>)
 8009a92:	f000 b8a2 	b.w	8009bda <__retarget_lock_release_recursive>
 8009a96:	bf00      	nop
 8009a98:	2000052a 	.word	0x2000052a

08009a9c <__sinit>:
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	f7ff fff0 	bl	8009a84 <__sinit_lock_acquire>
 8009aa4:	69a3      	ldr	r3, [r4, #24]
 8009aa6:	b11b      	cbz	r3, 8009ab0 <__sinit+0x14>
 8009aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aac:	f7ff bff0 	b.w	8009a90 <__sinit_lock_release>
 8009ab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ab4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <__sinit+0x68>)
 8009ab8:	4a13      	ldr	r2, [pc, #76]	; (8009b08 <__sinit+0x6c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	bf04      	itt	eq
 8009ac2:	2301      	moveq	r3, #1
 8009ac4:	61a3      	streq	r3, [r4, #24]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f000 f820 	bl	8009b0c <__sfp>
 8009acc:	6060      	str	r0, [r4, #4]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 f81c 	bl	8009b0c <__sfp>
 8009ad4:	60a0      	str	r0, [r4, #8]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f818 	bl	8009b0c <__sfp>
 8009adc:	2200      	movs	r2, #0
 8009ade:	60e0      	str	r0, [r4, #12]
 8009ae0:	2104      	movs	r1, #4
 8009ae2:	6860      	ldr	r0, [r4, #4]
 8009ae4:	f7ff ff82 	bl	80099ec <std>
 8009ae8:	68a0      	ldr	r0, [r4, #8]
 8009aea:	2201      	movs	r2, #1
 8009aec:	2109      	movs	r1, #9
 8009aee:	f7ff ff7d 	bl	80099ec <std>
 8009af2:	68e0      	ldr	r0, [r4, #12]
 8009af4:	2202      	movs	r2, #2
 8009af6:	2112      	movs	r1, #18
 8009af8:	f7ff ff78 	bl	80099ec <std>
 8009afc:	2301      	movs	r3, #1
 8009afe:	61a3      	str	r3, [r4, #24]
 8009b00:	e7d2      	b.n	8009aa8 <__sinit+0xc>
 8009b02:	bf00      	nop
 8009b04:	08009f2c 	.word	0x08009f2c
 8009b08:	08009a35 	.word	0x08009a35

08009b0c <__sfp>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	4607      	mov	r7, r0
 8009b10:	f7ff ffac 	bl	8009a6c <__sfp_lock_acquire>
 8009b14:	4b1e      	ldr	r3, [pc, #120]	; (8009b90 <__sfp+0x84>)
 8009b16:	681e      	ldr	r6, [r3, #0]
 8009b18:	69b3      	ldr	r3, [r6, #24]
 8009b1a:	b913      	cbnz	r3, 8009b22 <__sfp+0x16>
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7ff ffbd 	bl	8009a9c <__sinit>
 8009b22:	3648      	adds	r6, #72	; 0x48
 8009b24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	d503      	bpl.n	8009b34 <__sfp+0x28>
 8009b2c:	6833      	ldr	r3, [r6, #0]
 8009b2e:	b30b      	cbz	r3, 8009b74 <__sfp+0x68>
 8009b30:	6836      	ldr	r6, [r6, #0]
 8009b32:	e7f7      	b.n	8009b24 <__sfp+0x18>
 8009b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b38:	b9d5      	cbnz	r5, 8009b70 <__sfp+0x64>
 8009b3a:	4b16      	ldr	r3, [pc, #88]	; (8009b94 <__sfp+0x88>)
 8009b3c:	60e3      	str	r3, [r4, #12]
 8009b3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b42:	6665      	str	r5, [r4, #100]	; 0x64
 8009b44:	f000 f847 	bl	8009bd6 <__retarget_lock_init_recursive>
 8009b48:	f7ff ff96 	bl	8009a78 <__sfp_lock_release>
 8009b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b54:	6025      	str	r5, [r4, #0]
 8009b56:	61a5      	str	r5, [r4, #24]
 8009b58:	2208      	movs	r2, #8
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b60:	f7fb fd22 	bl	80055a8 <memset>
 8009b64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b70:	3468      	adds	r4, #104	; 0x68
 8009b72:	e7d9      	b.n	8009b28 <__sfp+0x1c>
 8009b74:	2104      	movs	r1, #4
 8009b76:	4638      	mov	r0, r7
 8009b78:	f7ff ff62 	bl	8009a40 <__sfmoreglue>
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	6030      	str	r0, [r6, #0]
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d1d5      	bne.n	8009b30 <__sfp+0x24>
 8009b84:	f7ff ff78 	bl	8009a78 <__sfp_lock_release>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	e7ee      	b.n	8009b6c <__sfp+0x60>
 8009b8e:	bf00      	nop
 8009b90:	08009f2c 	.word	0x08009f2c
 8009b94:	ffff0001 	.word	0xffff0001

08009b98 <_fwalk_reent>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	4688      	mov	r8, r1
 8009ba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ba4:	2700      	movs	r7, #0
 8009ba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009baa:	f1b9 0901 	subs.w	r9, r9, #1
 8009bae:	d505      	bpl.n	8009bbc <_fwalk_reent+0x24>
 8009bb0:	6824      	ldr	r4, [r4, #0]
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	d1f7      	bne.n	8009ba6 <_fwalk_reent+0xe>
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bbc:	89ab      	ldrh	r3, [r5, #12]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d907      	bls.n	8009bd2 <_fwalk_reent+0x3a>
 8009bc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	d003      	beq.n	8009bd2 <_fwalk_reent+0x3a>
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4630      	mov	r0, r6
 8009bce:	47c0      	blx	r8
 8009bd0:	4307      	orrs	r7, r0
 8009bd2:	3568      	adds	r5, #104	; 0x68
 8009bd4:	e7e9      	b.n	8009baa <_fwalk_reent+0x12>

08009bd6 <__retarget_lock_init_recursive>:
 8009bd6:	4770      	bx	lr

08009bd8 <__retarget_lock_acquire_recursive>:
 8009bd8:	4770      	bx	lr

08009bda <__retarget_lock_release_recursive>:
 8009bda:	4770      	bx	lr

08009bdc <__swhatbuf_r>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	460e      	mov	r6, r1
 8009be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be4:	2900      	cmp	r1, #0
 8009be6:	b096      	sub	sp, #88	; 0x58
 8009be8:	4614      	mov	r4, r2
 8009bea:	461d      	mov	r5, r3
 8009bec:	da08      	bge.n	8009c00 <__swhatbuf_r+0x24>
 8009bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	602a      	str	r2, [r5, #0]
 8009bf6:	061a      	lsls	r2, r3, #24
 8009bf8:	d410      	bmi.n	8009c1c <__swhatbuf_r+0x40>
 8009bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bfe:	e00e      	b.n	8009c1e <__swhatbuf_r+0x42>
 8009c00:	466a      	mov	r2, sp
 8009c02:	f000 f903 	bl	8009e0c <_fstat_r>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	dbf1      	blt.n	8009bee <__swhatbuf_r+0x12>
 8009c0a:	9a01      	ldr	r2, [sp, #4]
 8009c0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c14:	425a      	negs	r2, r3
 8009c16:	415a      	adcs	r2, r3
 8009c18:	602a      	str	r2, [r5, #0]
 8009c1a:	e7ee      	b.n	8009bfa <__swhatbuf_r+0x1e>
 8009c1c:	2340      	movs	r3, #64	; 0x40
 8009c1e:	2000      	movs	r0, #0
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	b016      	add	sp, #88	; 0x58
 8009c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c28 <__smakebuf_r>:
 8009c28:	898b      	ldrh	r3, [r1, #12]
 8009c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c2c:	079d      	lsls	r5, r3, #30
 8009c2e:	4606      	mov	r6, r0
 8009c30:	460c      	mov	r4, r1
 8009c32:	d507      	bpl.n	8009c44 <__smakebuf_r+0x1c>
 8009c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	6123      	str	r3, [r4, #16]
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	6163      	str	r3, [r4, #20]
 8009c40:	b002      	add	sp, #8
 8009c42:	bd70      	pop	{r4, r5, r6, pc}
 8009c44:	ab01      	add	r3, sp, #4
 8009c46:	466a      	mov	r2, sp
 8009c48:	f7ff ffc8 	bl	8009bdc <__swhatbuf_r>
 8009c4c:	9900      	ldr	r1, [sp, #0]
 8009c4e:	4605      	mov	r5, r0
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff f957 	bl	8008f04 <_malloc_r>
 8009c56:	b948      	cbnz	r0, 8009c6c <__smakebuf_r+0x44>
 8009c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5c:	059a      	lsls	r2, r3, #22
 8009c5e:	d4ef      	bmi.n	8009c40 <__smakebuf_r+0x18>
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	f043 0302 	orr.w	r3, r3, #2
 8009c68:	81a3      	strh	r3, [r4, #12]
 8009c6a:	e7e3      	b.n	8009c34 <__smakebuf_r+0xc>
 8009c6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ca4 <__smakebuf_r+0x7c>)
 8009c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	6020      	str	r0, [r4, #0]
 8009c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	9b00      	ldr	r3, [sp, #0]
 8009c7c:	6163      	str	r3, [r4, #20]
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	6120      	str	r0, [r4, #16]
 8009c82:	b15b      	cbz	r3, 8009c9c <__smakebuf_r+0x74>
 8009c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f000 f8d1 	bl	8009e30 <_isatty_r>
 8009c8e:	b128      	cbz	r0, 8009c9c <__smakebuf_r+0x74>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	f023 0303 	bic.w	r3, r3, #3
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	89a0      	ldrh	r0, [r4, #12]
 8009c9e:	4305      	orrs	r5, r0
 8009ca0:	81a5      	strh	r5, [r4, #12]
 8009ca2:	e7cd      	b.n	8009c40 <__smakebuf_r+0x18>
 8009ca4:	08009a35 	.word	0x08009a35

08009ca8 <_malloc_usable_size_r>:
 8009ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cac:	1f18      	subs	r0, r3, #4
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	bfbc      	itt	lt
 8009cb2:	580b      	ldrlt	r3, [r1, r0]
 8009cb4:	18c0      	addlt	r0, r0, r3
 8009cb6:	4770      	bx	lr

08009cb8 <_raise_r>:
 8009cb8:	291f      	cmp	r1, #31
 8009cba:	b538      	push	{r3, r4, r5, lr}
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	460d      	mov	r5, r1
 8009cc0:	d904      	bls.n	8009ccc <_raise_r+0x14>
 8009cc2:	2316      	movs	r3, #22
 8009cc4:	6003      	str	r3, [r0, #0]
 8009cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cce:	b112      	cbz	r2, 8009cd6 <_raise_r+0x1e>
 8009cd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cd4:	b94b      	cbnz	r3, 8009cea <_raise_r+0x32>
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 f830 	bl	8009d3c <_getpid_r>
 8009cdc:	462a      	mov	r2, r5
 8009cde:	4601      	mov	r1, r0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ce6:	f000 b817 	b.w	8009d18 <_kill_r>
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d00a      	beq.n	8009d04 <_raise_r+0x4c>
 8009cee:	1c59      	adds	r1, r3, #1
 8009cf0:	d103      	bne.n	8009cfa <_raise_r+0x42>
 8009cf2:	2316      	movs	r3, #22
 8009cf4:	6003      	str	r3, [r0, #0]
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	e7e7      	b.n	8009cca <_raise_r+0x12>
 8009cfa:	2400      	movs	r4, #0
 8009cfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d00:	4628      	mov	r0, r5
 8009d02:	4798      	blx	r3
 8009d04:	2000      	movs	r0, #0
 8009d06:	e7e0      	b.n	8009cca <_raise_r+0x12>

08009d08 <raise>:
 8009d08:	4b02      	ldr	r3, [pc, #8]	; (8009d14 <raise+0xc>)
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	6818      	ldr	r0, [r3, #0]
 8009d0e:	f7ff bfd3 	b.w	8009cb8 <_raise_r>
 8009d12:	bf00      	nop
 8009d14:	2000001c 	.word	0x2000001c

08009d18 <_kill_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4d07      	ldr	r5, [pc, #28]	; (8009d38 <_kill_r+0x20>)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	4611      	mov	r1, r2
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	f7f8 f9fd 	bl	8002124 <_kill>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	d102      	bne.n	8009d34 <_kill_r+0x1c>
 8009d2e:	682b      	ldr	r3, [r5, #0]
 8009d30:	b103      	cbz	r3, 8009d34 <_kill_r+0x1c>
 8009d32:	6023      	str	r3, [r4, #0]
 8009d34:	bd38      	pop	{r3, r4, r5, pc}
 8009d36:	bf00      	nop
 8009d38:	20000524 	.word	0x20000524

08009d3c <_getpid_r>:
 8009d3c:	f7f8 b9ea 	b.w	8002114 <_getpid>

08009d40 <__sread>:
 8009d40:	b510      	push	{r4, lr}
 8009d42:	460c      	mov	r4, r1
 8009d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d48:	f000 f894 	bl	8009e74 <_read_r>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	bfab      	itete	ge
 8009d50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d52:	89a3      	ldrhlt	r3, [r4, #12]
 8009d54:	181b      	addge	r3, r3, r0
 8009d56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d5a:	bfac      	ite	ge
 8009d5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d5e:	81a3      	strhlt	r3, [r4, #12]
 8009d60:	bd10      	pop	{r4, pc}

08009d62 <__swrite>:
 8009d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d66:	461f      	mov	r7, r3
 8009d68:	898b      	ldrh	r3, [r1, #12]
 8009d6a:	05db      	lsls	r3, r3, #23
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	460c      	mov	r4, r1
 8009d70:	4616      	mov	r6, r2
 8009d72:	d505      	bpl.n	8009d80 <__swrite+0x1e>
 8009d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d78:	2302      	movs	r3, #2
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f000 f868 	bl	8009e50 <_lseek_r>
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	463b      	mov	r3, r7
 8009d90:	4628      	mov	r0, r5
 8009d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d96:	f000 b817 	b.w	8009dc8 <_write_r>

08009d9a <__sseek>:
 8009d9a:	b510      	push	{r4, lr}
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da2:	f000 f855 	bl	8009e50 <_lseek_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	bf15      	itete	ne
 8009dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009db6:	81a3      	strheq	r3, [r4, #12]
 8009db8:	bf18      	it	ne
 8009dba:	81a3      	strhne	r3, [r4, #12]
 8009dbc:	bd10      	pop	{r4, pc}

08009dbe <__sclose>:
 8009dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc2:	f000 b813 	b.w	8009dec <_close_r>
	...

08009dc8 <_write_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4d07      	ldr	r5, [pc, #28]	; (8009de8 <_write_r+0x20>)
 8009dcc:	4604      	mov	r4, r0
 8009dce:	4608      	mov	r0, r1
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	602a      	str	r2, [r5, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f7f8 f9db 	bl	8002192 <_write>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_write_r+0x1e>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_write_r+0x1e>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	20000524 	.word	0x20000524

08009dec <_close_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d06      	ldr	r5, [pc, #24]	; (8009e08 <_close_r+0x1c>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	602b      	str	r3, [r5, #0]
 8009df8:	f7f8 f9e7 	bl	80021ca <_close>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_close_r+0x1a>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_close_r+0x1a>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	20000524 	.word	0x20000524

08009e0c <_fstat_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d07      	ldr	r5, [pc, #28]	; (8009e2c <_fstat_r+0x20>)
 8009e10:	2300      	movs	r3, #0
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	4611      	mov	r1, r2
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	f7f8 f9e2 	bl	80021e2 <_fstat>
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	d102      	bne.n	8009e28 <_fstat_r+0x1c>
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	b103      	cbz	r3, 8009e28 <_fstat_r+0x1c>
 8009e26:	6023      	str	r3, [r4, #0]
 8009e28:	bd38      	pop	{r3, r4, r5, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20000524 	.word	0x20000524

08009e30 <_isatty_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d06      	ldr	r5, [pc, #24]	; (8009e4c <_isatty_r+0x1c>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7f8 f9e1 	bl	8002202 <_isatty>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_isatty_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_isatty_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	20000524 	.word	0x20000524

08009e50 <_lseek_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d07      	ldr	r5, [pc, #28]	; (8009e70 <_lseek_r+0x20>)
 8009e54:	4604      	mov	r4, r0
 8009e56:	4608      	mov	r0, r1
 8009e58:	4611      	mov	r1, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f7f8 f9da 	bl	8002218 <_lseek>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_lseek_r+0x1e>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_lseek_r+0x1e>
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	20000524 	.word	0x20000524

08009e74 <_read_r>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	4d07      	ldr	r5, [pc, #28]	; (8009e94 <_read_r+0x20>)
 8009e78:	4604      	mov	r4, r0
 8009e7a:	4608      	mov	r0, r1
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	2200      	movs	r2, #0
 8009e80:	602a      	str	r2, [r5, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	f7f8 f968 	bl	8002158 <_read>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d102      	bne.n	8009e92 <_read_r+0x1e>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	b103      	cbz	r3, 8009e92 <_read_r+0x1e>
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	20000524 	.word	0x20000524

08009e98 <_init>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr

08009ea4 <_fini>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr
